
zadanie_cv_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08006fa8  08006fa8  00016fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007484  08007484  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08007484  08007484  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007484  08007484  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800748c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000148  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009718  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e28  00000000  00000000  00029920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000820  00000000  00000000  0002c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181e3  00000000  00000000  0002c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000071f8  00000000  00000000  00044a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b571  00000000  00000000  0004bc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c71bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038e0  00000000  00000000  000c7210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f8c 	.word	0x08006f8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006f8c 	.word	0x08006f8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ffe3 	bl	8000cbc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cf6:	f7ff ff57 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ffa7 	bl	8000c54 <NVIC_EncodePriority>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2010      	movs	r0, #16
 8000d0c:	f7ff ff78 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d10:	2010      	movs	r0, #16
 8000d12:	f7ff ff57 	bl	8000bc4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff97 	bl	8000c54 <NVIC_EncodePriority>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	2011      	movs	r0, #17
 8000d2c:	f7ff ff68 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d30:	2011      	movs	r0, #17
 8000d32:	f7ff ff47 	bl	8000bc4 <__NVIC_EnableIRQ>

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <LL_AHB1_GRP1_EnableClock>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d46:	695a      	ldr	r2, [r3, #20]
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4013      	ands	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000

08000d6c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d70:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d74:	f7ff ffe2 	bl	8000d3c <LL_AHB1_GRP1_EnableClock>

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <__NVIC_SetPriorityGrouping>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	4a06      	ldr	r2, [pc, #24]	; (8000dec <LL_DMA_GetDataLength+0x28>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	08007038 	.word	0x08007038

08000df0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <LL_RCC_HSI_Enable+0x1c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <LL_RCC_HSI_Enable+0x1c>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <LL_RCC_HSI_IsReady+0x20>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	bf0c      	ite	eq
 8000e20:	2301      	moveq	r3, #1
 8000e22:	2300      	movne	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000

08000e34 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4904      	ldr	r1, [pc, #16]	; (8000e5c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <LL_RCC_SetSysClkSource+0x24>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f023 0203 	bic.w	r2, r3, #3
 8000e70:	4904      	ldr	r1, [pc, #16]	; (8000e84 <LL_RCC_SetSysClkSource+0x24>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000

08000e88 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <LL_RCC_GetSysClkSource+0x18>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 030c 	and.w	r3, r3, #12
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eb4:	4904      	ldr	r1, [pc, #16]	; (8000ec8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40021000 	.word	0x40021000

08000ecc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000edc:	4904      	ldr	r1, [pc, #16]	; (8000ef0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f04:	4904      	ldr	r1, [pc, #16]	; (8000f18 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000

08000f1c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f32:	69da      	ldr	r2, [r3, #28]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4013      	ands	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000

08000f7c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <LL_FLASH_SetLatency+0x24>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f023 0207 	bic.w	r2, r3, #7
 8000f8c:	4904      	ldr	r1, [pc, #16]	; (8000fa0 <LL_FLASH_SetLatency+0x24>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LL_FLASH_GetLatency+0x18>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0307 	and.w	r3, r3, #7
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8000fc6:	af04      	add	r7, sp, #16

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff ffbf 	bl	8000f4c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000fce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000fd2:	f7ff ffa3 	bl	8000f1c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f7ff fed0 	bl	8000d7c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f850 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f7ff fec4 	bl	8000d6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe4:	f7ff fe82 	bl	8000cec <MX_DMA_Init>
  MX_TIM2_Init();
 8000fe8:	f000 fdec 	bl	8001bc4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000fec:	f001 fa4a 	bl	8002484 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USART2_RegisterCallback(proccesDmaData);
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <main+0xa8>)
 8000ff2:	f001 fa35 	bl	8002460 <USART2_RegisterCallback>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t buffer_mem_occupied = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8000ff6:	2106      	movs	r1, #6
 8000ff8:	481c      	ldr	r0, [pc, #112]	; (800106c <main+0xac>)
 8000ffa:	f7ff fee3 	bl	8000dc4 <LL_DMA_GetDataLength>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	425b      	negs	r3, r3
 8001004:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff

	 	  float total_load = (float)buffer_mem_occupied/DMA_USART2_BUFFER_SIZE*100;
 8001008:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001014:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001070 <main+0xb0>
 8001018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001074 <main+0xb4>
 8001020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001024:	edc7 7a7e 	vstr	s15, [r7, #504]	; 0x1f8

	 	  USART2_PutBuffer(tx_data, sprintf((char*)tx_data, "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %%]: %3.2f , pwm intensity: %d \n\r",\
 8001028:	f897 41ff 	ldrb.w	r4, [r7, #511]	; 0x1ff
 800102c:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 8001030:	f7ff fa8a 	bl	8000548 <__aeabi_f2d>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	490f      	ldr	r1, [pc, #60]	; (8001078 <main+0xb8>)
 800103a:	7809      	ldrb	r1, [r1, #0]
 800103c:	1d38      	adds	r0, r7, #4
 800103e:	9102      	str	r1, [sp, #8]
 8001040:	e9cd 2300 	strd	r2, r3, [sp]
 8001044:	4623      	mov	r3, r4
 8001046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104a:	490c      	ldr	r1, [pc, #48]	; (800107c <main+0xbc>)
 800104c:	f003 f898 	bl	8004180 <siprintf>
 8001050:	4603      	mov	r3, r0
 8001052:	b2da      	uxtb	r2, r3
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f001 faff 	bl	800265c <USART2_PutBuffer>
	 	  								  DMA_USART2_BUFFER_SIZE,buffer_mem_occupied, total_load,intensity));
	 	  LL_mDelay(3000);
 800105e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001062:	f002 fbbb 	bl	80037dc <LL_mDelay>
  {
 8001066:	e7c6      	b.n	8000ff6 <main+0x36>
 8001068:	080010e5 	.word	0x080010e5
 800106c:	40020000 	.word	0x40020000
 8001070:	43800000 	.word	0x43800000
 8001074:	42c80000 	.word	0x42c80000
 8001078:	200001f6 	.word	0x200001f6
 800107c:	08006fa8 	.word	0x08006fa8

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff ff79 	bl	8000f7c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800108a:	bf00      	nop
 800108c:	f7ff ff8a 	bl	8000fa4 <LL_FLASH_GetLatency>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1fa      	bne.n	800108c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001096:	f7ff feab 	bl	8000df0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800109a:	bf00      	nop
 800109c:	f7ff feb8 	bl	8000e10 <LL_RCC_HSI_IsReady>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d1fa      	bne.n	800109c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80010a6:	2010      	movs	r0, #16
 80010a8:	f7ff fec4 	bl	8000e34 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fef9 	bl	8000ea4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff ff0a 	bl	8000ecc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff1b 	bl	8000ef4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fece 	bl	8000e60 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80010c4:	bf00      	nop
 80010c6:	f7ff fedf 	bl	8000e88 <LL_RCC_GetSysClkSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1fa      	bne.n	80010c6 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <SystemClock_Config+0x60>)
 80010d2:	f002 fb75 	bl	80037c0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <SystemClock_Config+0x60>)
 80010d8:	f002 fba6 	bl	8003828 <LL_SetSystemCoreClock>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	007a1200 	.word	0x007a1200

080010e4 <proccesDmaData>:

uint8_t pwm_intensity;

void proccesDmaData(const uint8_t* sign,uint8_t length)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
	uint8_t cutted_str[8];
	uint8_t pwm_found = 0,str_pos = 0,pwm_pos = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	77fb      	strb	r3, [r7, #31]
 80010f4:	2300      	movs	r3, #0
 80010f6:	77bb      	strb	r3, [r7, #30]
 80010f8:	2300      	movs	r3, #0
 80010fa:	777b      	strb	r3, [r7, #29]
	uint8_t pwm_intensity_str[2];



	for(int i = 0; i< length; i++){
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	e0c6      	b.n	8001290 <proccesDmaData+0x1ac>


		if(*(sign+i) == '$'){
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b24      	cmp	r3, #36	; 0x24
 800110c:	d102      	bne.n	8001114 <proccesDmaData+0x30>
			is_dollar = 1;
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <proccesDmaData+0x1c0>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
		}
		if(is_dollar){
 8001114:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <proccesDmaData+0x1c0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80aa 	beq.w	8001272 <proccesDmaData+0x18e>
			cutted_str[str_pos] = *(sign+i);
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	441a      	add	r2, r3
 8001124:	7fbb      	ldrb	r3, [r7, #30]
 8001126:	7812      	ldrb	r2, [r2, #0]
 8001128:	f107 0120 	add.w	r1, r7, #32
 800112c:	440b      	add	r3, r1
 800112e:	f803 2c10 	strb.w	r2, [r3, #-16]
			str_pos++;
 8001132:	7fbb      	ldrb	r3, [r7, #30]
 8001134:	3301      	adds	r3, #1
 8001136:	77bb      	strb	r3, [r7, #30]

			if(strstr(cutted_str,"$auto$")){
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	495a      	ldr	r1, [pc, #360]	; (80012a8 <proccesDmaData+0x1c4>)
 800113e:	4618      	mov	r0, r3
 8001140:	f003 f8af 	bl	80042a2 <strstr>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d014      	beq.n	8001174 <proccesDmaData+0x90>
				is_manual = 0;
 800114a:	4b58      	ldr	r3, [pc, #352]	; (80012ac <proccesDmaData+0x1c8>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
				memset(cutted_str,0,strlen(cutted_str));
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f83b 	bl	80001d0 <strlen>
 800115a:	4602      	mov	r2, r0
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fb9a 	bl	800389c <memset>
				str_pos = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	77bb      	strb	r3, [r7, #30]
				is_dollar = 0;
 800116c:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <proccesDmaData+0x1c0>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e020      	b.n	80011b6 <proccesDmaData+0xd2>
			}
			else if(strstr(cutted_str,"$manual$")){
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	494d      	ldr	r1, [pc, #308]	; (80012b0 <proccesDmaData+0x1cc>)
 800117a:	4618      	mov	r0, r3
 800117c:	f003 f891 	bl	80042a2 <strstr>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d017      	beq.n	80011b6 <proccesDmaData+0xd2>
				pwm_intensity = intensity;
 8001186:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <proccesDmaData+0x1d0>)
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <proccesDmaData+0x1d4>)
 800118c:	701a      	strb	r2, [r3, #0]
				is_manual = 1;
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <proccesDmaData+0x1c8>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
				memset(cutted_str,0,strlen(cutted_str));
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f819 	bl	80001d0 <strlen>
 800119e:	4602      	mov	r2, r0
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fb78 	bl	800389c <memset>
				str_pos = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	77bb      	strb	r3, [r7, #30]
				is_dollar = 0;
 80011b0:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <proccesDmaData+0x1c0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
			}

			if (pwm_found){
 80011b6:	7ffb      	ldrb	r3, [r7, #31]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d04a      	beq.n	8001252 <proccesDmaData+0x16e>
				if(pwm_pos == 2){
 80011bc:	7f7b      	ldrb	r3, [r7, #29]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d125      	bne.n	800120e <proccesDmaData+0x12a>
					if(cutted_str[str_pos-1] == '$'){
 80011c2:	7fbb      	ldrb	r3, [r7, #30]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	f107 0220 	add.w	r2, r7, #32
 80011ca:	4413      	add	r3, r2
 80011cc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011d0:	2b24      	cmp	r3, #36	; 0x24
 80011d2:	d106      	bne.n	80011e2 <proccesDmaData+0xfe>
						sscanf(pwm_intensity_str, "%d", &pwm_intensity);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4a37      	ldr	r2, [pc, #220]	; (80012b8 <proccesDmaData+0x1d4>)
 80011da:	4938      	ldr	r1, [pc, #224]	; (80012bc <proccesDmaData+0x1d8>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 ffef 	bl	80041c0 <siscanf>
					}
					memset(pwm_intensity_str,0,strlen(pwm_intensity_str));
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7fe fff2 	bl	80001d0 <strlen>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 fb51 	bl	800389c <memset>
					pwm_found = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	77fb      	strb	r3, [r7, #31]
					pwm_pos = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	777b      	strb	r3, [r7, #29]
					is_dollar = 0;
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <proccesDmaData+0x1c0>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
					str_pos = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	77bb      	strb	r3, [r7, #30]
 800120c:	e021      	b.n	8001252 <proccesDmaData+0x16e>
				}
				else if(cutted_str[str_pos-1]>= '0' && cutted_str[str_pos-1] <= '9'){
 800120e:	7fbb      	ldrb	r3, [r7, #30]
 8001210:	3b01      	subs	r3, #1
 8001212:	f107 0220 	add.w	r2, r7, #32
 8001216:	4413      	add	r3, r2
 8001218:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800121c:	2b2f      	cmp	r3, #47	; 0x2f
 800121e:	d918      	bls.n	8001252 <proccesDmaData+0x16e>
 8001220:	7fbb      	ldrb	r3, [r7, #30]
 8001222:	3b01      	subs	r3, #1
 8001224:	f107 0220 	add.w	r2, r7, #32
 8001228:	4413      	add	r3, r2
 800122a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800122e:	2b39      	cmp	r3, #57	; 0x39
 8001230:	d80f      	bhi.n	8001252 <proccesDmaData+0x16e>
					pwm_intensity_str[pwm_pos] = cutted_str[str_pos-1];
 8001232:	7fbb      	ldrb	r3, [r7, #30]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	7f7b      	ldrb	r3, [r7, #29]
 8001238:	f107 0120 	add.w	r1, r7, #32
 800123c:	440a      	add	r2, r1
 800123e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001242:	f107 0120 	add.w	r1, r7, #32
 8001246:	440b      	add	r3, r1
 8001248:	f803 2c14 	strb.w	r2, [r3, #-20]
					pwm_pos ++;
 800124c:	7f7b      	ldrb	r3, [r7, #29]
 800124e:	3301      	adds	r3, #1
 8001250:	777b      	strb	r3, [r7, #29]

				}
			}
			if(is_manual && (strstr(cutted_str,"$PWM"))){
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <proccesDmaData+0x1c8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d017      	beq.n	800128a <proccesDmaData+0x1a6>
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	4918      	ldr	r1, [pc, #96]	; (80012c0 <proccesDmaData+0x1dc>)
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f81e 	bl	80042a2 <strstr>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00e      	beq.n	800128a <proccesDmaData+0x1a6>
				pwm_found = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	77fb      	strb	r3, [r7, #31]
 8001270:	e00b      	b.n	800128a <proccesDmaData+0x1a6>
			}
		}

		else {
			memset(cutted_str,0,strlen(cutted_str));
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4618      	mov	r0, r3
 8001278:	f7fe ffaa 	bl	80001d0 <strlen>
 800127c:	4602      	mov	r2, r0
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fb09 	bl	800389c <memset>
	for(int i = 0; i< length; i++){
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	3301      	adds	r3, #1
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	429a      	cmp	r2, r3
 8001296:	f6ff af34 	blt.w	8001102 <proccesDmaData+0x1e>
		}

	}


	return;
 800129a:	bf00      	nop
}
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200001f5 	.word	0x200001f5
 80012a8:	0800700c 	.word	0x0800700c
 80012ac:	200001f4 	.word	0x200001f4
 80012b0:	08007014 	.word	0x08007014
 80012b4:	200001f6 	.word	0x200001f6
 80012b8:	2000020c 	.word	0x2000020c
 80012bc:	08007020 	.word	0x08007020
 80012c0:	08007024 	.word	0x08007024

080012c4 <setDutyCycle>:

void setDutyCycle(uint8_t D){
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	uint8_t pulse_length = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
	pulse_length = ((TIM2->ARR) * D) / 100;
 80012d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <setDutyCycle+0x38>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	095b      	lsrs	r3, r3, #5
 80012e6:	73fb      	strb	r3, [r7, #15]
	TIM2->CCR1 = pulse_length;
 80012e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	6353      	str	r3, [r2, #52]	; 0x34
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	51eb851f 	.word	0x51eb851f

08001300 <LL_DMA_DisableChannel>:
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LL_DMA_DisableChannel+0x3c>)
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	3a01      	subs	r2, #1
 800131e:	4907      	ldr	r1, [pc, #28]	; (800133c <LL_DMA_DisableChannel+0x3c>)
 8001320:	5c8a      	ldrb	r2, [r1, r2]
 8001322:	4611      	mov	r1, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	440a      	add	r2, r1
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	08007040 	.word	0x08007040

08001340 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013c6:	605a      	str	r2, [r3, #4]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013e2:	605a      	str	r2, [r3, #4]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013fe:	605a      	str	r2, [r3, #4]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f06f 0201 	mvn.w	r2, #1
 800141a:	611a      	str	r2, [r3, #16]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b10      	cmp	r3, #16
 8001460:	d101      	bne.n	8001466 <LL_USART_IsActiveFlag_IDLE+0x18>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001484:	2b40      	cmp	r3, #64	; 0x40
 8001486:	d101      	bne.n	800148c <LL_USART_IsActiveFlag_TC+0x18>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <LL_USART_IsActiveFlag_TC+0x1a>
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2210      	movs	r2, #16
 80014a6:	621a      	str	r2, [r3, #32]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <DMA1_Channel6_IRQHandler+0x38>)
 8001512:	f7ff ff15 	bl	8001340 <LL_DMA_IsActiveFlag_TC6>
 8001516:	4603      	mov	r3, r0
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <DMA1_Channel6_IRQHandler+0x1c>
		{
			USART2_CheckDmaReception();
 800151c:	f001 f8be 	bl	800269c <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_TC6(DMA1);
 8001520:	4808      	ldr	r0, [pc, #32]	; (8001544 <DMA1_Channel6_IRQHandler+0x38>)
 8001522:	f7ff ff49 	bl	80013b8 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001526:	e00a      	b.n	800153e <DMA1_Channel6_IRQHandler+0x32>
		else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <DMA1_Channel6_IRQHandler+0x38>)
 800152a:	f7ff ff31 	bl	8001390 <LL_DMA_IsActiveFlag_HT6>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d104      	bne.n	800153e <DMA1_Channel6_IRQHandler+0x32>
			USART2_CheckDmaReception();
 8001534:	f001 f8b2 	bl	800269c <USART2_CheckDmaReception>
			LL_DMA_ClearFlag_HT6(DMA1);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA1_Channel6_IRQHandler+0x38>)
 800153a:	f7ff ff59 	bl	80013f0 <LL_DMA_ClearFlag_HT6>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40020000 	.word	0x40020000

08001548 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <DMA1_Channel7_IRQHandler+0x30>)
 800154e:	f7ff ff0b 	bl	8001368 <LL_DMA_IsActiveFlag_TC7>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10d      	bne.n	8001574 <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <DMA1_Channel7_IRQHandler+0x30>)
 800155a:	f7ff ff3b 	bl	80013d4 <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800155e:	bf00      	nop
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <DMA1_Channel7_IRQHandler+0x34>)
 8001562:	f7ff ff87 	bl	8001474 <LL_USART_IsActiveFlag_TC>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f9      	beq.n	8001560 <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 800156c:	2107      	movs	r1, #7
 800156e:	4802      	ldr	r0, [pc, #8]	; (8001578 <DMA1_Channel7_IRQHandler+0x30>)
 8001570:	f7ff fec6 	bl	8001300 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40020000 	.word	0x40020000
 800157c:	40004400 	.word	0x40004400

08001580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8001584:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001588:	f7ff ff4e 	bl	8001428 <LL_TIM_IsActiveFlag_UPDATE>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d04a      	beq.n	8001628 <TIM2_IRQHandler+0xa8>
		if (!is_manual) {
 8001592:	4b28      	ldr	r3, [pc, #160]	; (8001634 <TIM2_IRQHandler+0xb4>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d124      	bne.n	80015e4 <TIM2_IRQHandler+0x64>
			if (brighter) {
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <TIM2_IRQHandler+0xb8>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d010      	beq.n	80015c4 <TIM2_IRQHandler+0x44>
				setDutyCycle(intensity++);
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <TIM2_IRQHandler+0xbc>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	b2d1      	uxtb	r1, r2
 80015aa:	4a24      	ldr	r2, [pc, #144]	; (800163c <TIM2_IRQHandler+0xbc>)
 80015ac:	7011      	strb	r1, [r2, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe88 	bl	80012c4 <setDutyCycle>
				if (intensity >= 99) brighter = 0;
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <TIM2_IRQHandler+0xbc>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b62      	cmp	r3, #98	; 0x62
 80015ba:	d913      	bls.n	80015e4 <TIM2_IRQHandler+0x64>
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <TIM2_IRQHandler+0xb8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e00f      	b.n	80015e4 <TIM2_IRQHandler+0x64>
			}
			else {
				setDutyCycle(intensity--);
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <TIM2_IRQHandler+0xbc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	b2d1      	uxtb	r1, r2
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <TIM2_IRQHandler+0xbc>)
 80015ce:	7011      	strb	r1, [r2, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fe77 	bl	80012c4 <setDutyCycle>
				if (intensity <= 0) brighter = 1;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <TIM2_IRQHandler+0xbc>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <TIM2_IRQHandler+0x64>
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <TIM2_IRQHandler+0xb8>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
			}
		}
		if (is_manual)
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <TIM2_IRQHandler+0xb4>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01d      	beq.n	8001628 <TIM2_IRQHandler+0xa8>
		{
			if (intensity <  pwm_intensity)
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <TIM2_IRQHandler+0xbc>)
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <TIM2_IRQHandler+0xc0>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d208      	bcs.n	800160a <TIM2_IRQHandler+0x8a>
			{
				setDutyCycle(intensity++);
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <TIM2_IRQHandler+0xbc>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	b2d1      	uxtb	r1, r2
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <TIM2_IRQHandler+0xbc>)
 8001602:	7011      	strb	r1, [r2, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fe5d 	bl	80012c4 <setDutyCycle>
			}
			if (intensity >  pwm_intensity)
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <TIM2_IRQHandler+0xbc>)
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <TIM2_IRQHandler+0xc0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d908      	bls.n	8001628 <TIM2_IRQHandler+0xa8>
			{
				setDutyCycle(intensity--);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <TIM2_IRQHandler+0xbc>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	1e5a      	subs	r2, r3, #1
 800161c:	b2d1      	uxtb	r1, r2
 800161e:	4a07      	ldr	r2, [pc, #28]	; (800163c <TIM2_IRQHandler+0xbc>)
 8001620:	7011      	strb	r1, [r2, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fe4e 	bl	80012c4 <setDutyCycle>
			}
		}
	}
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8001628:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800162c:	f7ff feee 	bl	800140c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200001f4 	.word	0x200001f4
 8001638:	20000000 	.word	0x20000000
 800163c:	200001f6 	.word	0x200001f6
 8001640:	2000020c 	.word	0x2000020c

08001644 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <USART2_IRQHandler+0x20>)
 800164a:	f7ff ff00 	bl	800144e <LL_USART_IsActiveFlag_IDLE>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001654:	f001 f822 	bl	800269c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <USART2_IRQHandler+0x20>)
 800165a:	f7ff ff1e 	bl	800149a <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40004400 	.word	0x40004400

08001668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_kill>:

int _kill(int pid, int sig)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001682:	f002 f8e1 	bl	8003848 <__errno>
 8001686:	4603      	mov	r3, r0
 8001688:	2216      	movs	r2, #22
 800168a:	601a      	str	r2, [r3, #0]
	return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_exit>:

void _exit (int status)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffe7 	bl	8001678 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016aa:	e7fe      	b.n	80016aa <_exit+0x12>

080016ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e00a      	b.n	80016d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016be:	f3af 8000 	nop.w
 80016c2:	4601      	mov	r1, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	b2ca      	uxtb	r2, r1
 80016cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf0      	blt.n	80016be <_read+0x12>
	}

return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e009      	b.n	800170c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf1      	blt.n	80016f8 <_write+0x12>
	}
	return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f002 f846 	bl	8003848 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20003000 	.word	0x20003000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	200001f8 	.word	0x200001f8
 80017f0:	20000320 	.word	0x20000320

080017f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_EnableIRQ>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4907      	ldr	r1, [pc, #28]	; (800186c <__NVIC_EnableIRQ+0x38>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <LL_AHB1_GRP1_EnableClock>:
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000

0800195c <LL_APB1_GRP1_EnableClock>:
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001966:	69da      	ldr	r2, [r3, #28]
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <LL_APB1_GRP1_EnableClock+0x2c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001972:	69da      	ldr	r2, [r3, #28]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40021000 	.word	0x40021000

0800198c <LL_TIM_EnableCounter>:
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_TIM_DisableARRPreload>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_TIM_CC_EnableChannel>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	621a      	str	r2, [r3, #32]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <LL_TIM_OC_DisableFast>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d028      	beq.n	8001a52 <LL_TIM_OC_DisableFast+0x62>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d023      	beq.n	8001a4e <LL_TIM_OC_DisableFast+0x5e>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d01e      	beq.n	8001a4a <LL_TIM_OC_DisableFast+0x5a>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	d019      	beq.n	8001a46 <LL_TIM_OC_DisableFast+0x56>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a18:	d013      	beq.n	8001a42 <LL_TIM_OC_DisableFast+0x52>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d00d      	beq.n	8001a3e <LL_TIM_OC_DisableFast+0x4e>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a28:	d007      	beq.n	8001a3a <LL_TIM_OC_DisableFast+0x4a>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a30:	d101      	bne.n	8001a36 <LL_TIM_OC_DisableFast+0x46>
 8001a32:	2307      	movs	r3, #7
 8001a34:	e00e      	b.n	8001a54 <LL_TIM_OC_DisableFast+0x64>
 8001a36:	2308      	movs	r3, #8
 8001a38:	e00c      	b.n	8001a54 <LL_TIM_OC_DisableFast+0x64>
 8001a3a:	2306      	movs	r3, #6
 8001a3c:	e00a      	b.n	8001a54 <LL_TIM_OC_DisableFast+0x64>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e008      	b.n	8001a54 <LL_TIM_OC_DisableFast+0x64>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e006      	b.n	8001a54 <LL_TIM_OC_DisableFast+0x64>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <LL_TIM_OC_DisableFast+0x64>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <LL_TIM_OC_DisableFast+0x64>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_TIM_OC_DisableFast+0x64>
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3318      	adds	r3, #24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <LL_TIM_OC_DisableFast+0x9c>)
 8001a60:	5cd3      	ldrb	r3, [r2, r3]
 8001a62:	440b      	add	r3, r1
 8001a64:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <LL_TIM_OC_DisableFast+0xa0>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	4619      	mov	r1, r3
 8001a72:	2304      	movs	r3, #4
 8001a74:	408b      	lsls	r3, r1
 8001a76:	43db      	mvns	r3, r3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	08007060 	.word	0x08007060
 8001a90:	0800706c 	.word	0x0800706c

08001a94 <LL_TIM_OC_EnablePreload>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d028      	beq.n	8001af6 <LL_TIM_OC_EnablePreload+0x62>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d023      	beq.n	8001af2 <LL_TIM_OC_EnablePreload+0x5e>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d01e      	beq.n	8001aee <LL_TIM_OC_EnablePreload+0x5a>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b40      	cmp	r3, #64	; 0x40
 8001ab4:	d019      	beq.n	8001aea <LL_TIM_OC_EnablePreload+0x56>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001abc:	d013      	beq.n	8001ae6 <LL_TIM_OC_EnablePreload+0x52>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac4:	d00d      	beq.n	8001ae2 <LL_TIM_OC_EnablePreload+0x4e>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001acc:	d007      	beq.n	8001ade <LL_TIM_OC_EnablePreload+0x4a>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad4:	d101      	bne.n	8001ada <LL_TIM_OC_EnablePreload+0x46>
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	e00e      	b.n	8001af8 <LL_TIM_OC_EnablePreload+0x64>
 8001ada:	2308      	movs	r3, #8
 8001adc:	e00c      	b.n	8001af8 <LL_TIM_OC_EnablePreload+0x64>
 8001ade:	2306      	movs	r3, #6
 8001ae0:	e00a      	b.n	8001af8 <LL_TIM_OC_EnablePreload+0x64>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <LL_TIM_OC_EnablePreload+0x64>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <LL_TIM_OC_EnablePreload+0x64>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <LL_TIM_OC_EnablePreload+0x64>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <LL_TIM_OC_EnablePreload+0x64>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <LL_TIM_OC_EnablePreload+0x64>
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3318      	adds	r3, #24
 8001afe:	4619      	mov	r1, r3
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <LL_TIM_OC_EnablePreload+0x98>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	440b      	add	r3, r1
 8001b08:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <LL_TIM_OC_EnablePreload+0x9c>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	4619      	mov	r1, r3
 8001b16:	2308      	movs	r3, #8
 8001b18:	408b      	lsls	r3, r1
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	601a      	str	r2, [r3, #0]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	08007060 	.word	0x08007060
 8001b30:	0800706c 	.word	0x0800706c

08001b34 <LL_TIM_SetClockSource>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001b46:	f023 0307 	bic.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_TIM_SetTriggerOutput>:
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	605a      	str	r2, [r3, #4]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_TIM_DisableMasterSlaveMode>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	609a      	str	r2, [r3, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b094      	sub	sp, #80	; 0x50
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001bca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	2220      	movs	r2, #32
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fe5a 	bl	800389c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff feaf 	bl	800195c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bfe:	f7ff fe0b 	bl	8001818 <__NVIC_GetPriorityGrouping>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fe5b 	bl	80018c4 <NVIC_EncodePriority>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4619      	mov	r1, r3
 8001c12:	201c      	movs	r0, #28
 8001c14:	f7ff fe2c 	bl	8001870 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001c18:	201c      	movs	r0, #28
 8001c1a:	f7ff fe0b 	bl	8001834 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8001c1e:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001c22:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c24:	2300      	movs	r3, #0
 8001c26:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 9;
 8001c28:	2309      	movs	r3, #9
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001c30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c34:	4619      	mov	r1, r3
 8001c36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c3a:	f001 f961 	bl	8002f00 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001c3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c42:	f7ff feb3 	bl	80019ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c46:	2100      	movs	r1, #0
 8001c48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c4c:	f7ff ff72 	bl	8001b34 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001c50:	2101      	movs	r1, #1
 8001c52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c56:	f7ff ff1d 	bl	8001a94 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	461a      	mov	r2, r3
 8001c74:	2101      	movs	r1, #1
 8001c76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c7a:	f001 f9b3 	bl	8002fe4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001c7e:	2101      	movs	r1, #1
 8001c80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c84:	f7ff feb4 	bl	80019f0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c8e:	f7ff ff66 	bl	8001b5e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001c92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c96:	f7ff ff75 	bl	8001b84 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c9e:	f7ff fe45 	bl	800192c <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc2:	f000 fe75 	bl	80029b0 <LL_GPIO_Init>

  LL_TIM_EnableIT_UPDATE(TIM2);
 8001cc6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cca:	f7ff ff6b 	bl	8001ba4 <LL_TIM_EnableIT_UPDATE>
   LL_TIM_EnableCounter(TIM2);
 8001cce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cd2:	f7ff fe5b 	bl	800198c <LL_TIM_EnableCounter>
   LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cdc:	f7ff fe76 	bl	80019cc <LL_TIM_CC_EnableChannel>
}
 8001ce0:	bf00      	nop
 8001ce2:	3750      	adds	r7, #80	; 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <__NVIC_GetPriorityGrouping>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <LL_DMA_EnableChannel>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <LL_DMA_EnableChannel+0x3c>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	4907      	ldr	r1, [pc, #28]	; (8001e38 <LL_DMA_EnableChannel+0x3c>)
 8001e1c:	5c8a      	ldrb	r2, [r1, r2]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	440a      	add	r2, r1
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6013      	str	r3, [r2, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	08007078 	.word	0x08007078

08001e3c <LL_DMA_SetDataTransferDirection>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <LL_DMA_SetDataTransferDirection+0x48>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	461a      	mov	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5c:	f023 0310 	bic.w	r3, r3, #16
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	3a01      	subs	r2, #1
 8001e64:	4907      	ldr	r1, [pc, #28]	; (8001e84 <LL_DMA_SetDataTransferDirection+0x48>)
 8001e66:	5c8a      	ldrb	r2, [r1, r2]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	440a      	add	r2, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	08007078 	.word	0x08007078

08001e88 <LL_DMA_GetDataTransferDirection>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	f244 0310 	movw	r3, #16400	; 0x4010
 8001ea6:	4013      	ands	r3, r2
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	08007078 	.word	0x08007078

08001eb8 <LL_DMA_SetMode>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <LL_DMA_SetMode+0x44>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 0220 	bic.w	r2, r3, #32
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <LL_DMA_SetMode+0x44>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	440b      	add	r3, r1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	08007078 	.word	0x08007078

08001f00 <LL_DMA_SetPeriphIncMode>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <LL_DMA_SetPeriphIncMode+0x44>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	461a      	mov	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <LL_DMA_SetPeriphIncMode+0x44>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	4619      	mov	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	08007078 	.word	0x08007078

08001f48 <LL_DMA_SetMemoryIncMode>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <LL_DMA_SetMemoryIncMode+0x44>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	4907      	ldr	r1, [pc, #28]	; (8001f8c <LL_DMA_SetMemoryIncMode+0x44>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	4619      	mov	r1, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	440b      	add	r3, r1
 8001f76:	4619      	mov	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	08007078 	.word	0x08007078

08001f90 <LL_DMA_SetPeriphSize>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <LL_DMA_SetPeriphSize+0x44>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <LL_DMA_SetPeriphSize+0x44>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	440b      	add	r3, r1
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	08007078 	.word	0x08007078

08001fd8 <LL_DMA_SetMemorySize>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <LL_DMA_SetMemorySize+0x44>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	4907      	ldr	r1, [pc, #28]	; (800201c <LL_DMA_SetMemorySize+0x44>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	4619      	mov	r1, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	440b      	add	r3, r1
 8002006:	4619      	mov	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	08007078 	.word	0x08007078

08002020 <LL_DMA_SetChannelPriorityLevel>:
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	3b01      	subs	r3, #1
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	461a      	mov	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	3b01      	subs	r3, #1
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	4619      	mov	r1, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	440b      	add	r3, r1
 800204e:	4619      	mov	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	08007078 	.word	0x08007078

08002068 <LL_DMA_SetDataLength>:
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3b01      	subs	r3, #1
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <LL_DMA_SetDataLength+0x44>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	461a      	mov	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4413      	add	r3, r2
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	3a01      	subs	r2, #1
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <LL_DMA_SetDataLength+0x44>)
 800208e:	5c8a      	ldrb	r2, [r1, r2]
 8002090:	4611      	mov	r1, r2
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	440a      	add	r2, r1
 8002096:	4611      	mov	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	08007078 	.word	0x08007078

080020b0 <LL_DMA_GetDataLength>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	3b01      	subs	r3, #1
 80020be:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <LL_DMA_GetDataLength+0x28>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	461a      	mov	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	b29b      	uxth	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	08007078 	.word	0x08007078

080020dc <LL_DMA_ConfigAddresses>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d114      	bne.n	800211a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <LL_DMA_ConfigAddresses+0x74>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	461a      	mov	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	3b01      	subs	r3, #1
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <LL_DMA_ConfigAddresses+0x74>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	461a      	mov	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	461a      	mov	r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6093      	str	r3, [r2, #8]
}
 8002118:	e013      	b.n	8002142 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <LL_DMA_ConfigAddresses+0x74>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	461a      	mov	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	3b01      	subs	r3, #1
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <LL_DMA_ConfigAddresses+0x74>)
 8002134:	5cd3      	ldrb	r3, [r2, r3]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	461a      	mov	r2, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	60d3      	str	r3, [r2, #12]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	08007078 	.word	0x08007078

08002154 <LL_DMA_SetMemoryAddress>:
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	3b01      	subs	r3, #1
 8002164:	4a06      	ldr	r2, [pc, #24]	; (8002180 <LL_DMA_SetMemoryAddress+0x2c>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	461a      	mov	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	08007078 	.word	0x08007078

08002184 <LL_DMA_SetPeriphAddress>:
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3b01      	subs	r3, #1
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <LL_DMA_SetPeriphAddress+0x2c>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	461a      	mov	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4413      	add	r3, r2
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6093      	str	r3, [r2, #8]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	08007078 	.word	0x08007078

080021b4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <LL_DMA_EnableIT_TC+0x3c>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	461a      	mov	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	3a01      	subs	r2, #1
 80021d2:	4907      	ldr	r1, [pc, #28]	; (80021f0 <LL_DMA_EnableIT_TC+0x3c>)
 80021d4:	5c8a      	ldrb	r2, [r1, r2]
 80021d6:	4611      	mov	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	440a      	add	r2, r1
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	6013      	str	r3, [r2, #0]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	08007078 	.word	0x08007078

080021f4 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	3b01      	subs	r3, #1
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <LL_DMA_EnableIT_HT+0x3c>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	3a01      	subs	r2, #1
 8002212:	4907      	ldr	r1, [pc, #28]	; (8002230 <LL_DMA_EnableIT_HT+0x3c>)
 8002214:	5c8a      	ldrb	r2, [r1, r2]
 8002216:	4611      	mov	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	440a      	add	r2, r1
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6013      	str	r3, [r2, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	08007078 	.word	0x08007078

08002234 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LL_DMA_EnableIT_TE+0x3c>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	461a      	mov	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	3a01      	subs	r2, #1
 8002252:	4907      	ldr	r1, [pc, #28]	; (8002270 <LL_DMA_EnableIT_TE+0x3c>)
 8002254:	5c8a      	ldrb	r2, [r1, r2]
 8002256:	4611      	mov	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	440a      	add	r2, r1
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6013      	str	r3, [r2, #0]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	08007078 	.word	0x08007078

08002274 <LL_AHB1_GRP1_EnableClock>:
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	4907      	ldr	r1, [pc, #28]	; (80022a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4313      	orrs	r3, r2
 8002286:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4013      	ands	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000

080022a4 <LL_APB1_GRP1_EnableClock>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	4907      	ldr	r1, [pc, #28]	; (80022d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000

080022d4 <LL_USART_Enable>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	601a      	str	r2, [r3, #0]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_USART_ConfigAsyncMode>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	e853 3f00 	ldrex	r3, [r3]
 8002332:	60bb      	str	r3, [r7, #8]
   return(result);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	61ba      	str	r2, [r7, #24]
 8002342:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002344:	6979      	ldr	r1, [r7, #20]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	e841 2300 	strex	r3, r2, [r1]
 800234c:	613b      	str	r3, [r7, #16]
   return(result);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e9      	bne.n	8002328 <LL_USART_EnableIT_IDLE+0x8>
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002362:	b480      	push	{r7}
 8002364:	b089      	sub	sp, #36	; 0x24
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3308      	adds	r3, #8
 800236e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	e853 3f00 	ldrex	r3, [r3]
 8002376:	60bb      	str	r3, [r7, #8]
   return(result);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3308      	adds	r3, #8
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	61ba      	str	r2, [r7, #24]
 8002388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238a:	6979      	ldr	r1, [r7, #20]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	e841 2300 	strex	r3, r2, [r1]
 8002392:	613b      	str	r3, [r7, #16]
   return(result);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e7      	bne.n	800236a <LL_USART_DisableIT_CTS+0x8>
}
 800239a:	bf00      	nop
 800239c:	bf00      	nop
 800239e:	3724      	adds	r7, #36	; 0x24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3308      	adds	r3, #8
 80023b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	e853 3f00 	ldrex	r3, [r3]
 80023bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3308      	adds	r3, #8
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	61ba      	str	r2, [r7, #24]
 80023ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d0:	6979      	ldr	r1, [r7, #20]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	e841 2300 	strex	r3, r2, [r1]
 80023d8:	613b      	str	r3, [r7, #16]
   return(result);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e7      	bne.n	80023b0 <LL_USART_EnableDMAReq_RX+0x8>
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b089      	sub	sp, #36	; 0x24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3308      	adds	r3, #8
 80023fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	e853 3f00 	ldrex	r3, [r3]
 8002402:	60bb      	str	r3, [r7, #8]
   return(result);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3308      	adds	r3, #8
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	61ba      	str	r2, [r7, #24]
 8002414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002416:	6979      	ldr	r1, [r7, #20]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	e841 2300 	strex	r3, r2, [r1]
 800241e:	613b      	str	r3, [r7, #16]
   return(result);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1e7      	bne.n	80023f6 <LL_USART_EnableDMAReq_TX+0x8>
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3724      	adds	r7, #36	; 0x24
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3328      	adds	r3, #40	; 0x28
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e002      	b.n	8002452 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3324      	adds	r3, #36	; 0x24
 8002450:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t *data, uint8_t length) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <USART2_RegisterCallback+0x20>)
 8002472:	6013      	str	r3, [r2, #0]
	}
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	200001fc 	.word	0x200001fc

08002484 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b090      	sub	sp, #64	; 0x40
 8002488:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800248a:	f107 031c 	add.w	r3, r7, #28
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	615a      	str	r2, [r3, #20]
 800249c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
 80024ac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80024ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024b2:	f7ff fef7 	bl	80022a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80024b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024ba:	f7ff fedb 	bl	8002274 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80024be:	f248 0304 	movw	r3, #32772	; 0x8004
 80024c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024c4:	2302      	movs	r3, #2
 80024c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80024d4:	2307      	movs	r3, #7
 80024d6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e0:	f000 fa66 	bl	80029b0 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2106      	movs	r1, #6
 80024e8:	4859      	ldr	r0, [pc, #356]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 80024ea:	f7ff fca7 	bl	8001e3c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80024ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024f2:	2106      	movs	r1, #6
 80024f4:	4856      	ldr	r0, [pc, #344]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 80024f6:	f7ff fd93 	bl	8002020 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80024fa:	2220      	movs	r2, #32
 80024fc:	2106      	movs	r1, #6
 80024fe:	4854      	ldr	r0, [pc, #336]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 8002500:	f7ff fcda 	bl	8001eb8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002504:	2200      	movs	r2, #0
 8002506:	2106      	movs	r1, #6
 8002508:	4851      	ldr	r0, [pc, #324]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 800250a:	f7ff fcf9 	bl	8001f00 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	2106      	movs	r1, #6
 8002512:	484f      	ldr	r0, [pc, #316]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 8002514:	f7ff fd18 	bl	8001f48 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002518:	2200      	movs	r2, #0
 800251a:	2106      	movs	r1, #6
 800251c:	484c      	ldr	r0, [pc, #304]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 800251e:	f7ff fd37 	bl	8001f90 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002522:	2200      	movs	r2, #0
 8002524:	2106      	movs	r1, #6
 8002526:	484a      	ldr	r0, [pc, #296]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 8002528:	f7ff fd56 	bl	8001fd8 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 800252c:	2101      	movs	r1, #1
 800252e:	4849      	ldr	r0, [pc, #292]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 8002530:	f7ff ff80 	bl	8002434 <LL_USART_DMA_GetRegAddr>
 8002534:	4604      	mov	r4, r0
 8002536:	4d48      	ldr	r5, [pc, #288]	; (8002658 <MX_USART2_UART_Init+0x1d4>)
 8002538:	2106      	movs	r1, #6
 800253a:	4845      	ldr	r0, [pc, #276]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 800253c:	f7ff fca4 	bl	8001e88 <LL_DMA_GetDataTransferDirection>
 8002540:	4603      	mov	r3, r0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	462b      	mov	r3, r5
 8002546:	4622      	mov	r2, r4
 8002548:	2106      	movs	r1, #6
 800254a:	4841      	ldr	r0, [pc, #260]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 800254c:	f7ff fdc6 	bl	80020dc <LL_DMA_ConfigAddresses>
  		  LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  		  (uint32_t)bufferUSART2dma,
  		  LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002554:	2106      	movs	r1, #6
 8002556:	483e      	ldr	r0, [pc, #248]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 8002558:	f7ff fd86 	bl	8002068 <LL_DMA_SetDataLength>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800255c:	2106      	movs	r1, #6
 800255e:	483c      	ldr	r0, [pc, #240]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 8002560:	f7ff fc4c 	bl	8001dfc <LL_DMA_EnableChannel>
    LL_USART_EnableDMAReq_RX(USART2);
 8002564:	483b      	ldr	r0, [pc, #236]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 8002566:	f7ff ff1f 	bl	80023a8 <LL_USART_EnableDMAReq_RX>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800256a:	2106      	movs	r1, #6
 800256c:	4838      	ldr	r0, [pc, #224]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 800256e:	f7ff fe21 	bl	80021b4 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002572:	2106      	movs	r1, #6
 8002574:	4836      	ldr	r0, [pc, #216]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 8002576:	f7ff fe3d 	bl	80021f4 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800257a:	2210      	movs	r2, #16
 800257c:	2107      	movs	r1, #7
 800257e:	4834      	ldr	r0, [pc, #208]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 8002580:	f7ff fc5c 	bl	8001e3c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002588:	2107      	movs	r1, #7
 800258a:	4831      	ldr	r0, [pc, #196]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 800258c:	f7ff fd48 	bl	8002020 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002590:	2200      	movs	r2, #0
 8002592:	2107      	movs	r1, #7
 8002594:	482e      	ldr	r0, [pc, #184]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 8002596:	f7ff fc8f 	bl	8001eb8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800259a:	2200      	movs	r2, #0
 800259c:	2107      	movs	r1, #7
 800259e:	482c      	ldr	r0, [pc, #176]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 80025a0:	f7ff fcae 	bl	8001f00 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	2107      	movs	r1, #7
 80025a8:	4829      	ldr	r0, [pc, #164]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 80025aa:	f7ff fccd 	bl	8001f48 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2107      	movs	r1, #7
 80025b2:	4827      	ldr	r0, [pc, #156]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 80025b4:	f7ff fcec 	bl	8001f90 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2107      	movs	r1, #7
 80025bc:	4824      	ldr	r0, [pc, #144]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 80025be:	f7ff fd0b 	bl	8001fd8 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80025c2:	2100      	movs	r1, #0
 80025c4:	4823      	ldr	r0, [pc, #140]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 80025c6:	f7ff ff35 	bl	8002434 <LL_USART_DMA_GetRegAddr>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	2107      	movs	r1, #7
 80025d0:	481f      	ldr	r0, [pc, #124]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 80025d2:	f7ff fdd7 	bl	8002184 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 80025d6:	481f      	ldr	r0, [pc, #124]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 80025d8:	f7ff ff09 	bl	80023ee <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80025dc:	2107      	movs	r1, #7
 80025de:	481c      	ldr	r0, [pc, #112]	; (8002650 <MX_USART2_UART_Init+0x1cc>)
 80025e0:	f7ff fe28 	bl	8002234 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80025e4:	f7ff fb80 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fbd0 	bl	8001d94 <NVIC_EncodePriority>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4619      	mov	r1, r3
 80025f8:	2026      	movs	r0, #38	; 0x26
 80025fa:	f7ff fba1 	bl	8001d40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80025fe:	2026      	movs	r0, #38	; 0x26
 8002600:	f7ff fb80 	bl	8001d04 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002604:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002608:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002612:	2300      	movs	r3, #0
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002616:	230c      	movs	r3, #12
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800261a:	2300      	movs	r3, #0
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800261e:	2300      	movs	r3, #0
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	4619      	mov	r1, r3
 8002628:	480a      	ldr	r0, [pc, #40]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 800262a:	f001 f843 	bl	80036b4 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 800262e:	4809      	ldr	r0, [pc, #36]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 8002630:	f7ff fe97 	bl	8002362 <LL_USART_DisableIT_CTS>
  /* Enable USART2 peripheral and interrupts*/

    	  //type your code here:
    LL_USART_EnableIT_IDLE(USART2);
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 8002636:	f7ff fe73 	bl	8002320 <LL_USART_EnableIT_IDLE>
    LL_USART_ConfigAsyncMode(USART2);
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 800263c:	f7ff fe5a 	bl	80022f4 <LL_USART_ConfigAsyncMode>
    LL_USART_Enable(USART2);
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <MX_USART2_UART_Init+0x1d0>)
 8002642:	f7ff fe47 	bl	80022d4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	3738      	adds	r7, #56	; 0x38
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	bf00      	nop
 8002650:	40020000 	.word	0x40020000
 8002654:	40004400 	.word	0x40004400
 8002658:	20000210 	.word	0x20000210

0800265c <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	461a      	mov	r2, r3
 800266c:	2107      	movs	r1, #7
 800266e:	480a      	ldr	r0, [pc, #40]	; (8002698 <USART2_PutBuffer+0x3c>)
 8002670:	f7ff fd70 	bl	8002154 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	461a      	mov	r2, r3
 8002678:	2107      	movs	r1, #7
 800267a:	4807      	ldr	r0, [pc, #28]	; (8002698 <USART2_PutBuffer+0x3c>)
 800267c:	f7ff fcf4 	bl	8002068 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002680:	2107      	movs	r1, #7
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <USART2_PutBuffer+0x3c>)
 8002684:	f7ff fd96 	bl	80021b4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002688:	2107      	movs	r1, #7
 800268a:	4803      	ldr	r0, [pc, #12]	; (8002698 <USART2_PutBuffer+0x3c>)
 800268c:	f7ff fbb6 	bl	8001dfc <LL_DMA_EnableChannel>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40020000 	.word	0x40020000

0800269c <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <USART2_CheckDmaReception+0xa8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d047      	beq.n	800273a <USART2_CheckDmaReception+0x9e>

		static uint16_t old_pos = 0;

		uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80026aa:	2106      	movs	r1, #6
 80026ac:	4826      	ldr	r0, [pc, #152]	; (8002748 <USART2_CheckDmaReception+0xac>)
 80026ae:	f7ff fcff 	bl	80020b0 <LL_DMA_GetDataLength>
 80026b2:	4603      	mov	r3, r0
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80026ba:	80fb      	strh	r3, [r7, #6]

		if (pos != old_pos)
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <USART2_CheckDmaReception+0xb0>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	88fa      	ldrh	r2, [r7, #6]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d02d      	beq.n	8002722 <USART2_CheckDmaReception+0x86>
		{
			if (pos > old_pos)
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <USART2_CheckDmaReception+0xb0>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d910      	bls.n	80026f2 <USART2_CheckDmaReception+0x56>
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <USART2_CheckDmaReception+0xa8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <USART2_CheckDmaReception+0xb0>)
 80026d6:	8812      	ldrh	r2, [r2, #0]
 80026d8:	4611      	mov	r1, r2
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <USART2_CheckDmaReception+0xb4>)
 80026dc:	1888      	adds	r0, r1, r2
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	b2d1      	uxtb	r1, r2
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <USART2_CheckDmaReception+0xb0>)
 80026e4:	8812      	ldrh	r2, [r2, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	1a8a      	subs	r2, r1, r2
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	4798      	blx	r3
 80026f0:	e017      	b.n	8002722 <USART2_CheckDmaReception+0x86>
			}
			else
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <USART2_CheckDmaReception+0xa8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <USART2_CheckDmaReception+0xb0>)
 80026f8:	8812      	ldrh	r2, [r2, #0]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4a14      	ldr	r2, [pc, #80]	; (8002750 <USART2_CheckDmaReception+0xb4>)
 80026fe:	440a      	add	r2, r1
 8002700:	4912      	ldr	r1, [pc, #72]	; (800274c <USART2_CheckDmaReception+0xb0>)
 8002702:	8809      	ldrh	r1, [r1, #0]
 8002704:	b2c9      	uxtb	r1, r1
 8002706:	4249      	negs	r1, r1
 8002708:	b2c9      	uxtb	r1, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4798      	blx	r3

				if (pos > 0)
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <USART2_CheckDmaReception+0x86>
				{
					USART2_ProcessData(&bufferUSART2dma[0], pos);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <USART2_CheckDmaReception+0xa8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	88fa      	ldrh	r2, [r7, #6]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <USART2_CheckDmaReception+0xb4>)
 8002720:	4798      	blx	r3
				}
			}
		}

		old_pos = pos;
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <USART2_CheckDmaReception+0xb0>)
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	8013      	strh	r3, [r2, #0]

		if (old_pos == DMA_USART2_BUFFER_SIZE)
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <USART2_CheckDmaReception+0xb0>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002730:	d104      	bne.n	800273c <USART2_CheckDmaReception+0xa0>
		{
			old_pos = 0;
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <USART2_CheckDmaReception+0xb0>)
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	e000      	b.n	800273c <USART2_CheckDmaReception+0xa0>
	if(USART2_ProcessData == 0) return;
 800273a:	bf00      	nop
		}
}
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200001fc 	.word	0x200001fc
 8002748:	40020000 	.word	0x40020000
 800274c:	20000200 	.word	0x20000200
 8002750:	20000210 	.word	0x20000210

08002754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <LoopForever+0x6>)
  ldr r1, =_edata
 800275a:	490e      	ldr	r1, [pc, #56]	; (8002794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <LoopForever+0xe>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002770:	4c0b      	ldr	r4, [pc, #44]	; (80027a0 <LoopForever+0x16>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800277e:	f7ff f839 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f001 f867 	bl	8003854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002786:	f7fe fc1b 	bl	8000fc0 <main>

0800278a <LoopForever>:

LoopForever:
    b LoopForever
 800278a:	e7fe      	b.n	800278a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800278c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002798:	0800748c 	.word	0x0800748c
  ldr r2, =_sbss
 800279c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80027a0:	20000320 	.word	0x20000320

080027a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC1_2_IRQHandler>

080027a6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b089      	sub	sp, #36	; 0x24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	613b      	str	r3, [r7, #16]
  return result;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2103      	movs	r1, #3
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	401a      	ands	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	61bb      	str	r3, [r7, #24]
  return result;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3724      	adds	r7, #36	; 0x24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	43db      	mvns	r3, r3
 8002818:	401a      	ands	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	613b      	str	r3, [r7, #16]
  return result;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2103      	movs	r1, #3
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	61bb      	str	r3, [r7, #24]
  return result;
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002886:	bf00      	nop
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002892:	b480      	push	{r7}
 8002894:	b089      	sub	sp, #36	; 0x24
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	613b      	str	r3, [r7, #16]
  return result;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2103      	movs	r1, #3
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	401a      	ands	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	61bb      	str	r3, [r7, #24]
  return result;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	60da      	str	r2, [r3, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3724      	adds	r7, #36	; 0x24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	613b      	str	r3, [r7, #16]
  return result;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	210f      	movs	r1, #15
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	61bb      	str	r3, [r7, #24]
  return result;
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	431a      	orrs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800294e:	b480      	push	{r7}
 8002950:	b089      	sub	sp, #36	; 0x24
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	613b      	str	r3, [r7, #16]
  return result;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	210f      	movs	r1, #15
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	401a      	ands	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	61bb      	str	r3, [r7, #24]
  return result;
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	431a      	orrs	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80029a4:	bf00      	nop
 80029a6:	3724      	adds	r7, #36	; 0x24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	613b      	str	r3, [r7, #16]
  return result;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80029d2:	e051      	b.n	8002a78 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d043      	beq.n	8002a72 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d003      	beq.n	80029fa <LL_GPIO_Init+0x4a>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d10e      	bne.n	8002a18 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	461a      	mov	r2, r3
 8002a00:	69b9      	ldr	r1, [r7, #24]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ff16 	bl	8002834 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6819      	ldr	r1, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	461a      	mov	r2, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fef6 	bl	8002804 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff36 	bl	8002892 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d11a      	bne.n	8002a64 <LL_GPIO_Init+0xb4>
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	60bb      	str	r3, [r7, #8]
  return result;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b07      	cmp	r3, #7
 8002a44:	d807      	bhi.n	8002a56 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	69b9      	ldr	r1, [r7, #24]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ff4e 	bl	80028f0 <LL_GPIO_SetAFPin_0_7>
 8002a54:	e006      	b.n	8002a64 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	69b9      	ldr	r1, [r7, #24]
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ff75 	bl	800294e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	69b9      	ldr	r1, [r7, #24]
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fe9a 	bl	80027a6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1a6      	bne.n	80029d4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <LL_RCC_HSI_IsReady>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <LL_RCC_HSI_IsReady+0x20>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <LL_RCC_LSE_IsReady>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <LL_RCC_LSE_IsReady+0x20>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <LL_RCC_GetSysClkSource>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <LL_RCC_GetSysClkSource+0x18>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <LL_RCC_GetAHBPrescaler+0x18>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000

08002b2c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000

08002b48 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <LL_RCC_GetUSARTClockSource+0x28>)
 8002b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b54:	2103      	movs	r1, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	4313      	orrs	r3, r2
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000

08002b74 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <LL_RCC_PLL_GetMainSource+0x18>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000

08002b90 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000

08002bac <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <LL_RCC_PLL_GetPrediv+0x18>)
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	f003 030f 	and.w	r3, r3, #15
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002bd0:	f000 f864 	bl	8002c9c <RCC_GetSystemClockFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f882 	bl	8002ce8 <RCC_GetHCLKClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f890 	bl	8002d14 <RCC_GetPCLK1ClockFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f89c 	bl	8002d3c <RCC_GetPCLK2ClockFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	60da      	str	r2, [r3, #12]
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d12d      	bne.n	8002c82 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ff8e 	bl	8002b48 <LL_RCC_GetUSARTClockSource>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d00a      	beq.n	8002c48 <LL_RCC_GetUSARTClockFreq+0x34>
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d819      	bhi.n	8002c6a <LL_RCC_GetUSARTClockFreq+0x56>
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d002      	beq.n	8002c40 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d00c      	beq.n	8002c58 <LL_RCC_GetUSARTClockFreq+0x44>
 8002c3e:	e014      	b.n	8002c6a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002c40:	f000 f82c 	bl	8002c9c <RCC_GetSystemClockFreq>
 8002c44:	60f8      	str	r0, [r7, #12]
        break;
 8002c46:	e021      	b.n	8002c8c <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002c48:	f7ff ff22 	bl	8002a90 <LL_RCC_HSI_IsReady>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d019      	beq.n	8002c86 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002c54:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c56:	e016      	b.n	8002c86 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002c58:	f7ff ff2c 	bl	8002ab4 <LL_RCC_LSE_IsReady>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d013      	beq.n	8002c8a <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8002c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c66:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002c68:	e00f      	b.n	8002c8a <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002c6a:	f000 f817 	bl	8002c9c <RCC_GetSystemClockFreq>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f839 	bl	8002ce8 <RCC_GetHCLKClockFreq>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f84b 	bl	8002d14 <RCC_GetPCLK1ClockFreq>
 8002c7e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002c80:	e004      	b.n	8002c8c <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8002c82:	bf00      	nop
 8002c84:	e002      	b.n	8002c8c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002c8a:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	007a1200 	.word	0x007a1200

08002c9c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002ca6:	f7ff ff17 	bl	8002ad8 <LL_RCC_GetSysClkSource>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d00c      	beq.n	8002cca <RCC_GetSystemClockFreq+0x2e>
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d80e      	bhi.n	8002cd2 <RCC_GetSystemClockFreq+0x36>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <RCC_GetSystemClockFreq+0x22>
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d003      	beq.n	8002cc4 <RCC_GetSystemClockFreq+0x28>
 8002cbc:	e009      	b.n	8002cd2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <RCC_GetSystemClockFreq+0x48>)
 8002cc0:	607b      	str	r3, [r7, #4]
      break;
 8002cc2:	e009      	b.n	8002cd8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <RCC_GetSystemClockFreq+0x48>)
 8002cc6:	607b      	str	r3, [r7, #4]
      break;
 8002cc8:	e006      	b.n	8002cd8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002cca:	f000 f84b 	bl	8002d64 <RCC_PLL_GetFreqDomain_SYS>
 8002cce:	6078      	str	r0, [r7, #4]
      break;
 8002cd0:	e002      	b.n	8002cd8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <RCC_GetSystemClockFreq+0x48>)
 8002cd4:	607b      	str	r3, [r7, #4]
      break;
 8002cd6:	bf00      	nop
  }

  return frequency;
 8002cd8:	687b      	ldr	r3, [r7, #4]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	007a1200 	.word	0x007a1200

08002ce8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002cf0:	f7ff ff00 	bl	8002af4 <LL_RCC_GetAHBPrescaler>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <RCC_GetHCLKClockFreq+0x28>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	40d3      	lsrs	r3, r2
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08007048 	.word	0x08007048

08002d14 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002d1c:	f7ff fef8 	bl	8002b10 <LL_RCC_GetAPB1Prescaler>
 8002d20:	4603      	mov	r3, r0
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <RCC_GetPCLK1ClockFreq+0x24>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	40d3      	lsrs	r3, r2
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	08007058 	.word	0x08007058

08002d3c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002d44:	f7ff fef2 	bl	8002b2c <LL_RCC_GetAPB2Prescaler>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	0adb      	lsrs	r3, r3, #11
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <RCC_GetPCLK2ClockFreq+0x24>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	461a      	mov	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	40d3      	lsrs	r3, r2
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	08007058 	.word	0x08007058

08002d64 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002d72:	f7ff feff 	bl	8002b74 <LL_RCC_PLL_GetMainSource>
 8002d76:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d003      	beq.n	8002d8e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002d86:	e005      	b.n	8002d94 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002d8a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002d8c:	e005      	b.n	8002d9a <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002d90:	60fb      	str	r3, [r7, #12]
      break;
 8002d92:	e002      	b.n	8002d9a <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002d96:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002d98:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002d9a:	f7ff ff07 	bl	8002bac <LL_RCC_PLL_GetPrediv>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	3301      	adds	r3, #1
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	fbb2 f4f3 	udiv	r4, r2, r3
 8002da8:	f7ff fef2 	bl	8002b90 <LL_RCC_PLL_GetMultiplicator>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002db2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002db6:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	fa92 f2a2 	rbit	r2, r2
 8002dbe:	603a      	str	r2, [r7, #0]
  return result;
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	40d3      	lsrs	r3, r2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	003d0900 	.word	0x003d0900
 8002ddc:	007a1200 	.word	0x007a1200

08002de0 <LL_TIM_SetPrescaler>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_TIM_SetAutoReload>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_TIM_SetRepetitionCounter>:
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_TIM_OC_SetCompareCH1>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_TIM_OC_SetCompareCH2>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_TIM_OC_SetCompareCH3>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_TIM_OC_SetCompareCH4>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_TIM_OC_SetCompareCH5>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_TIM_OC_SetCompareCH6>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	615a      	str	r2, [r3, #20]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <LL_TIM_Init+0xd0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d007      	beq.n	8002f28 <LL_TIM_Init+0x28>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1e:	d003      	beq.n	8002f28 <LL_TIM_Init+0x28>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <LL_TIM_Init+0xd4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d106      	bne.n	8002f36 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <LL_TIM_Init+0xd0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <LL_TIM_Init+0x66>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f44:	d00f      	beq.n	8002f66 <LL_TIM_Init+0x66>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <LL_TIM_Init+0xd4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <LL_TIM_Init+0x66>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <LL_TIM_Init+0xd8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <LL_TIM_Init+0x66>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <LL_TIM_Init+0xdc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <LL_TIM_Init+0x66>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <LL_TIM_Init+0xe0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d106      	bne.n	8002f74 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff3b 	bl	8002dfc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff27 	bl	8002de0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <LL_TIM_Init+0xd0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00b      	beq.n	8002fb2 <LL_TIM_Init+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <LL_TIM_Init+0xd8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <LL_TIM_Init+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <LL_TIM_Init+0xdc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d003      	beq.n	8002fb2 <LL_TIM_Init+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <LL_TIM_Init+0xe0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d105      	bne.n	8002fbe <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff2d 	bl	8002e18 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ff8e 	bl	8002ee0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	40014400 	.word	0x40014400
 8002fe0:	40014800 	.word	0x40014800

08002fe4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ffa:	d045      	beq.n	8003088 <LL_TIM_OC_Init+0xa4>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003002:	d848      	bhi.n	8003096 <LL_TIM_OC_Init+0xb2>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300a:	d036      	beq.n	800307a <LL_TIM_OC_Init+0x96>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003012:	d840      	bhi.n	8003096 <LL_TIM_OC_Init+0xb2>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d027      	beq.n	800306c <LL_TIM_OC_Init+0x88>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003022:	d838      	bhi.n	8003096 <LL_TIM_OC_Init+0xb2>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302a:	d018      	beq.n	800305e <LL_TIM_OC_Init+0x7a>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d830      	bhi.n	8003096 <LL_TIM_OC_Init+0xb2>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d003      	beq.n	8003042 <LL_TIM_OC_Init+0x5e>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b10      	cmp	r3, #16
 800303e:	d007      	beq.n	8003050 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8003040:	e029      	b.n	8003096 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f82d 	bl	80030a4 <OC1Config>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]
      break;
 800304e:	e023      	b.n	8003098 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f8a0 	bl	8003198 <OC2Config>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]
      break;
 800305c:	e01c      	b.n	8003098 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f917 	bl	8003294 <OC3Config>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]
      break;
 800306a:	e015      	b.n	8003098 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f98e 	bl	8003390 <OC4Config>
 8003074:	4603      	mov	r3, r0
 8003076:	75fb      	strb	r3, [r7, #23]
      break;
 8003078:	e00e      	b.n	8003098 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f9ed 	bl	800345c <OC5Config>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
      break;
 8003086:	e007      	b.n	8003098 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa44 	bl	8003518 <OC6Config>
 8003090:	4603      	mov	r3, r0
 8003092:	75fb      	strb	r3, [r7, #23]
      break;
 8003094:	e000      	b.n	8003098 <LL_TIM_OC_Init+0xb4>
      break;
 8003096:	bf00      	nop
  }

  return result;
 8003098:	7dfb      	ldrb	r3, [r7, #23]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f023 0202 	bic.w	r2, r3, #2
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0201 	bic.w	r2, r3, #1
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a20      	ldr	r2, [pc, #128]	; (8003188 <OC1Config+0xe4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <OC1Config+0x7e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <OC1Config+0xe8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <OC1Config+0x7e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <OC1Config+0xec>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <OC1Config+0x7e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <OC1Config+0xf0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d11e      	bne.n	8003160 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 0208 	bic.w	r2, r3, #8
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f023 0204 	bic.w	r2, r3, #4
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fe5e 	bl	8002e34 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40014000 	.word	0x40014000
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800

08003198 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f023 0210 	bic.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	0212      	lsls	r2, r2, #8
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0220 	bic.w	r2, r3, #32
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0210 	bic.w	r2, r3, #16
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a21      	ldr	r2, [pc, #132]	; (8003284 <OC2Config+0xec>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <OC2Config+0x84>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a20      	ldr	r2, [pc, #128]	; (8003288 <OC2Config+0xf0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <OC2Config+0x84>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a1f      	ldr	r2, [pc, #124]	; (800328c <OC2Config+0xf4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <OC2Config+0x84>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <OC2Config+0xf8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d11f      	bne.n	800325c <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	019b      	lsls	r3, r3, #6
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	019b      	lsls	r3, r3, #6
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fdee 	bl	8002e50 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40014000 	.word	0x40014000
 800328c:	40014400 	.word	0x40014400
 8003290:	40014800 	.word	0x40014800

08003294 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a21      	ldr	r2, [pc, #132]	; (8003380 <OC3Config+0xec>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <OC3Config+0x82>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a20      	ldr	r2, [pc, #128]	; (8003384 <OC3Config+0xf0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <OC3Config+0x82>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <OC3Config+0xf4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <OC3Config+0x82>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1e      	ldr	r2, [pc, #120]	; (800338c <OC3Config+0xf8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d11f      	bne.n	8003356 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	029b      	lsls	r3, r3, #10
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	029b      	lsls	r3, r3, #10
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	015b      	lsls	r3, r3, #5
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fd7f 	bl	8002e6c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40014000 	.word	0x40014000
 8003388:	40014400 	.word	0x40014400
 800338c:	40014800 	.word	0x40014800

08003390 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	0212      	lsls	r2, r2, #8
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	031b      	lsls	r3, r3, #12
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	031b      	lsls	r3, r3, #12
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <OC4Config+0xbc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00b      	beq.n	8003414 <OC4Config+0x84>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a14      	ldr	r2, [pc, #80]	; (8003450 <OC4Config+0xc0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d007      	beq.n	8003414 <OC4Config+0x84>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a13      	ldr	r2, [pc, #76]	; (8003454 <OC4Config+0xc4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <OC4Config+0x84>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <OC4Config+0xc8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d107      	bne.n	8003424 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	019b      	lsls	r3, r3, #6
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fd26 	bl	8002e88 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40014000 	.word	0x40014000
 8003454:	40014400 	.word	0x40014400
 8003458:	40014800 	.word	0x40014800

0800345c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	4313      	orrs	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <OC5Config+0xac>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <OC5Config+0x74>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a14      	ldr	r2, [pc, #80]	; (800350c <OC5Config+0xb0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <OC5Config+0x74>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a13      	ldr	r2, [pc, #76]	; (8003510 <OC5Config+0xb4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <OC5Config+0x74>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <OC5Config+0xb8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d109      	bne.n	80034e4 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff fcd7 	bl	8002ea4 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40014000 	.word	0x40014000
 8003510:	40014400 	.word	0x40014400
 8003514:	40014800 	.word	0x40014800

08003518 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	0212      	lsls	r2, r2, #8
 800354a:	4313      	orrs	r3, r2
 800354c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	051b      	lsls	r3, r3, #20
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	051b      	lsls	r3, r3, #20
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <OC6Config+0xac>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <OC6Config+0x76>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <OC6Config+0xb0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <OC6Config+0x76>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <OC6Config+0xb4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <OC6Config+0x76>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a11      	ldr	r2, [pc, #68]	; (80035d0 <OC6Config+0xb8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d109      	bne.n	80035a2 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fc88 	bl	8002ec4 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800

080035d4 <LL_USART_IsEnabled>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <LL_USART_IsEnabled+0x18>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <LL_USART_IsEnabled+0x1a>
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <LL_USART_SetStopBitsLength>:
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	605a      	str	r2, [r3, #4]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_USART_SetHWFlowCtrl>:
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_USART_SetBaudRate>:
{
 8003646:	b480      	push	{r7}
 8003648:	b087      	sub	sp, #28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365a:	d11a      	bne.n	8003692 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	005a      	lsls	r2, r3, #1
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	441a      	add	r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	b29b      	uxth	r3, r3
 800366e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	b29b      	uxth	r3, r3
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	60da      	str	r2, [r3, #12]
}
 8003690:	e00a      	b.n	80036a8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	085a      	lsrs	r2, r3, #1
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	441a      	add	r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60da      	str	r2, [r3, #12]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff84 	bl	80035d4 <LL_USART_IsEnabled>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d14e      	bne.n	8003770 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b29      	ldr	r3, [pc, #164]	; (800377c <LL_USART_Init+0xc8>)
 80036d8:	4013      	ands	r3, r2
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6851      	ldr	r1, [r2, #4]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	4311      	orrs	r1, r2
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	6912      	ldr	r2, [r2, #16]
 80036e8:	4311      	orrs	r1, r2
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	6992      	ldr	r2, [r2, #24]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ff7c 	bl	80035fa <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff89 	bl	8003620 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <LL_USART_Init+0xcc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d104      	bne.n	8003720 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003716:	2000      	movs	r0, #0
 8003718:	f7ff fa7c 	bl	8002c14 <LL_RCC_GetUSARTClockFreq>
 800371c:	61b8      	str	r0, [r7, #24]
 800371e:	e016      	b.n	800374e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <LL_USART_Init+0xd0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d107      	bne.n	8003738 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003728:	f107 0308 	add.w	r3, r7, #8
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fa4b 	bl	8002bc8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e00a      	b.n	800374e <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a13      	ldr	r2, [pc, #76]	; (8003788 <LL_USART_Init+0xd4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d106      	bne.n	800374e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003740:	f107 0308 	add.w	r3, r7, #8
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fa3f 	bl	8002bc8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d009      	beq.n	8003770 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800375c:	2300      	movs	r3, #0
 800375e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	699a      	ldr	r2, [r3, #24]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff6b 	bl	8003646 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003770:	7ffb      	ldrb	r3, [r7, #31]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	efff69f3 	.word	0xefff69f3
 8003780:	40013800 	.word	0x40013800
 8003784:	40004400 	.word	0x40004400
 8003788:	40004800 	.word	0x40004800

0800378c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	4a07      	ldr	r2, [pc, #28]	; (80037bc <LL_InitTick+0x30>)
 80037a0:	3b01      	subs	r3, #1
 80037a2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <LL_InitTick+0x30>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <LL_InitTick+0x30>)
 80037ac:	2205      	movs	r2, #5
 80037ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000e010 	.word	0xe000e010

080037c0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80037c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ffdd 	bl	800378c <LL_InitTick>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <LL_mDelay+0x48>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80037ea:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d00c      	beq.n	800380e <LL_mDelay+0x32>
  {
    Delay++;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3301      	adds	r3, #1
 80037f8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80037fa:	e008      	b.n	800380e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <LL_mDelay+0x48>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <LL_mDelay+0x32>
    {
      Delay--;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3b01      	subs	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f3      	bne.n	80037fc <LL_mDelay+0x20>
    }
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000e010 	.word	0xe000e010

08003828 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <LL_SetSystemCoreClock+0x1c>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6013      	str	r3, [r2, #0]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000004 	.word	0x20000004

08003848 <__errno>:
 8003848:	4b01      	ldr	r3, [pc, #4]	; (8003850 <__errno+0x8>)
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000008 	.word	0x20000008

08003854 <__libc_init_array>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4d0d      	ldr	r5, [pc, #52]	; (800388c <__libc_init_array+0x38>)
 8003858:	4c0d      	ldr	r4, [pc, #52]	; (8003890 <__libc_init_array+0x3c>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	2600      	movs	r6, #0
 8003860:	42a6      	cmp	r6, r4
 8003862:	d109      	bne.n	8003878 <__libc_init_array+0x24>
 8003864:	4d0b      	ldr	r5, [pc, #44]	; (8003894 <__libc_init_array+0x40>)
 8003866:	4c0c      	ldr	r4, [pc, #48]	; (8003898 <__libc_init_array+0x44>)
 8003868:	f003 fb90 	bl	8006f8c <_init>
 800386c:	1b64      	subs	r4, r4, r5
 800386e:	10a4      	asrs	r4, r4, #2
 8003870:	2600      	movs	r6, #0
 8003872:	42a6      	cmp	r6, r4
 8003874:	d105      	bne.n	8003882 <__libc_init_array+0x2e>
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	f855 3b04 	ldr.w	r3, [r5], #4
 800387c:	4798      	blx	r3
 800387e:	3601      	adds	r6, #1
 8003880:	e7ee      	b.n	8003860 <__libc_init_array+0xc>
 8003882:	f855 3b04 	ldr.w	r3, [r5], #4
 8003886:	4798      	blx	r3
 8003888:	3601      	adds	r6, #1
 800388a:	e7f2      	b.n	8003872 <__libc_init_array+0x1e>
 800388c:	08007484 	.word	0x08007484
 8003890:	08007484 	.word	0x08007484
 8003894:	08007484 	.word	0x08007484
 8003898:	08007488 	.word	0x08007488

0800389c <memset>:
 800389c:	4402      	add	r2, r0
 800389e:	4603      	mov	r3, r0
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d100      	bne.n	80038a6 <memset+0xa>
 80038a4:	4770      	bx	lr
 80038a6:	f803 1b01 	strb.w	r1, [r3], #1
 80038aa:	e7f9      	b.n	80038a0 <memset+0x4>

080038ac <__cvt>:
 80038ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038b0:	ec55 4b10 	vmov	r4, r5, d0
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	460e      	mov	r6, r1
 80038b8:	4619      	mov	r1, r3
 80038ba:	462b      	mov	r3, r5
 80038bc:	bfbb      	ittet	lt
 80038be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80038c2:	461d      	movlt	r5, r3
 80038c4:	2300      	movge	r3, #0
 80038c6:	232d      	movlt	r3, #45	; 0x2d
 80038c8:	700b      	strb	r3, [r1, #0]
 80038ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80038d0:	4691      	mov	r9, r2
 80038d2:	f023 0820 	bic.w	r8, r3, #32
 80038d6:	bfbc      	itt	lt
 80038d8:	4622      	movlt	r2, r4
 80038da:	4614      	movlt	r4, r2
 80038dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038e0:	d005      	beq.n	80038ee <__cvt+0x42>
 80038e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80038e6:	d100      	bne.n	80038ea <__cvt+0x3e>
 80038e8:	3601      	adds	r6, #1
 80038ea:	2102      	movs	r1, #2
 80038ec:	e000      	b.n	80038f0 <__cvt+0x44>
 80038ee:	2103      	movs	r1, #3
 80038f0:	ab03      	add	r3, sp, #12
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	ab02      	add	r3, sp, #8
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	ec45 4b10 	vmov	d0, r4, r5
 80038fc:	4653      	mov	r3, sl
 80038fe:	4632      	mov	r2, r6
 8003900:	f000 fd96 	bl	8004430 <_dtoa_r>
 8003904:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003908:	4607      	mov	r7, r0
 800390a:	d102      	bne.n	8003912 <__cvt+0x66>
 800390c:	f019 0f01 	tst.w	r9, #1
 8003910:	d022      	beq.n	8003958 <__cvt+0xac>
 8003912:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003916:	eb07 0906 	add.w	r9, r7, r6
 800391a:	d110      	bne.n	800393e <__cvt+0x92>
 800391c:	783b      	ldrb	r3, [r7, #0]
 800391e:	2b30      	cmp	r3, #48	; 0x30
 8003920:	d10a      	bne.n	8003938 <__cvt+0x8c>
 8003922:	2200      	movs	r2, #0
 8003924:	2300      	movs	r3, #0
 8003926:	4620      	mov	r0, r4
 8003928:	4629      	mov	r1, r5
 800392a:	f7fd f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800392e:	b918      	cbnz	r0, 8003938 <__cvt+0x8c>
 8003930:	f1c6 0601 	rsb	r6, r6, #1
 8003934:	f8ca 6000 	str.w	r6, [sl]
 8003938:	f8da 3000 	ldr.w	r3, [sl]
 800393c:	4499      	add	r9, r3
 800393e:	2200      	movs	r2, #0
 8003940:	2300      	movs	r3, #0
 8003942:	4620      	mov	r0, r4
 8003944:	4629      	mov	r1, r5
 8003946:	f7fd f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800394a:	b108      	cbz	r0, 8003950 <__cvt+0xa4>
 800394c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003950:	2230      	movs	r2, #48	; 0x30
 8003952:	9b03      	ldr	r3, [sp, #12]
 8003954:	454b      	cmp	r3, r9
 8003956:	d307      	bcc.n	8003968 <__cvt+0xbc>
 8003958:	9b03      	ldr	r3, [sp, #12]
 800395a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800395c:	1bdb      	subs	r3, r3, r7
 800395e:	4638      	mov	r0, r7
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	b004      	add	sp, #16
 8003964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003968:	1c59      	adds	r1, r3, #1
 800396a:	9103      	str	r1, [sp, #12]
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e7f0      	b.n	8003952 <__cvt+0xa6>

08003970 <__exponent>:
 8003970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003972:	4603      	mov	r3, r0
 8003974:	2900      	cmp	r1, #0
 8003976:	bfb8      	it	lt
 8003978:	4249      	neglt	r1, r1
 800397a:	f803 2b02 	strb.w	r2, [r3], #2
 800397e:	bfb4      	ite	lt
 8003980:	222d      	movlt	r2, #45	; 0x2d
 8003982:	222b      	movge	r2, #43	; 0x2b
 8003984:	2909      	cmp	r1, #9
 8003986:	7042      	strb	r2, [r0, #1]
 8003988:	dd2a      	ble.n	80039e0 <__exponent+0x70>
 800398a:	f10d 0407 	add.w	r4, sp, #7
 800398e:	46a4      	mov	ip, r4
 8003990:	270a      	movs	r7, #10
 8003992:	46a6      	mov	lr, r4
 8003994:	460a      	mov	r2, r1
 8003996:	fb91 f6f7 	sdiv	r6, r1, r7
 800399a:	fb07 1516 	mls	r5, r7, r6, r1
 800399e:	3530      	adds	r5, #48	; 0x30
 80039a0:	2a63      	cmp	r2, #99	; 0x63
 80039a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80039a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80039aa:	4631      	mov	r1, r6
 80039ac:	dcf1      	bgt.n	8003992 <__exponent+0x22>
 80039ae:	3130      	adds	r1, #48	; 0x30
 80039b0:	f1ae 0502 	sub.w	r5, lr, #2
 80039b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80039b8:	1c44      	adds	r4, r0, #1
 80039ba:	4629      	mov	r1, r5
 80039bc:	4561      	cmp	r1, ip
 80039be:	d30a      	bcc.n	80039d6 <__exponent+0x66>
 80039c0:	f10d 0209 	add.w	r2, sp, #9
 80039c4:	eba2 020e 	sub.w	r2, r2, lr
 80039c8:	4565      	cmp	r5, ip
 80039ca:	bf88      	it	hi
 80039cc:	2200      	movhi	r2, #0
 80039ce:	4413      	add	r3, r2
 80039d0:	1a18      	subs	r0, r3, r0
 80039d2:	b003      	add	sp, #12
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80039de:	e7ed      	b.n	80039bc <__exponent+0x4c>
 80039e0:	2330      	movs	r3, #48	; 0x30
 80039e2:	3130      	adds	r1, #48	; 0x30
 80039e4:	7083      	strb	r3, [r0, #2]
 80039e6:	70c1      	strb	r1, [r0, #3]
 80039e8:	1d03      	adds	r3, r0, #4
 80039ea:	e7f1      	b.n	80039d0 <__exponent+0x60>

080039ec <_printf_float>:
 80039ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f0:	ed2d 8b02 	vpush	{d8}
 80039f4:	b08d      	sub	sp, #52	; 0x34
 80039f6:	460c      	mov	r4, r1
 80039f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80039fc:	4616      	mov	r6, r2
 80039fe:	461f      	mov	r7, r3
 8003a00:	4605      	mov	r5, r0
 8003a02:	f001 fb01 	bl	8005008 <_localeconv_r>
 8003a06:	f8d0 a000 	ldr.w	sl, [r0]
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	f7fc fbe0 	bl	80001d0 <strlen>
 8003a10:	2300      	movs	r3, #0
 8003a12:	930a      	str	r3, [sp, #40]	; 0x28
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	9305      	str	r3, [sp, #20]
 8003a18:	f8d8 3000 	ldr.w	r3, [r8]
 8003a1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003a20:	3307      	adds	r3, #7
 8003a22:	f023 0307 	bic.w	r3, r3, #7
 8003a26:	f103 0208 	add.w	r2, r3, #8
 8003a2a:	f8c8 2000 	str.w	r2, [r8]
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003a3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a3e:	9307      	str	r3, [sp, #28]
 8003a40:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a44:	ee08 0a10 	vmov	s16, r0
 8003a48:	4b9f      	ldr	r3, [pc, #636]	; (8003cc8 <_printf_float+0x2dc>)
 8003a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a52:	f7fd f86b 	bl	8000b2c <__aeabi_dcmpun>
 8003a56:	bb88      	cbnz	r0, 8003abc <_printf_float+0xd0>
 8003a58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a5c:	4b9a      	ldr	r3, [pc, #616]	; (8003cc8 <_printf_float+0x2dc>)
 8003a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a62:	f7fd f845 	bl	8000af0 <__aeabi_dcmple>
 8003a66:	bb48      	cbnz	r0, 8003abc <_printf_float+0xd0>
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4640      	mov	r0, r8
 8003a6e:	4649      	mov	r1, r9
 8003a70:	f7fd f834 	bl	8000adc <__aeabi_dcmplt>
 8003a74:	b110      	cbz	r0, 8003a7c <_printf_float+0x90>
 8003a76:	232d      	movs	r3, #45	; 0x2d
 8003a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7c:	4b93      	ldr	r3, [pc, #588]	; (8003ccc <_printf_float+0x2e0>)
 8003a7e:	4894      	ldr	r0, [pc, #592]	; (8003cd0 <_printf_float+0x2e4>)
 8003a80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003a84:	bf94      	ite	ls
 8003a86:	4698      	movls	r8, r3
 8003a88:	4680      	movhi	r8, r0
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	6123      	str	r3, [r4, #16]
 8003a8e:	9b05      	ldr	r3, [sp, #20]
 8003a90:	f023 0204 	bic.w	r2, r3, #4
 8003a94:	6022      	str	r2, [r4, #0]
 8003a96:	f04f 0900 	mov.w	r9, #0
 8003a9a:	9700      	str	r7, [sp, #0]
 8003a9c:	4633      	mov	r3, r6
 8003a9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 f9d8 	bl	8003e58 <_printf_common>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	f040 8090 	bne.w	8003bce <_printf_float+0x1e2>
 8003aae:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab2:	b00d      	add	sp, #52	; 0x34
 8003ab4:	ecbd 8b02 	vpop	{d8}
 8003ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003abc:	4642      	mov	r2, r8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	f7fd f832 	bl	8000b2c <__aeabi_dcmpun>
 8003ac8:	b140      	cbz	r0, 8003adc <_printf_float+0xf0>
 8003aca:	464b      	mov	r3, r9
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bfbc      	itt	lt
 8003ad0:	232d      	movlt	r3, #45	; 0x2d
 8003ad2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ad6:	487f      	ldr	r0, [pc, #508]	; (8003cd4 <_printf_float+0x2e8>)
 8003ad8:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <_printf_float+0x2ec>)
 8003ada:	e7d1      	b.n	8003a80 <_printf_float+0x94>
 8003adc:	6863      	ldr	r3, [r4, #4]
 8003ade:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003ae2:	9206      	str	r2, [sp, #24]
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	d13f      	bne.n	8003b68 <_printf_float+0x17c>
 8003ae8:	2306      	movs	r3, #6
 8003aea:	6063      	str	r3, [r4, #4]
 8003aec:	9b05      	ldr	r3, [sp, #20]
 8003aee:	6861      	ldr	r1, [r4, #4]
 8003af0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003af4:	2300      	movs	r3, #0
 8003af6:	9303      	str	r3, [sp, #12]
 8003af8:	ab0a      	add	r3, sp, #40	; 0x28
 8003afa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003afe:	ab09      	add	r3, sp, #36	; 0x24
 8003b00:	ec49 8b10 	vmov	d0, r8, r9
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	6022      	str	r2, [r4, #0]
 8003b08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f7ff fecd 	bl	80038ac <__cvt>
 8003b12:	9b06      	ldr	r3, [sp, #24]
 8003b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b16:	2b47      	cmp	r3, #71	; 0x47
 8003b18:	4680      	mov	r8, r0
 8003b1a:	d108      	bne.n	8003b2e <_printf_float+0x142>
 8003b1c:	1cc8      	adds	r0, r1, #3
 8003b1e:	db02      	blt.n	8003b26 <_printf_float+0x13a>
 8003b20:	6863      	ldr	r3, [r4, #4]
 8003b22:	4299      	cmp	r1, r3
 8003b24:	dd41      	ble.n	8003baa <_printf_float+0x1be>
 8003b26:	f1ab 0b02 	sub.w	fp, fp, #2
 8003b2a:	fa5f fb8b 	uxtb.w	fp, fp
 8003b2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b32:	d820      	bhi.n	8003b76 <_printf_float+0x18a>
 8003b34:	3901      	subs	r1, #1
 8003b36:	465a      	mov	r2, fp
 8003b38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b3c:	9109      	str	r1, [sp, #36]	; 0x24
 8003b3e:	f7ff ff17 	bl	8003970 <__exponent>
 8003b42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b44:	1813      	adds	r3, r2, r0
 8003b46:	2a01      	cmp	r2, #1
 8003b48:	4681      	mov	r9, r0
 8003b4a:	6123      	str	r3, [r4, #16]
 8003b4c:	dc02      	bgt.n	8003b54 <_printf_float+0x168>
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	07d2      	lsls	r2, r2, #31
 8003b52:	d501      	bpl.n	8003b58 <_printf_float+0x16c>
 8003b54:	3301      	adds	r3, #1
 8003b56:	6123      	str	r3, [r4, #16]
 8003b58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d09c      	beq.n	8003a9a <_printf_float+0xae>
 8003b60:	232d      	movs	r3, #45	; 0x2d
 8003b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b66:	e798      	b.n	8003a9a <_printf_float+0xae>
 8003b68:	9a06      	ldr	r2, [sp, #24]
 8003b6a:	2a47      	cmp	r2, #71	; 0x47
 8003b6c:	d1be      	bne.n	8003aec <_printf_float+0x100>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1bc      	bne.n	8003aec <_printf_float+0x100>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e7b9      	b.n	8003aea <_printf_float+0xfe>
 8003b76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003b7a:	d118      	bne.n	8003bae <_printf_float+0x1c2>
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	6863      	ldr	r3, [r4, #4]
 8003b80:	dd0b      	ble.n	8003b9a <_printf_float+0x1ae>
 8003b82:	6121      	str	r1, [r4, #16]
 8003b84:	b913      	cbnz	r3, 8003b8c <_printf_float+0x1a0>
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	07d0      	lsls	r0, r2, #31
 8003b8a:	d502      	bpl.n	8003b92 <_printf_float+0x1a6>
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	440b      	add	r3, r1
 8003b90:	6123      	str	r3, [r4, #16]
 8003b92:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b94:	f04f 0900 	mov.w	r9, #0
 8003b98:	e7de      	b.n	8003b58 <_printf_float+0x16c>
 8003b9a:	b913      	cbnz	r3, 8003ba2 <_printf_float+0x1b6>
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	07d2      	lsls	r2, r2, #31
 8003ba0:	d501      	bpl.n	8003ba6 <_printf_float+0x1ba>
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	e7f4      	b.n	8003b90 <_printf_float+0x1a4>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e7f2      	b.n	8003b90 <_printf_float+0x1a4>
 8003baa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bb0:	4299      	cmp	r1, r3
 8003bb2:	db05      	blt.n	8003bc0 <_printf_float+0x1d4>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	6121      	str	r1, [r4, #16]
 8003bb8:	07d8      	lsls	r0, r3, #31
 8003bba:	d5ea      	bpl.n	8003b92 <_printf_float+0x1a6>
 8003bbc:	1c4b      	adds	r3, r1, #1
 8003bbe:	e7e7      	b.n	8003b90 <_printf_float+0x1a4>
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	bfd4      	ite	le
 8003bc4:	f1c1 0202 	rsble	r2, r1, #2
 8003bc8:	2201      	movgt	r2, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	e7e0      	b.n	8003b90 <_printf_float+0x1a4>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	055a      	lsls	r2, r3, #21
 8003bd2:	d407      	bmi.n	8003be4 <_printf_float+0x1f8>
 8003bd4:	6923      	ldr	r3, [r4, #16]
 8003bd6:	4642      	mov	r2, r8
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4628      	mov	r0, r5
 8003bdc:	47b8      	blx	r7
 8003bde:	3001      	adds	r0, #1
 8003be0:	d12c      	bne.n	8003c3c <_printf_float+0x250>
 8003be2:	e764      	b.n	8003aae <_printf_float+0xc2>
 8003be4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003be8:	f240 80e0 	bls.w	8003dac <_printf_float+0x3c0>
 8003bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f7fc ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d034      	beq.n	8003c66 <_printf_float+0x27a>
 8003bfc:	4a37      	ldr	r2, [pc, #220]	; (8003cdc <_printf_float+0x2f0>)
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4631      	mov	r1, r6
 8003c02:	4628      	mov	r0, r5
 8003c04:	47b8      	blx	r7
 8003c06:	3001      	adds	r0, #1
 8003c08:	f43f af51 	beq.w	8003aae <_printf_float+0xc2>
 8003c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c10:	429a      	cmp	r2, r3
 8003c12:	db02      	blt.n	8003c1a <_printf_float+0x22e>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	07d8      	lsls	r0, r3, #31
 8003c18:	d510      	bpl.n	8003c3c <_printf_float+0x250>
 8003c1a:	ee18 3a10 	vmov	r3, s16
 8003c1e:	4652      	mov	r2, sl
 8003c20:	4631      	mov	r1, r6
 8003c22:	4628      	mov	r0, r5
 8003c24:	47b8      	blx	r7
 8003c26:	3001      	adds	r0, #1
 8003c28:	f43f af41 	beq.w	8003aae <_printf_float+0xc2>
 8003c2c:	f04f 0800 	mov.w	r8, #0
 8003c30:	f104 091a 	add.w	r9, r4, #26
 8003c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	4543      	cmp	r3, r8
 8003c3a:	dc09      	bgt.n	8003c50 <_printf_float+0x264>
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	079b      	lsls	r3, r3, #30
 8003c40:	f100 8105 	bmi.w	8003e4e <_printf_float+0x462>
 8003c44:	68e0      	ldr	r0, [r4, #12]
 8003c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c48:	4298      	cmp	r0, r3
 8003c4a:	bfb8      	it	lt
 8003c4c:	4618      	movlt	r0, r3
 8003c4e:	e730      	b.n	8003ab2 <_printf_float+0xc6>
 8003c50:	2301      	movs	r3, #1
 8003c52:	464a      	mov	r2, r9
 8003c54:	4631      	mov	r1, r6
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b8      	blx	r7
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f43f af27 	beq.w	8003aae <_printf_float+0xc2>
 8003c60:	f108 0801 	add.w	r8, r8, #1
 8003c64:	e7e6      	b.n	8003c34 <_printf_float+0x248>
 8003c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	dc39      	bgt.n	8003ce0 <_printf_float+0x2f4>
 8003c6c:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <_printf_float+0x2f0>)
 8003c6e:	2301      	movs	r3, #1
 8003c70:	4631      	mov	r1, r6
 8003c72:	4628      	mov	r0, r5
 8003c74:	47b8      	blx	r7
 8003c76:	3001      	adds	r0, #1
 8003c78:	f43f af19 	beq.w	8003aae <_printf_float+0xc2>
 8003c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c80:	4313      	orrs	r3, r2
 8003c82:	d102      	bne.n	8003c8a <_printf_float+0x29e>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	07d9      	lsls	r1, r3, #31
 8003c88:	d5d8      	bpl.n	8003c3c <_printf_float+0x250>
 8003c8a:	ee18 3a10 	vmov	r3, s16
 8003c8e:	4652      	mov	r2, sl
 8003c90:	4631      	mov	r1, r6
 8003c92:	4628      	mov	r0, r5
 8003c94:	47b8      	blx	r7
 8003c96:	3001      	adds	r0, #1
 8003c98:	f43f af09 	beq.w	8003aae <_printf_float+0xc2>
 8003c9c:	f04f 0900 	mov.w	r9, #0
 8003ca0:	f104 0a1a 	add.w	sl, r4, #26
 8003ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca6:	425b      	negs	r3, r3
 8003ca8:	454b      	cmp	r3, r9
 8003caa:	dc01      	bgt.n	8003cb0 <_printf_float+0x2c4>
 8003cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cae:	e792      	b.n	8003bd6 <_printf_float+0x1ea>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4652      	mov	r2, sl
 8003cb4:	4631      	mov	r1, r6
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	47b8      	blx	r7
 8003cba:	3001      	adds	r0, #1
 8003cbc:	f43f aef7 	beq.w	8003aae <_printf_float+0xc2>
 8003cc0:	f109 0901 	add.w	r9, r9, #1
 8003cc4:	e7ee      	b.n	8003ca4 <_printf_float+0x2b8>
 8003cc6:	bf00      	nop
 8003cc8:	7fefffff 	.word	0x7fefffff
 8003ccc:	08007084 	.word	0x08007084
 8003cd0:	08007088 	.word	0x08007088
 8003cd4:	08007090 	.word	0x08007090
 8003cd8:	0800708c 	.word	0x0800708c
 8003cdc:	080072c1 	.word	0x080072c1
 8003ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	bfa8      	it	ge
 8003ce8:	461a      	movge	r2, r3
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	4691      	mov	r9, r2
 8003cee:	dc37      	bgt.n	8003d60 <_printf_float+0x374>
 8003cf0:	f04f 0b00 	mov.w	fp, #0
 8003cf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cf8:	f104 021a 	add.w	r2, r4, #26
 8003cfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cfe:	9305      	str	r3, [sp, #20]
 8003d00:	eba3 0309 	sub.w	r3, r3, r9
 8003d04:	455b      	cmp	r3, fp
 8003d06:	dc33      	bgt.n	8003d70 <_printf_float+0x384>
 8003d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	db3b      	blt.n	8003d88 <_printf_float+0x39c>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	07da      	lsls	r2, r3, #31
 8003d14:	d438      	bmi.n	8003d88 <_printf_float+0x39c>
 8003d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d18:	9b05      	ldr	r3, [sp, #20]
 8003d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	eba2 0901 	sub.w	r9, r2, r1
 8003d22:	4599      	cmp	r9, r3
 8003d24:	bfa8      	it	ge
 8003d26:	4699      	movge	r9, r3
 8003d28:	f1b9 0f00 	cmp.w	r9, #0
 8003d2c:	dc35      	bgt.n	8003d9a <_printf_float+0x3ae>
 8003d2e:	f04f 0800 	mov.w	r8, #0
 8003d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d36:	f104 0a1a 	add.w	sl, r4, #26
 8003d3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	eba3 0309 	sub.w	r3, r3, r9
 8003d44:	4543      	cmp	r3, r8
 8003d46:	f77f af79 	ble.w	8003c3c <_printf_float+0x250>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4652      	mov	r2, sl
 8003d4e:	4631      	mov	r1, r6
 8003d50:	4628      	mov	r0, r5
 8003d52:	47b8      	blx	r7
 8003d54:	3001      	adds	r0, #1
 8003d56:	f43f aeaa 	beq.w	8003aae <_printf_float+0xc2>
 8003d5a:	f108 0801 	add.w	r8, r8, #1
 8003d5e:	e7ec      	b.n	8003d3a <_printf_float+0x34e>
 8003d60:	4613      	mov	r3, r2
 8003d62:	4631      	mov	r1, r6
 8003d64:	4642      	mov	r2, r8
 8003d66:	4628      	mov	r0, r5
 8003d68:	47b8      	blx	r7
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d1c0      	bne.n	8003cf0 <_printf_float+0x304>
 8003d6e:	e69e      	b.n	8003aae <_printf_float+0xc2>
 8003d70:	2301      	movs	r3, #1
 8003d72:	4631      	mov	r1, r6
 8003d74:	4628      	mov	r0, r5
 8003d76:	9205      	str	r2, [sp, #20]
 8003d78:	47b8      	blx	r7
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	f43f ae97 	beq.w	8003aae <_printf_float+0xc2>
 8003d80:	9a05      	ldr	r2, [sp, #20]
 8003d82:	f10b 0b01 	add.w	fp, fp, #1
 8003d86:	e7b9      	b.n	8003cfc <_printf_float+0x310>
 8003d88:	ee18 3a10 	vmov	r3, s16
 8003d8c:	4652      	mov	r2, sl
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4628      	mov	r0, r5
 8003d92:	47b8      	blx	r7
 8003d94:	3001      	adds	r0, #1
 8003d96:	d1be      	bne.n	8003d16 <_printf_float+0x32a>
 8003d98:	e689      	b.n	8003aae <_printf_float+0xc2>
 8003d9a:	9a05      	ldr	r2, [sp, #20]
 8003d9c:	464b      	mov	r3, r9
 8003d9e:	4442      	add	r2, r8
 8003da0:	4631      	mov	r1, r6
 8003da2:	4628      	mov	r0, r5
 8003da4:	47b8      	blx	r7
 8003da6:	3001      	adds	r0, #1
 8003da8:	d1c1      	bne.n	8003d2e <_printf_float+0x342>
 8003daa:	e680      	b.n	8003aae <_printf_float+0xc2>
 8003dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dae:	2a01      	cmp	r2, #1
 8003db0:	dc01      	bgt.n	8003db6 <_printf_float+0x3ca>
 8003db2:	07db      	lsls	r3, r3, #31
 8003db4:	d538      	bpl.n	8003e28 <_printf_float+0x43c>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4642      	mov	r2, r8
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	47b8      	blx	r7
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	f43f ae74 	beq.w	8003aae <_printf_float+0xc2>
 8003dc6:	ee18 3a10 	vmov	r3, s16
 8003dca:	4652      	mov	r2, sl
 8003dcc:	4631      	mov	r1, r6
 8003dce:	4628      	mov	r0, r5
 8003dd0:	47b8      	blx	r7
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	f43f ae6b 	beq.w	8003aae <_printf_float+0xc2>
 8003dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2300      	movs	r3, #0
 8003de0:	f7fc fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8003de4:	b9d8      	cbnz	r0, 8003e1e <_printf_float+0x432>
 8003de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de8:	f108 0201 	add.w	r2, r8, #1
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4631      	mov	r1, r6
 8003df0:	4628      	mov	r0, r5
 8003df2:	47b8      	blx	r7
 8003df4:	3001      	adds	r0, #1
 8003df6:	d10e      	bne.n	8003e16 <_printf_float+0x42a>
 8003df8:	e659      	b.n	8003aae <_printf_float+0xc2>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f ae52 	beq.w	8003aae <_printf_float+0xc2>
 8003e0a:	f108 0801 	add.w	r8, r8, #1
 8003e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e10:	3b01      	subs	r3, #1
 8003e12:	4543      	cmp	r3, r8
 8003e14:	dcf1      	bgt.n	8003dfa <_printf_float+0x40e>
 8003e16:	464b      	mov	r3, r9
 8003e18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e1c:	e6dc      	b.n	8003bd8 <_printf_float+0x1ec>
 8003e1e:	f04f 0800 	mov.w	r8, #0
 8003e22:	f104 0a1a 	add.w	sl, r4, #26
 8003e26:	e7f2      	b.n	8003e0e <_printf_float+0x422>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4642      	mov	r2, r8
 8003e2c:	e7df      	b.n	8003dee <_printf_float+0x402>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	464a      	mov	r2, r9
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	f43f ae38 	beq.w	8003aae <_printf_float+0xc2>
 8003e3e:	f108 0801 	add.w	r8, r8, #1
 8003e42:	68e3      	ldr	r3, [r4, #12]
 8003e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e46:	1a5b      	subs	r3, r3, r1
 8003e48:	4543      	cmp	r3, r8
 8003e4a:	dcf0      	bgt.n	8003e2e <_printf_float+0x442>
 8003e4c:	e6fa      	b.n	8003c44 <_printf_float+0x258>
 8003e4e:	f04f 0800 	mov.w	r8, #0
 8003e52:	f104 0919 	add.w	r9, r4, #25
 8003e56:	e7f4      	b.n	8003e42 <_printf_float+0x456>

08003e58 <_printf_common>:
 8003e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e5c:	4616      	mov	r6, r2
 8003e5e:	4699      	mov	r9, r3
 8003e60:	688a      	ldr	r2, [r1, #8]
 8003e62:	690b      	ldr	r3, [r1, #16]
 8003e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	bfb8      	it	lt
 8003e6c:	4613      	movlt	r3, r2
 8003e6e:	6033      	str	r3, [r6, #0]
 8003e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e74:	4607      	mov	r7, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	b10a      	cbz	r2, 8003e7e <_printf_common+0x26>
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	6033      	str	r3, [r6, #0]
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	0699      	lsls	r1, r3, #26
 8003e82:	bf42      	ittt	mi
 8003e84:	6833      	ldrmi	r3, [r6, #0]
 8003e86:	3302      	addmi	r3, #2
 8003e88:	6033      	strmi	r3, [r6, #0]
 8003e8a:	6825      	ldr	r5, [r4, #0]
 8003e8c:	f015 0506 	ands.w	r5, r5, #6
 8003e90:	d106      	bne.n	8003ea0 <_printf_common+0x48>
 8003e92:	f104 0a19 	add.w	sl, r4, #25
 8003e96:	68e3      	ldr	r3, [r4, #12]
 8003e98:	6832      	ldr	r2, [r6, #0]
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	42ab      	cmp	r3, r5
 8003e9e:	dc26      	bgt.n	8003eee <_printf_common+0x96>
 8003ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ea4:	1e13      	subs	r3, r2, #0
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	bf18      	it	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	0692      	lsls	r2, r2, #26
 8003eae:	d42b      	bmi.n	8003f08 <_printf_common+0xb0>
 8003eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	47c0      	blx	r8
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d01e      	beq.n	8003efc <_printf_common+0xa4>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	68e5      	ldr	r5, [r4, #12]
 8003ec2:	6832      	ldr	r2, [r6, #0]
 8003ec4:	f003 0306 	and.w	r3, r3, #6
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	bf08      	it	eq
 8003ecc:	1aad      	subeq	r5, r5, r2
 8003ece:	68a3      	ldr	r3, [r4, #8]
 8003ed0:	6922      	ldr	r2, [r4, #16]
 8003ed2:	bf0c      	ite	eq
 8003ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed8:	2500      	movne	r5, #0
 8003eda:	4293      	cmp	r3, r2
 8003edc:	bfc4      	itt	gt
 8003ede:	1a9b      	subgt	r3, r3, r2
 8003ee0:	18ed      	addgt	r5, r5, r3
 8003ee2:	2600      	movs	r6, #0
 8003ee4:	341a      	adds	r4, #26
 8003ee6:	42b5      	cmp	r5, r6
 8003ee8:	d11a      	bne.n	8003f20 <_printf_common+0xc8>
 8003eea:	2000      	movs	r0, #0
 8003eec:	e008      	b.n	8003f00 <_printf_common+0xa8>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4652      	mov	r2, sl
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	47c0      	blx	r8
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d103      	bne.n	8003f04 <_printf_common+0xac>
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f04:	3501      	adds	r5, #1
 8003f06:	e7c6      	b.n	8003e96 <_printf_common+0x3e>
 8003f08:	18e1      	adds	r1, r4, r3
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	2030      	movs	r0, #48	; 0x30
 8003f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f12:	4422      	add	r2, r4
 8003f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	e7c7      	b.n	8003eb0 <_printf_common+0x58>
 8003f20:	2301      	movs	r3, #1
 8003f22:	4622      	mov	r2, r4
 8003f24:	4649      	mov	r1, r9
 8003f26:	4638      	mov	r0, r7
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d0e6      	beq.n	8003efc <_printf_common+0xa4>
 8003f2e:	3601      	adds	r6, #1
 8003f30:	e7d9      	b.n	8003ee6 <_printf_common+0x8e>
	...

08003f34 <_printf_i>:
 8003f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	460c      	mov	r4, r1
 8003f3a:	4691      	mov	r9, r2
 8003f3c:	7e27      	ldrb	r7, [r4, #24]
 8003f3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f40:	2f78      	cmp	r7, #120	; 0x78
 8003f42:	4680      	mov	r8, r0
 8003f44:	469a      	mov	sl, r3
 8003f46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f4a:	d807      	bhi.n	8003f5c <_printf_i+0x28>
 8003f4c:	2f62      	cmp	r7, #98	; 0x62
 8003f4e:	d80a      	bhi.n	8003f66 <_printf_i+0x32>
 8003f50:	2f00      	cmp	r7, #0
 8003f52:	f000 80d8 	beq.w	8004106 <_printf_i+0x1d2>
 8003f56:	2f58      	cmp	r7, #88	; 0x58
 8003f58:	f000 80a3 	beq.w	80040a2 <_printf_i+0x16e>
 8003f5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f64:	e03a      	b.n	8003fdc <_printf_i+0xa8>
 8003f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f6a:	2b15      	cmp	r3, #21
 8003f6c:	d8f6      	bhi.n	8003f5c <_printf_i+0x28>
 8003f6e:	a001      	add	r0, pc, #4	; (adr r0, 8003f74 <_printf_i+0x40>)
 8003f70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f74:	08003fcd 	.word	0x08003fcd
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08003f5d 	.word	0x08003f5d
 8003f80:	08003f5d 	.word	0x08003f5d
 8003f84:	08003f5d 	.word	0x08003f5d
 8003f88:	08003f5d 	.word	0x08003f5d
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003f5d 	.word	0x08003f5d
 8003f94:	08003f5d 	.word	0x08003f5d
 8003f98:	08003f5d 	.word	0x08003f5d
 8003f9c:	08003f5d 	.word	0x08003f5d
 8003fa0:	080040ed 	.word	0x080040ed
 8003fa4:	08004011 	.word	0x08004011
 8003fa8:	080040cf 	.word	0x080040cf
 8003fac:	08003f5d 	.word	0x08003f5d
 8003fb0:	08003f5d 	.word	0x08003f5d
 8003fb4:	0800410f 	.word	0x0800410f
 8003fb8:	08003f5d 	.word	0x08003f5d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f5d 	.word	0x08003f5d
 8003fc4:	08003f5d 	.word	0x08003f5d
 8003fc8:	080040d7 	.word	0x080040d7
 8003fcc:	680b      	ldr	r3, [r1, #0]
 8003fce:	1d1a      	adds	r2, r3, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	600a      	str	r2, [r1, #0]
 8003fd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0a3      	b.n	8004128 <_printf_i+0x1f4>
 8003fe0:	6825      	ldr	r5, [r4, #0]
 8003fe2:	6808      	ldr	r0, [r1, #0]
 8003fe4:	062e      	lsls	r6, r5, #24
 8003fe6:	f100 0304 	add.w	r3, r0, #4
 8003fea:	d50a      	bpl.n	8004002 <_printf_i+0xce>
 8003fec:	6805      	ldr	r5, [r0, #0]
 8003fee:	600b      	str	r3, [r1, #0]
 8003ff0:	2d00      	cmp	r5, #0
 8003ff2:	da03      	bge.n	8003ffc <_printf_i+0xc8>
 8003ff4:	232d      	movs	r3, #45	; 0x2d
 8003ff6:	426d      	negs	r5, r5
 8003ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ffc:	485e      	ldr	r0, [pc, #376]	; (8004178 <_printf_i+0x244>)
 8003ffe:	230a      	movs	r3, #10
 8004000:	e019      	b.n	8004036 <_printf_i+0x102>
 8004002:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004006:	6805      	ldr	r5, [r0, #0]
 8004008:	600b      	str	r3, [r1, #0]
 800400a:	bf18      	it	ne
 800400c:	b22d      	sxthne	r5, r5
 800400e:	e7ef      	b.n	8003ff0 <_printf_i+0xbc>
 8004010:	680b      	ldr	r3, [r1, #0]
 8004012:	6825      	ldr	r5, [r4, #0]
 8004014:	1d18      	adds	r0, r3, #4
 8004016:	6008      	str	r0, [r1, #0]
 8004018:	0628      	lsls	r0, r5, #24
 800401a:	d501      	bpl.n	8004020 <_printf_i+0xec>
 800401c:	681d      	ldr	r5, [r3, #0]
 800401e:	e002      	b.n	8004026 <_printf_i+0xf2>
 8004020:	0669      	lsls	r1, r5, #25
 8004022:	d5fb      	bpl.n	800401c <_printf_i+0xe8>
 8004024:	881d      	ldrh	r5, [r3, #0]
 8004026:	4854      	ldr	r0, [pc, #336]	; (8004178 <_printf_i+0x244>)
 8004028:	2f6f      	cmp	r7, #111	; 0x6f
 800402a:	bf0c      	ite	eq
 800402c:	2308      	moveq	r3, #8
 800402e:	230a      	movne	r3, #10
 8004030:	2100      	movs	r1, #0
 8004032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004036:	6866      	ldr	r6, [r4, #4]
 8004038:	60a6      	str	r6, [r4, #8]
 800403a:	2e00      	cmp	r6, #0
 800403c:	bfa2      	ittt	ge
 800403e:	6821      	ldrge	r1, [r4, #0]
 8004040:	f021 0104 	bicge.w	r1, r1, #4
 8004044:	6021      	strge	r1, [r4, #0]
 8004046:	b90d      	cbnz	r5, 800404c <_printf_i+0x118>
 8004048:	2e00      	cmp	r6, #0
 800404a:	d04d      	beq.n	80040e8 <_printf_i+0x1b4>
 800404c:	4616      	mov	r6, r2
 800404e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004052:	fb03 5711 	mls	r7, r3, r1, r5
 8004056:	5dc7      	ldrb	r7, [r0, r7]
 8004058:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800405c:	462f      	mov	r7, r5
 800405e:	42bb      	cmp	r3, r7
 8004060:	460d      	mov	r5, r1
 8004062:	d9f4      	bls.n	800404e <_printf_i+0x11a>
 8004064:	2b08      	cmp	r3, #8
 8004066:	d10b      	bne.n	8004080 <_printf_i+0x14c>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	07df      	lsls	r7, r3, #31
 800406c:	d508      	bpl.n	8004080 <_printf_i+0x14c>
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	6861      	ldr	r1, [r4, #4]
 8004072:	4299      	cmp	r1, r3
 8004074:	bfde      	ittt	le
 8004076:	2330      	movle	r3, #48	; 0x30
 8004078:	f806 3c01 	strble.w	r3, [r6, #-1]
 800407c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004080:	1b92      	subs	r2, r2, r6
 8004082:	6122      	str	r2, [r4, #16]
 8004084:	f8cd a000 	str.w	sl, [sp]
 8004088:	464b      	mov	r3, r9
 800408a:	aa03      	add	r2, sp, #12
 800408c:	4621      	mov	r1, r4
 800408e:	4640      	mov	r0, r8
 8004090:	f7ff fee2 	bl	8003e58 <_printf_common>
 8004094:	3001      	adds	r0, #1
 8004096:	d14c      	bne.n	8004132 <_printf_i+0x1fe>
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	b004      	add	sp, #16
 800409e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a2:	4835      	ldr	r0, [pc, #212]	; (8004178 <_printf_i+0x244>)
 80040a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	680e      	ldr	r6, [r1, #0]
 80040ac:	061f      	lsls	r7, r3, #24
 80040ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80040b2:	600e      	str	r6, [r1, #0]
 80040b4:	d514      	bpl.n	80040e0 <_printf_i+0x1ac>
 80040b6:	07d9      	lsls	r1, r3, #31
 80040b8:	bf44      	itt	mi
 80040ba:	f043 0320 	orrmi.w	r3, r3, #32
 80040be:	6023      	strmi	r3, [r4, #0]
 80040c0:	b91d      	cbnz	r5, 80040ca <_printf_i+0x196>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	f023 0320 	bic.w	r3, r3, #32
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	2310      	movs	r3, #16
 80040cc:	e7b0      	b.n	8004030 <_printf_i+0xfc>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	f043 0320 	orr.w	r3, r3, #32
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	2378      	movs	r3, #120	; 0x78
 80040d8:	4828      	ldr	r0, [pc, #160]	; (800417c <_printf_i+0x248>)
 80040da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040de:	e7e3      	b.n	80040a8 <_printf_i+0x174>
 80040e0:	065e      	lsls	r6, r3, #25
 80040e2:	bf48      	it	mi
 80040e4:	b2ad      	uxthmi	r5, r5
 80040e6:	e7e6      	b.n	80040b6 <_printf_i+0x182>
 80040e8:	4616      	mov	r6, r2
 80040ea:	e7bb      	b.n	8004064 <_printf_i+0x130>
 80040ec:	680b      	ldr	r3, [r1, #0]
 80040ee:	6826      	ldr	r6, [r4, #0]
 80040f0:	6960      	ldr	r0, [r4, #20]
 80040f2:	1d1d      	adds	r5, r3, #4
 80040f4:	600d      	str	r5, [r1, #0]
 80040f6:	0635      	lsls	r5, r6, #24
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	d501      	bpl.n	8004100 <_printf_i+0x1cc>
 80040fc:	6018      	str	r0, [r3, #0]
 80040fe:	e002      	b.n	8004106 <_printf_i+0x1d2>
 8004100:	0671      	lsls	r1, r6, #25
 8004102:	d5fb      	bpl.n	80040fc <_printf_i+0x1c8>
 8004104:	8018      	strh	r0, [r3, #0]
 8004106:	2300      	movs	r3, #0
 8004108:	6123      	str	r3, [r4, #16]
 800410a:	4616      	mov	r6, r2
 800410c:	e7ba      	b.n	8004084 <_printf_i+0x150>
 800410e:	680b      	ldr	r3, [r1, #0]
 8004110:	1d1a      	adds	r2, r3, #4
 8004112:	600a      	str	r2, [r1, #0]
 8004114:	681e      	ldr	r6, [r3, #0]
 8004116:	6862      	ldr	r2, [r4, #4]
 8004118:	2100      	movs	r1, #0
 800411a:	4630      	mov	r0, r6
 800411c:	f7fc f860 	bl	80001e0 <memchr>
 8004120:	b108      	cbz	r0, 8004126 <_printf_i+0x1f2>
 8004122:	1b80      	subs	r0, r0, r6
 8004124:	6060      	str	r0, [r4, #4]
 8004126:	6863      	ldr	r3, [r4, #4]
 8004128:	6123      	str	r3, [r4, #16]
 800412a:	2300      	movs	r3, #0
 800412c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004130:	e7a8      	b.n	8004084 <_printf_i+0x150>
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	4632      	mov	r2, r6
 8004136:	4649      	mov	r1, r9
 8004138:	4640      	mov	r0, r8
 800413a:	47d0      	blx	sl
 800413c:	3001      	adds	r0, #1
 800413e:	d0ab      	beq.n	8004098 <_printf_i+0x164>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	079b      	lsls	r3, r3, #30
 8004144:	d413      	bmi.n	800416e <_printf_i+0x23a>
 8004146:	68e0      	ldr	r0, [r4, #12]
 8004148:	9b03      	ldr	r3, [sp, #12]
 800414a:	4298      	cmp	r0, r3
 800414c:	bfb8      	it	lt
 800414e:	4618      	movlt	r0, r3
 8004150:	e7a4      	b.n	800409c <_printf_i+0x168>
 8004152:	2301      	movs	r3, #1
 8004154:	4632      	mov	r2, r6
 8004156:	4649      	mov	r1, r9
 8004158:	4640      	mov	r0, r8
 800415a:	47d0      	blx	sl
 800415c:	3001      	adds	r0, #1
 800415e:	d09b      	beq.n	8004098 <_printf_i+0x164>
 8004160:	3501      	adds	r5, #1
 8004162:	68e3      	ldr	r3, [r4, #12]
 8004164:	9903      	ldr	r1, [sp, #12]
 8004166:	1a5b      	subs	r3, r3, r1
 8004168:	42ab      	cmp	r3, r5
 800416a:	dcf2      	bgt.n	8004152 <_printf_i+0x21e>
 800416c:	e7eb      	b.n	8004146 <_printf_i+0x212>
 800416e:	2500      	movs	r5, #0
 8004170:	f104 0619 	add.w	r6, r4, #25
 8004174:	e7f5      	b.n	8004162 <_printf_i+0x22e>
 8004176:	bf00      	nop
 8004178:	08007094 	.word	0x08007094
 800417c:	080070a5 	.word	0x080070a5

08004180 <siprintf>:
 8004180:	b40e      	push	{r1, r2, r3}
 8004182:	b500      	push	{lr}
 8004184:	b09c      	sub	sp, #112	; 0x70
 8004186:	ab1d      	add	r3, sp, #116	; 0x74
 8004188:	9002      	str	r0, [sp, #8]
 800418a:	9006      	str	r0, [sp, #24]
 800418c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004190:	4809      	ldr	r0, [pc, #36]	; (80041b8 <siprintf+0x38>)
 8004192:	9107      	str	r1, [sp, #28]
 8004194:	9104      	str	r1, [sp, #16]
 8004196:	4909      	ldr	r1, [pc, #36]	; (80041bc <siprintf+0x3c>)
 8004198:	f853 2b04 	ldr.w	r2, [r3], #4
 800419c:	9105      	str	r1, [sp, #20]
 800419e:	6800      	ldr	r0, [r0, #0]
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	a902      	add	r1, sp, #8
 80041a4:	f001 fbf0 	bl	8005988 <_svfiprintf_r>
 80041a8:	9b02      	ldr	r3, [sp, #8]
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	b01c      	add	sp, #112	; 0x70
 80041b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041b4:	b003      	add	sp, #12
 80041b6:	4770      	bx	lr
 80041b8:	20000008 	.word	0x20000008
 80041bc:	ffff0208 	.word	0xffff0208

080041c0 <siscanf>:
 80041c0:	b40e      	push	{r1, r2, r3}
 80041c2:	b510      	push	{r4, lr}
 80041c4:	b09f      	sub	sp, #124	; 0x7c
 80041c6:	ac21      	add	r4, sp, #132	; 0x84
 80041c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80041cc:	f854 2b04 	ldr.w	r2, [r4], #4
 80041d0:	9201      	str	r2, [sp, #4]
 80041d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80041d6:	9004      	str	r0, [sp, #16]
 80041d8:	9008      	str	r0, [sp, #32]
 80041da:	f7fb fff9 	bl	80001d0 <strlen>
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <siscanf+0x50>)
 80041e0:	9005      	str	r0, [sp, #20]
 80041e2:	9009      	str	r0, [sp, #36]	; 0x24
 80041e4:	930d      	str	r3, [sp, #52]	; 0x34
 80041e6:	480b      	ldr	r0, [pc, #44]	; (8004214 <siscanf+0x54>)
 80041e8:	9a01      	ldr	r2, [sp, #4]
 80041ea:	6800      	ldr	r0, [r0, #0]
 80041ec:	9403      	str	r4, [sp, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9311      	str	r3, [sp, #68]	; 0x44
 80041f2:	9316      	str	r3, [sp, #88]	; 0x58
 80041f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80041fc:	a904      	add	r1, sp, #16
 80041fe:	4623      	mov	r3, r4
 8004200:	f001 fd1c 	bl	8005c3c <__ssvfiscanf_r>
 8004204:	b01f      	add	sp, #124	; 0x7c
 8004206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800420a:	b003      	add	sp, #12
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	0800423b 	.word	0x0800423b
 8004214:	20000008 	.word	0x20000008

08004218 <__sread>:
 8004218:	b510      	push	{r4, lr}
 800421a:	460c      	mov	r4, r1
 800421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004220:	f001 ffd0 	bl	80061c4 <_read_r>
 8004224:	2800      	cmp	r0, #0
 8004226:	bfab      	itete	ge
 8004228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800422a:	89a3      	ldrhlt	r3, [r4, #12]
 800422c:	181b      	addge	r3, r3, r0
 800422e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004232:	bfac      	ite	ge
 8004234:	6563      	strge	r3, [r4, #84]	; 0x54
 8004236:	81a3      	strhlt	r3, [r4, #12]
 8004238:	bd10      	pop	{r4, pc}

0800423a <__seofread>:
 800423a:	2000      	movs	r0, #0
 800423c:	4770      	bx	lr

0800423e <__swrite>:
 800423e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004242:	461f      	mov	r7, r3
 8004244:	898b      	ldrh	r3, [r1, #12]
 8004246:	05db      	lsls	r3, r3, #23
 8004248:	4605      	mov	r5, r0
 800424a:	460c      	mov	r4, r1
 800424c:	4616      	mov	r6, r2
 800424e:	d505      	bpl.n	800425c <__swrite+0x1e>
 8004250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004254:	2302      	movs	r3, #2
 8004256:	2200      	movs	r2, #0
 8004258:	f000 feda 	bl	8005010 <_lseek_r>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004266:	81a3      	strh	r3, [r4, #12]
 8004268:	4632      	mov	r2, r6
 800426a:	463b      	mov	r3, r7
 800426c:	4628      	mov	r0, r5
 800426e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004272:	f000 b82d 	b.w	80042d0 <_write_r>

08004276 <__sseek>:
 8004276:	b510      	push	{r4, lr}
 8004278:	460c      	mov	r4, r1
 800427a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800427e:	f000 fec7 	bl	8005010 <_lseek_r>
 8004282:	1c43      	adds	r3, r0, #1
 8004284:	89a3      	ldrh	r3, [r4, #12]
 8004286:	bf15      	itete	ne
 8004288:	6560      	strne	r0, [r4, #84]	; 0x54
 800428a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800428e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004292:	81a3      	strheq	r3, [r4, #12]
 8004294:	bf18      	it	ne
 8004296:	81a3      	strhne	r3, [r4, #12]
 8004298:	bd10      	pop	{r4, pc}

0800429a <__sclose>:
 800429a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429e:	f000 b829 	b.w	80042f4 <_close_r>

080042a2 <strstr>:
 80042a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a4:	780c      	ldrb	r4, [r1, #0]
 80042a6:	b164      	cbz	r4, 80042c2 <strstr+0x20>
 80042a8:	4603      	mov	r3, r0
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	1c5e      	adds	r6, r3, #1
 80042b0:	b90a      	cbnz	r2, 80042b6 <strstr+0x14>
 80042b2:	4610      	mov	r0, r2
 80042b4:	e005      	b.n	80042c2 <strstr+0x20>
 80042b6:	4294      	cmp	r4, r2
 80042b8:	d108      	bne.n	80042cc <strstr+0x2a>
 80042ba:	460d      	mov	r5, r1
 80042bc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80042c0:	b902      	cbnz	r2, 80042c4 <strstr+0x22>
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80042c8:	4297      	cmp	r7, r2
 80042ca:	d0f7      	beq.n	80042bc <strstr+0x1a>
 80042cc:	4633      	mov	r3, r6
 80042ce:	e7ec      	b.n	80042aa <strstr+0x8>

080042d0 <_write_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4d07      	ldr	r5, [pc, #28]	; (80042f0 <_write_r+0x20>)
 80042d4:	4604      	mov	r4, r0
 80042d6:	4608      	mov	r0, r1
 80042d8:	4611      	mov	r1, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	602a      	str	r2, [r5, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7fd fa01 	bl	80016e6 <_write>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_write_r+0x1e>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_write_r+0x1e>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	20000310 	.word	0x20000310

080042f4 <_close_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4d06      	ldr	r5, [pc, #24]	; (8004310 <_close_r+0x1c>)
 80042f8:	2300      	movs	r3, #0
 80042fa:	4604      	mov	r4, r0
 80042fc:	4608      	mov	r0, r1
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	f7fd fa0d 	bl	800171e <_close>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_close_r+0x1a>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	b103      	cbz	r3, 800430e <_close_r+0x1a>
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	20000310 	.word	0x20000310

08004314 <quorem>:
 8004314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004318:	6903      	ldr	r3, [r0, #16]
 800431a:	690c      	ldr	r4, [r1, #16]
 800431c:	42a3      	cmp	r3, r4
 800431e:	4607      	mov	r7, r0
 8004320:	f2c0 8081 	blt.w	8004426 <quorem+0x112>
 8004324:	3c01      	subs	r4, #1
 8004326:	f101 0814 	add.w	r8, r1, #20
 800432a:	f100 0514 	add.w	r5, r0, #20
 800432e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800433c:	3301      	adds	r3, #1
 800433e:	429a      	cmp	r2, r3
 8004340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004348:	fbb2 f6f3 	udiv	r6, r2, r3
 800434c:	d331      	bcc.n	80043b2 <quorem+0x9e>
 800434e:	f04f 0e00 	mov.w	lr, #0
 8004352:	4640      	mov	r0, r8
 8004354:	46ac      	mov	ip, r5
 8004356:	46f2      	mov	sl, lr
 8004358:	f850 2b04 	ldr.w	r2, [r0], #4
 800435c:	b293      	uxth	r3, r2
 800435e:	fb06 e303 	mla	r3, r6, r3, lr
 8004362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004366:	b29b      	uxth	r3, r3
 8004368:	ebaa 0303 	sub.w	r3, sl, r3
 800436c:	0c12      	lsrs	r2, r2, #16
 800436e:	f8dc a000 	ldr.w	sl, [ip]
 8004372:	fb06 e202 	mla	r2, r6, r2, lr
 8004376:	fa13 f38a 	uxtah	r3, r3, sl
 800437a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800437e:	fa1f fa82 	uxth.w	sl, r2
 8004382:	f8dc 2000 	ldr.w	r2, [ip]
 8004386:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800438a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800438e:	b29b      	uxth	r3, r3
 8004390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004394:	4581      	cmp	r9, r0
 8004396:	f84c 3b04 	str.w	r3, [ip], #4
 800439a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800439e:	d2db      	bcs.n	8004358 <quorem+0x44>
 80043a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80043a4:	b92b      	cbnz	r3, 80043b2 <quorem+0x9e>
 80043a6:	9b01      	ldr	r3, [sp, #4]
 80043a8:	3b04      	subs	r3, #4
 80043aa:	429d      	cmp	r5, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	d32e      	bcc.n	800440e <quorem+0xfa>
 80043b0:	613c      	str	r4, [r7, #16]
 80043b2:	4638      	mov	r0, r7
 80043b4:	f001 f8d2 	bl	800555c <__mcmp>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	db24      	blt.n	8004406 <quorem+0xf2>
 80043bc:	3601      	adds	r6, #1
 80043be:	4628      	mov	r0, r5
 80043c0:	f04f 0c00 	mov.w	ip, #0
 80043c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80043c8:	f8d0 e000 	ldr.w	lr, [r0]
 80043cc:	b293      	uxth	r3, r2
 80043ce:	ebac 0303 	sub.w	r3, ip, r3
 80043d2:	0c12      	lsrs	r2, r2, #16
 80043d4:	fa13 f38e 	uxtah	r3, r3, lr
 80043d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80043dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043e6:	45c1      	cmp	r9, r8
 80043e8:	f840 3b04 	str.w	r3, [r0], #4
 80043ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80043f0:	d2e8      	bcs.n	80043c4 <quorem+0xb0>
 80043f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043fa:	b922      	cbnz	r2, 8004406 <quorem+0xf2>
 80043fc:	3b04      	subs	r3, #4
 80043fe:	429d      	cmp	r5, r3
 8004400:	461a      	mov	r2, r3
 8004402:	d30a      	bcc.n	800441a <quorem+0x106>
 8004404:	613c      	str	r4, [r7, #16]
 8004406:	4630      	mov	r0, r6
 8004408:	b003      	add	sp, #12
 800440a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	3b04      	subs	r3, #4
 8004412:	2a00      	cmp	r2, #0
 8004414:	d1cc      	bne.n	80043b0 <quorem+0x9c>
 8004416:	3c01      	subs	r4, #1
 8004418:	e7c7      	b.n	80043aa <quorem+0x96>
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	3b04      	subs	r3, #4
 800441e:	2a00      	cmp	r2, #0
 8004420:	d1f0      	bne.n	8004404 <quorem+0xf0>
 8004422:	3c01      	subs	r4, #1
 8004424:	e7eb      	b.n	80043fe <quorem+0xea>
 8004426:	2000      	movs	r0, #0
 8004428:	e7ee      	b.n	8004408 <quorem+0xf4>
 800442a:	0000      	movs	r0, r0
 800442c:	0000      	movs	r0, r0
	...

08004430 <_dtoa_r>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	ed2d 8b02 	vpush	{d8}
 8004438:	ec57 6b10 	vmov	r6, r7, d0
 800443c:	b095      	sub	sp, #84	; 0x54
 800443e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004444:	9105      	str	r1, [sp, #20]
 8004446:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800444a:	4604      	mov	r4, r0
 800444c:	9209      	str	r2, [sp, #36]	; 0x24
 800444e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004450:	b975      	cbnz	r5, 8004470 <_dtoa_r+0x40>
 8004452:	2010      	movs	r0, #16
 8004454:	f000 fdee 	bl	8005034 <malloc>
 8004458:	4602      	mov	r2, r0
 800445a:	6260      	str	r0, [r4, #36]	; 0x24
 800445c:	b920      	cbnz	r0, 8004468 <_dtoa_r+0x38>
 800445e:	4bb2      	ldr	r3, [pc, #712]	; (8004728 <_dtoa_r+0x2f8>)
 8004460:	21ea      	movs	r1, #234	; 0xea
 8004462:	48b2      	ldr	r0, [pc, #712]	; (800472c <_dtoa_r+0x2fc>)
 8004464:	f002 f848 	bl	80064f8 <__assert_func>
 8004468:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800446c:	6005      	str	r5, [r0, #0]
 800446e:	60c5      	str	r5, [r0, #12]
 8004470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	b151      	cbz	r1, 800448c <_dtoa_r+0x5c>
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	604a      	str	r2, [r1, #4]
 800447a:	2301      	movs	r3, #1
 800447c:	4093      	lsls	r3, r2
 800447e:	608b      	str	r3, [r1, #8]
 8004480:	4620      	mov	r0, r4
 8004482:	f000 fe2d 	bl	80050e0 <_Bfree>
 8004486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	1e3b      	subs	r3, r7, #0
 800448e:	bfb9      	ittee	lt
 8004490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004494:	9303      	strlt	r3, [sp, #12]
 8004496:	2300      	movge	r3, #0
 8004498:	f8c8 3000 	strge.w	r3, [r8]
 800449c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80044a0:	4ba3      	ldr	r3, [pc, #652]	; (8004730 <_dtoa_r+0x300>)
 80044a2:	bfbc      	itt	lt
 80044a4:	2201      	movlt	r2, #1
 80044a6:	f8c8 2000 	strlt.w	r2, [r8]
 80044aa:	ea33 0309 	bics.w	r3, r3, r9
 80044ae:	d11b      	bne.n	80044e8 <_dtoa_r+0xb8>
 80044b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80044bc:	4333      	orrs	r3, r6
 80044be:	f000 857a 	beq.w	8004fb6 <_dtoa_r+0xb86>
 80044c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044c4:	b963      	cbnz	r3, 80044e0 <_dtoa_r+0xb0>
 80044c6:	4b9b      	ldr	r3, [pc, #620]	; (8004734 <_dtoa_r+0x304>)
 80044c8:	e024      	b.n	8004514 <_dtoa_r+0xe4>
 80044ca:	4b9b      	ldr	r3, [pc, #620]	; (8004738 <_dtoa_r+0x308>)
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	9800      	ldr	r0, [sp, #0]
 80044d6:	b015      	add	sp, #84	; 0x54
 80044d8:	ecbd 8b02 	vpop	{d8}
 80044dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e0:	4b94      	ldr	r3, [pc, #592]	; (8004734 <_dtoa_r+0x304>)
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	3303      	adds	r3, #3
 80044e6:	e7f3      	b.n	80044d0 <_dtoa_r+0xa0>
 80044e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	ec51 0b17 	vmov	r0, r1, d7
 80044f2:	2300      	movs	r3, #0
 80044f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80044f8:	f7fc fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80044fc:	4680      	mov	r8, r0
 80044fe:	b158      	cbz	r0, 8004518 <_dtoa_r+0xe8>
 8004500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004502:	2301      	movs	r3, #1
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8551 	beq.w	8004fb0 <_dtoa_r+0xb80>
 800450e:	488b      	ldr	r0, [pc, #556]	; (800473c <_dtoa_r+0x30c>)
 8004510:	6018      	str	r0, [r3, #0]
 8004512:	1e43      	subs	r3, r0, #1
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	e7dd      	b.n	80044d4 <_dtoa_r+0xa4>
 8004518:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800451c:	aa12      	add	r2, sp, #72	; 0x48
 800451e:	a913      	add	r1, sp, #76	; 0x4c
 8004520:	4620      	mov	r0, r4
 8004522:	f001 f8bf 	bl	80056a4 <__d2b>
 8004526:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800452a:	4683      	mov	fp, r0
 800452c:	2d00      	cmp	r5, #0
 800452e:	d07c      	beq.n	800462a <_dtoa_r+0x1fa>
 8004530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004532:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800453a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800453e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004542:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800454a:	4b7d      	ldr	r3, [pc, #500]	; (8004740 <_dtoa_r+0x310>)
 800454c:	2200      	movs	r2, #0
 800454e:	4630      	mov	r0, r6
 8004550:	4639      	mov	r1, r7
 8004552:	f7fb fe99 	bl	8000288 <__aeabi_dsub>
 8004556:	a36e      	add	r3, pc, #440	; (adr r3, 8004710 <_dtoa_r+0x2e0>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fc f84c 	bl	80005f8 <__aeabi_dmul>
 8004560:	a36d      	add	r3, pc, #436	; (adr r3, 8004718 <_dtoa_r+0x2e8>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f7fb fe91 	bl	800028c <__adddf3>
 800456a:	4606      	mov	r6, r0
 800456c:	4628      	mov	r0, r5
 800456e:	460f      	mov	r7, r1
 8004570:	f7fb ffd8 	bl	8000524 <__aeabi_i2d>
 8004574:	a36a      	add	r3, pc, #424	; (adr r3, 8004720 <_dtoa_r+0x2f0>)
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f7fc f83d 	bl	80005f8 <__aeabi_dmul>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4630      	mov	r0, r6
 8004584:	4639      	mov	r1, r7
 8004586:	f7fb fe81 	bl	800028c <__adddf3>
 800458a:	4606      	mov	r6, r0
 800458c:	460f      	mov	r7, r1
 800458e:	f7fc fae3 	bl	8000b58 <__aeabi_d2iz>
 8004592:	2200      	movs	r2, #0
 8004594:	4682      	mov	sl, r0
 8004596:	2300      	movs	r3, #0
 8004598:	4630      	mov	r0, r6
 800459a:	4639      	mov	r1, r7
 800459c:	f7fc fa9e 	bl	8000adc <__aeabi_dcmplt>
 80045a0:	b148      	cbz	r0, 80045b6 <_dtoa_r+0x186>
 80045a2:	4650      	mov	r0, sl
 80045a4:	f7fb ffbe 	bl	8000524 <__aeabi_i2d>
 80045a8:	4632      	mov	r2, r6
 80045aa:	463b      	mov	r3, r7
 80045ac:	f7fc fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80045b0:	b908      	cbnz	r0, 80045b6 <_dtoa_r+0x186>
 80045b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045b6:	f1ba 0f16 	cmp.w	sl, #22
 80045ba:	d854      	bhi.n	8004666 <_dtoa_r+0x236>
 80045bc:	4b61      	ldr	r3, [pc, #388]	; (8004744 <_dtoa_r+0x314>)
 80045be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045ca:	f7fc fa87 	bl	8000adc <__aeabi_dcmplt>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d04b      	beq.n	800466a <_dtoa_r+0x23a>
 80045d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045d6:	2300      	movs	r3, #0
 80045d8:	930e      	str	r3, [sp, #56]	; 0x38
 80045da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045dc:	1b5d      	subs	r5, r3, r5
 80045de:	1e6b      	subs	r3, r5, #1
 80045e0:	9304      	str	r3, [sp, #16]
 80045e2:	bf43      	ittte	mi
 80045e4:	2300      	movmi	r3, #0
 80045e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80045ea:	9304      	strmi	r3, [sp, #16]
 80045ec:	f04f 0800 	movpl.w	r8, #0
 80045f0:	f1ba 0f00 	cmp.w	sl, #0
 80045f4:	db3b      	blt.n	800466e <_dtoa_r+0x23e>
 80045f6:	9b04      	ldr	r3, [sp, #16]
 80045f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80045fc:	4453      	add	r3, sl
 80045fe:	9304      	str	r3, [sp, #16]
 8004600:	2300      	movs	r3, #0
 8004602:	9306      	str	r3, [sp, #24]
 8004604:	9b05      	ldr	r3, [sp, #20]
 8004606:	2b09      	cmp	r3, #9
 8004608:	d869      	bhi.n	80046de <_dtoa_r+0x2ae>
 800460a:	2b05      	cmp	r3, #5
 800460c:	bfc4      	itt	gt
 800460e:	3b04      	subgt	r3, #4
 8004610:	9305      	strgt	r3, [sp, #20]
 8004612:	9b05      	ldr	r3, [sp, #20]
 8004614:	f1a3 0302 	sub.w	r3, r3, #2
 8004618:	bfcc      	ite	gt
 800461a:	2500      	movgt	r5, #0
 800461c:	2501      	movle	r5, #1
 800461e:	2b03      	cmp	r3, #3
 8004620:	d869      	bhi.n	80046f6 <_dtoa_r+0x2c6>
 8004622:	e8df f003 	tbb	[pc, r3]
 8004626:	4e2c      	.short	0x4e2c
 8004628:	5a4c      	.short	0x5a4c
 800462a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800462e:	441d      	add	r5, r3
 8004630:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004634:	2b20      	cmp	r3, #32
 8004636:	bfc1      	itttt	gt
 8004638:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800463c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004640:	fa09 f303 	lslgt.w	r3, r9, r3
 8004644:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004648:	bfda      	itte	le
 800464a:	f1c3 0320 	rsble	r3, r3, #32
 800464e:	fa06 f003 	lslle.w	r0, r6, r3
 8004652:	4318      	orrgt	r0, r3
 8004654:	f7fb ff56 	bl	8000504 <__aeabi_ui2d>
 8004658:	2301      	movs	r3, #1
 800465a:	4606      	mov	r6, r0
 800465c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004660:	3d01      	subs	r5, #1
 8004662:	9310      	str	r3, [sp, #64]	; 0x40
 8004664:	e771      	b.n	800454a <_dtoa_r+0x11a>
 8004666:	2301      	movs	r3, #1
 8004668:	e7b6      	b.n	80045d8 <_dtoa_r+0x1a8>
 800466a:	900e      	str	r0, [sp, #56]	; 0x38
 800466c:	e7b5      	b.n	80045da <_dtoa_r+0x1aa>
 800466e:	f1ca 0300 	rsb	r3, sl, #0
 8004672:	9306      	str	r3, [sp, #24]
 8004674:	2300      	movs	r3, #0
 8004676:	eba8 080a 	sub.w	r8, r8, sl
 800467a:	930d      	str	r3, [sp, #52]	; 0x34
 800467c:	e7c2      	b.n	8004604 <_dtoa_r+0x1d4>
 800467e:	2300      	movs	r3, #0
 8004680:	9308      	str	r3, [sp, #32]
 8004682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004684:	2b00      	cmp	r3, #0
 8004686:	dc39      	bgt.n	80046fc <_dtoa_r+0x2cc>
 8004688:	f04f 0901 	mov.w	r9, #1
 800468c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004690:	464b      	mov	r3, r9
 8004692:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004696:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004698:	2200      	movs	r2, #0
 800469a:	6042      	str	r2, [r0, #4]
 800469c:	2204      	movs	r2, #4
 800469e:	f102 0614 	add.w	r6, r2, #20
 80046a2:	429e      	cmp	r6, r3
 80046a4:	6841      	ldr	r1, [r0, #4]
 80046a6:	d92f      	bls.n	8004708 <_dtoa_r+0x2d8>
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 fcd9 	bl	8005060 <_Balloc>
 80046ae:	9000      	str	r0, [sp, #0]
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d14b      	bne.n	800474c <_dtoa_r+0x31c>
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <_dtoa_r+0x318>)
 80046b6:	4602      	mov	r2, r0
 80046b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80046bc:	e6d1      	b.n	8004462 <_dtoa_r+0x32>
 80046be:	2301      	movs	r3, #1
 80046c0:	e7de      	b.n	8004680 <_dtoa_r+0x250>
 80046c2:	2300      	movs	r3, #0
 80046c4:	9308      	str	r3, [sp, #32]
 80046c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c8:	eb0a 0903 	add.w	r9, sl, r3
 80046cc:	f109 0301 	add.w	r3, r9, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	bfb8      	it	lt
 80046d6:	2301      	movlt	r3, #1
 80046d8:	e7dd      	b.n	8004696 <_dtoa_r+0x266>
 80046da:	2301      	movs	r3, #1
 80046dc:	e7f2      	b.n	80046c4 <_dtoa_r+0x294>
 80046de:	2501      	movs	r5, #1
 80046e0:	2300      	movs	r3, #0
 80046e2:	9305      	str	r3, [sp, #20]
 80046e4:	9508      	str	r5, [sp, #32]
 80046e6:	f04f 39ff 	mov.w	r9, #4294967295
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80046f0:	2312      	movs	r3, #18
 80046f2:	9209      	str	r2, [sp, #36]	; 0x24
 80046f4:	e7cf      	b.n	8004696 <_dtoa_r+0x266>
 80046f6:	2301      	movs	r3, #1
 80046f8:	9308      	str	r3, [sp, #32]
 80046fa:	e7f4      	b.n	80046e6 <_dtoa_r+0x2b6>
 80046fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004700:	f8cd 9004 	str.w	r9, [sp, #4]
 8004704:	464b      	mov	r3, r9
 8004706:	e7c6      	b.n	8004696 <_dtoa_r+0x266>
 8004708:	3101      	adds	r1, #1
 800470a:	6041      	str	r1, [r0, #4]
 800470c:	0052      	lsls	r2, r2, #1
 800470e:	e7c6      	b.n	800469e <_dtoa_r+0x26e>
 8004710:	636f4361 	.word	0x636f4361
 8004714:	3fd287a7 	.word	0x3fd287a7
 8004718:	8b60c8b3 	.word	0x8b60c8b3
 800471c:	3fc68a28 	.word	0x3fc68a28
 8004720:	509f79fb 	.word	0x509f79fb
 8004724:	3fd34413 	.word	0x3fd34413
 8004728:	080070c3 	.word	0x080070c3
 800472c:	080070da 	.word	0x080070da
 8004730:	7ff00000 	.word	0x7ff00000
 8004734:	080070bf 	.word	0x080070bf
 8004738:	080070b6 	.word	0x080070b6
 800473c:	080072c2 	.word	0x080072c2
 8004740:	3ff80000 	.word	0x3ff80000
 8004744:	080071d8 	.word	0x080071d8
 8004748:	08007139 	.word	0x08007139
 800474c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800474e:	9a00      	ldr	r2, [sp, #0]
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	9b01      	ldr	r3, [sp, #4]
 8004754:	2b0e      	cmp	r3, #14
 8004756:	f200 80ad 	bhi.w	80048b4 <_dtoa_r+0x484>
 800475a:	2d00      	cmp	r5, #0
 800475c:	f000 80aa 	beq.w	80048b4 <_dtoa_r+0x484>
 8004760:	f1ba 0f00 	cmp.w	sl, #0
 8004764:	dd36      	ble.n	80047d4 <_dtoa_r+0x3a4>
 8004766:	4ac3      	ldr	r2, [pc, #780]	; (8004a74 <_dtoa_r+0x644>)
 8004768:	f00a 030f 	and.w	r3, sl, #15
 800476c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004770:	ed93 7b00 	vldr	d7, [r3]
 8004774:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004778:	ea4f 172a 	mov.w	r7, sl, asr #4
 800477c:	eeb0 8a47 	vmov.f32	s16, s14
 8004780:	eef0 8a67 	vmov.f32	s17, s15
 8004784:	d016      	beq.n	80047b4 <_dtoa_r+0x384>
 8004786:	4bbc      	ldr	r3, [pc, #752]	; (8004a78 <_dtoa_r+0x648>)
 8004788:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800478c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004790:	f7fc f85c 	bl	800084c <__aeabi_ddiv>
 8004794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004798:	f007 070f 	and.w	r7, r7, #15
 800479c:	2503      	movs	r5, #3
 800479e:	4eb6      	ldr	r6, [pc, #728]	; (8004a78 <_dtoa_r+0x648>)
 80047a0:	b957      	cbnz	r7, 80047b8 <_dtoa_r+0x388>
 80047a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047a6:	ec53 2b18 	vmov	r2, r3, d8
 80047aa:	f7fc f84f 	bl	800084c <__aeabi_ddiv>
 80047ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047b2:	e029      	b.n	8004808 <_dtoa_r+0x3d8>
 80047b4:	2502      	movs	r5, #2
 80047b6:	e7f2      	b.n	800479e <_dtoa_r+0x36e>
 80047b8:	07f9      	lsls	r1, r7, #31
 80047ba:	d508      	bpl.n	80047ce <_dtoa_r+0x39e>
 80047bc:	ec51 0b18 	vmov	r0, r1, d8
 80047c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047c4:	f7fb ff18 	bl	80005f8 <__aeabi_dmul>
 80047c8:	ec41 0b18 	vmov	d8, r0, r1
 80047cc:	3501      	adds	r5, #1
 80047ce:	107f      	asrs	r7, r7, #1
 80047d0:	3608      	adds	r6, #8
 80047d2:	e7e5      	b.n	80047a0 <_dtoa_r+0x370>
 80047d4:	f000 80a6 	beq.w	8004924 <_dtoa_r+0x4f4>
 80047d8:	f1ca 0600 	rsb	r6, sl, #0
 80047dc:	4ba5      	ldr	r3, [pc, #660]	; (8004a74 <_dtoa_r+0x644>)
 80047de:	4fa6      	ldr	r7, [pc, #664]	; (8004a78 <_dtoa_r+0x648>)
 80047e0:	f006 020f 	and.w	r2, r6, #15
 80047e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047f0:	f7fb ff02 	bl	80005f8 <__aeabi_dmul>
 80047f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047f8:	1136      	asrs	r6, r6, #4
 80047fa:	2300      	movs	r3, #0
 80047fc:	2502      	movs	r5, #2
 80047fe:	2e00      	cmp	r6, #0
 8004800:	f040 8085 	bne.w	800490e <_dtoa_r+0x4de>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1d2      	bne.n	80047ae <_dtoa_r+0x37e>
 8004808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 808c 	beq.w	8004928 <_dtoa_r+0x4f8>
 8004810:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004814:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <_dtoa_r+0x64c>)
 8004816:	2200      	movs	r2, #0
 8004818:	4630      	mov	r0, r6
 800481a:	4639      	mov	r1, r7
 800481c:	f7fc f95e 	bl	8000adc <__aeabi_dcmplt>
 8004820:	2800      	cmp	r0, #0
 8004822:	f000 8081 	beq.w	8004928 <_dtoa_r+0x4f8>
 8004826:	9b01      	ldr	r3, [sp, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d07d      	beq.n	8004928 <_dtoa_r+0x4f8>
 800482c:	f1b9 0f00 	cmp.w	r9, #0
 8004830:	dd3c      	ble.n	80048ac <_dtoa_r+0x47c>
 8004832:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004836:	9307      	str	r3, [sp, #28]
 8004838:	2200      	movs	r2, #0
 800483a:	4b91      	ldr	r3, [pc, #580]	; (8004a80 <_dtoa_r+0x650>)
 800483c:	4630      	mov	r0, r6
 800483e:	4639      	mov	r1, r7
 8004840:	f7fb feda 	bl	80005f8 <__aeabi_dmul>
 8004844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004848:	3501      	adds	r5, #1
 800484a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800484e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004852:	4628      	mov	r0, r5
 8004854:	f7fb fe66 	bl	8000524 <__aeabi_i2d>
 8004858:	4632      	mov	r2, r6
 800485a:	463b      	mov	r3, r7
 800485c:	f7fb fecc 	bl	80005f8 <__aeabi_dmul>
 8004860:	4b88      	ldr	r3, [pc, #544]	; (8004a84 <_dtoa_r+0x654>)
 8004862:	2200      	movs	r2, #0
 8004864:	f7fb fd12 	bl	800028c <__adddf3>
 8004868:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800486c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004870:	9303      	str	r3, [sp, #12]
 8004872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004874:	2b00      	cmp	r3, #0
 8004876:	d15c      	bne.n	8004932 <_dtoa_r+0x502>
 8004878:	4b83      	ldr	r3, [pc, #524]	; (8004a88 <_dtoa_r+0x658>)
 800487a:	2200      	movs	r2, #0
 800487c:	4630      	mov	r0, r6
 800487e:	4639      	mov	r1, r7
 8004880:	f7fb fd02 	bl	8000288 <__aeabi_dsub>
 8004884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004888:	4606      	mov	r6, r0
 800488a:	460f      	mov	r7, r1
 800488c:	f7fc f944 	bl	8000b18 <__aeabi_dcmpgt>
 8004890:	2800      	cmp	r0, #0
 8004892:	f040 8296 	bne.w	8004dc2 <_dtoa_r+0x992>
 8004896:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800489a:	4630      	mov	r0, r6
 800489c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80048a0:	4639      	mov	r1, r7
 80048a2:	f7fc f91b 	bl	8000adc <__aeabi_dcmplt>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f040 8288 	bne.w	8004dbc <_dtoa_r+0x98c>
 80048ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f2c0 8158 	blt.w	8004b6c <_dtoa_r+0x73c>
 80048bc:	f1ba 0f0e 	cmp.w	sl, #14
 80048c0:	f300 8154 	bgt.w	8004b6c <_dtoa_r+0x73c>
 80048c4:	4b6b      	ldr	r3, [pc, #428]	; (8004a74 <_dtoa_r+0x644>)
 80048c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80048ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f280 80e3 	bge.w	8004a9c <_dtoa_r+0x66c>
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f300 80df 	bgt.w	8004a9c <_dtoa_r+0x66c>
 80048de:	f040 826d 	bne.w	8004dbc <_dtoa_r+0x98c>
 80048e2:	4b69      	ldr	r3, [pc, #420]	; (8004a88 <_dtoa_r+0x658>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	4640      	mov	r0, r8
 80048e8:	4649      	mov	r1, r9
 80048ea:	f7fb fe85 	bl	80005f8 <__aeabi_dmul>
 80048ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048f2:	f7fc f907 	bl	8000b04 <__aeabi_dcmpge>
 80048f6:	9e01      	ldr	r6, [sp, #4]
 80048f8:	4637      	mov	r7, r6
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f040 8243 	bne.w	8004d86 <_dtoa_r+0x956>
 8004900:	9d00      	ldr	r5, [sp, #0]
 8004902:	2331      	movs	r3, #49	; 0x31
 8004904:	f805 3b01 	strb.w	r3, [r5], #1
 8004908:	f10a 0a01 	add.w	sl, sl, #1
 800490c:	e23f      	b.n	8004d8e <_dtoa_r+0x95e>
 800490e:	07f2      	lsls	r2, r6, #31
 8004910:	d505      	bpl.n	800491e <_dtoa_r+0x4ee>
 8004912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004916:	f7fb fe6f 	bl	80005f8 <__aeabi_dmul>
 800491a:	3501      	adds	r5, #1
 800491c:	2301      	movs	r3, #1
 800491e:	1076      	asrs	r6, r6, #1
 8004920:	3708      	adds	r7, #8
 8004922:	e76c      	b.n	80047fe <_dtoa_r+0x3ce>
 8004924:	2502      	movs	r5, #2
 8004926:	e76f      	b.n	8004808 <_dtoa_r+0x3d8>
 8004928:	9b01      	ldr	r3, [sp, #4]
 800492a:	f8cd a01c 	str.w	sl, [sp, #28]
 800492e:	930c      	str	r3, [sp, #48]	; 0x30
 8004930:	e78d      	b.n	800484e <_dtoa_r+0x41e>
 8004932:	9900      	ldr	r1, [sp, #0]
 8004934:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004938:	4b4e      	ldr	r3, [pc, #312]	; (8004a74 <_dtoa_r+0x644>)
 800493a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800493e:	4401      	add	r1, r0
 8004940:	9102      	str	r1, [sp, #8]
 8004942:	9908      	ldr	r1, [sp, #32]
 8004944:	eeb0 8a47 	vmov.f32	s16, s14
 8004948:	eef0 8a67 	vmov.f32	s17, s15
 800494c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004950:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004954:	2900      	cmp	r1, #0
 8004956:	d045      	beq.n	80049e4 <_dtoa_r+0x5b4>
 8004958:	494c      	ldr	r1, [pc, #304]	; (8004a8c <_dtoa_r+0x65c>)
 800495a:	2000      	movs	r0, #0
 800495c:	f7fb ff76 	bl	800084c <__aeabi_ddiv>
 8004960:	ec53 2b18 	vmov	r2, r3, d8
 8004964:	f7fb fc90 	bl	8000288 <__aeabi_dsub>
 8004968:	9d00      	ldr	r5, [sp, #0]
 800496a:	ec41 0b18 	vmov	d8, r0, r1
 800496e:	4639      	mov	r1, r7
 8004970:	4630      	mov	r0, r6
 8004972:	f7fc f8f1 	bl	8000b58 <__aeabi_d2iz>
 8004976:	900c      	str	r0, [sp, #48]	; 0x30
 8004978:	f7fb fdd4 	bl	8000524 <__aeabi_i2d>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4630      	mov	r0, r6
 8004982:	4639      	mov	r1, r7
 8004984:	f7fb fc80 	bl	8000288 <__aeabi_dsub>
 8004988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800498a:	3330      	adds	r3, #48	; 0x30
 800498c:	f805 3b01 	strb.w	r3, [r5], #1
 8004990:	ec53 2b18 	vmov	r2, r3, d8
 8004994:	4606      	mov	r6, r0
 8004996:	460f      	mov	r7, r1
 8004998:	f7fc f8a0 	bl	8000adc <__aeabi_dcmplt>
 800499c:	2800      	cmp	r0, #0
 800499e:	d165      	bne.n	8004a6c <_dtoa_r+0x63c>
 80049a0:	4632      	mov	r2, r6
 80049a2:	463b      	mov	r3, r7
 80049a4:	4935      	ldr	r1, [pc, #212]	; (8004a7c <_dtoa_r+0x64c>)
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fb fc6e 	bl	8000288 <__aeabi_dsub>
 80049ac:	ec53 2b18 	vmov	r2, r3, d8
 80049b0:	f7fc f894 	bl	8000adc <__aeabi_dcmplt>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	f040 80b9 	bne.w	8004b2c <_dtoa_r+0x6fc>
 80049ba:	9b02      	ldr	r3, [sp, #8]
 80049bc:	429d      	cmp	r5, r3
 80049be:	f43f af75 	beq.w	80048ac <_dtoa_r+0x47c>
 80049c2:	4b2f      	ldr	r3, [pc, #188]	; (8004a80 <_dtoa_r+0x650>)
 80049c4:	ec51 0b18 	vmov	r0, r1, d8
 80049c8:	2200      	movs	r2, #0
 80049ca:	f7fb fe15 	bl	80005f8 <__aeabi_dmul>
 80049ce:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <_dtoa_r+0x650>)
 80049d0:	ec41 0b18 	vmov	d8, r0, r1
 80049d4:	2200      	movs	r2, #0
 80049d6:	4630      	mov	r0, r6
 80049d8:	4639      	mov	r1, r7
 80049da:	f7fb fe0d 	bl	80005f8 <__aeabi_dmul>
 80049de:	4606      	mov	r6, r0
 80049e0:	460f      	mov	r7, r1
 80049e2:	e7c4      	b.n	800496e <_dtoa_r+0x53e>
 80049e4:	ec51 0b17 	vmov	r0, r1, d7
 80049e8:	f7fb fe06 	bl	80005f8 <__aeabi_dmul>
 80049ec:	9b02      	ldr	r3, [sp, #8]
 80049ee:	9d00      	ldr	r5, [sp, #0]
 80049f0:	930c      	str	r3, [sp, #48]	; 0x30
 80049f2:	ec41 0b18 	vmov	d8, r0, r1
 80049f6:	4639      	mov	r1, r7
 80049f8:	4630      	mov	r0, r6
 80049fa:	f7fc f8ad 	bl	8000b58 <__aeabi_d2iz>
 80049fe:	9011      	str	r0, [sp, #68]	; 0x44
 8004a00:	f7fb fd90 	bl	8000524 <__aeabi_i2d>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4630      	mov	r0, r6
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	f7fb fc3c 	bl	8000288 <__aeabi_dsub>
 8004a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a12:	3330      	adds	r3, #48	; 0x30
 8004a14:	f805 3b01 	strb.w	r3, [r5], #1
 8004a18:	9b02      	ldr	r3, [sp, #8]
 8004a1a:	429d      	cmp	r5, r3
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	460f      	mov	r7, r1
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	d134      	bne.n	8004a90 <_dtoa_r+0x660>
 8004a26:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <_dtoa_r+0x65c>)
 8004a28:	ec51 0b18 	vmov	r0, r1, d8
 8004a2c:	f7fb fc2e 	bl	800028c <__adddf3>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4630      	mov	r0, r6
 8004a36:	4639      	mov	r1, r7
 8004a38:	f7fc f86e 	bl	8000b18 <__aeabi_dcmpgt>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d175      	bne.n	8004b2c <_dtoa_r+0x6fc>
 8004a40:	ec53 2b18 	vmov	r2, r3, d8
 8004a44:	4911      	ldr	r1, [pc, #68]	; (8004a8c <_dtoa_r+0x65c>)
 8004a46:	2000      	movs	r0, #0
 8004a48:	f7fb fc1e 	bl	8000288 <__aeabi_dsub>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4630      	mov	r0, r6
 8004a52:	4639      	mov	r1, r7
 8004a54:	f7fc f842 	bl	8000adc <__aeabi_dcmplt>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	f43f af27 	beq.w	80048ac <_dtoa_r+0x47c>
 8004a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a60:	1e6b      	subs	r3, r5, #1
 8004a62:	930c      	str	r3, [sp, #48]	; 0x30
 8004a64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a68:	2b30      	cmp	r3, #48	; 0x30
 8004a6a:	d0f8      	beq.n	8004a5e <_dtoa_r+0x62e>
 8004a6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004a70:	e04a      	b.n	8004b08 <_dtoa_r+0x6d8>
 8004a72:	bf00      	nop
 8004a74:	080071d8 	.word	0x080071d8
 8004a78:	080071b0 	.word	0x080071b0
 8004a7c:	3ff00000 	.word	0x3ff00000
 8004a80:	40240000 	.word	0x40240000
 8004a84:	401c0000 	.word	0x401c0000
 8004a88:	40140000 	.word	0x40140000
 8004a8c:	3fe00000 	.word	0x3fe00000
 8004a90:	4baf      	ldr	r3, [pc, #700]	; (8004d50 <_dtoa_r+0x920>)
 8004a92:	f7fb fdb1 	bl	80005f8 <__aeabi_dmul>
 8004a96:	4606      	mov	r6, r0
 8004a98:	460f      	mov	r7, r1
 8004a9a:	e7ac      	b.n	80049f6 <_dtoa_r+0x5c6>
 8004a9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004aa0:	9d00      	ldr	r5, [sp, #0]
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	4639      	mov	r1, r7
 8004aaa:	f7fb fecf 	bl	800084c <__aeabi_ddiv>
 8004aae:	f7fc f853 	bl	8000b58 <__aeabi_d2iz>
 8004ab2:	9002      	str	r0, [sp, #8]
 8004ab4:	f7fb fd36 	bl	8000524 <__aeabi_i2d>
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	f7fb fd9c 	bl	80005f8 <__aeabi_dmul>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	f7fb fbde 	bl	8000288 <__aeabi_dsub>
 8004acc:	9e02      	ldr	r6, [sp, #8]
 8004ace:	9f01      	ldr	r7, [sp, #4]
 8004ad0:	3630      	adds	r6, #48	; 0x30
 8004ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8004ad6:	9e00      	ldr	r6, [sp, #0]
 8004ad8:	1bae      	subs	r6, r5, r6
 8004ada:	42b7      	cmp	r7, r6
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	d137      	bne.n	8004b52 <_dtoa_r+0x722>
 8004ae2:	f7fb fbd3 	bl	800028c <__adddf3>
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	464b      	mov	r3, r9
 8004aea:	4606      	mov	r6, r0
 8004aec:	460f      	mov	r7, r1
 8004aee:	f7fc f813 	bl	8000b18 <__aeabi_dcmpgt>
 8004af2:	b9c8      	cbnz	r0, 8004b28 <_dtoa_r+0x6f8>
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	4630      	mov	r0, r6
 8004afa:	4639      	mov	r1, r7
 8004afc:	f7fb ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b00:	b110      	cbz	r0, 8004b08 <_dtoa_r+0x6d8>
 8004b02:	9b02      	ldr	r3, [sp, #8]
 8004b04:	07d9      	lsls	r1, r3, #31
 8004b06:	d40f      	bmi.n	8004b28 <_dtoa_r+0x6f8>
 8004b08:	4620      	mov	r0, r4
 8004b0a:	4659      	mov	r1, fp
 8004b0c:	f000 fae8 	bl	80050e0 <_Bfree>
 8004b10:	2300      	movs	r3, #0
 8004b12:	702b      	strb	r3, [r5, #0]
 8004b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b16:	f10a 0001 	add.w	r0, sl, #1
 8004b1a:	6018      	str	r0, [r3, #0]
 8004b1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f43f acd8 	beq.w	80044d4 <_dtoa_r+0xa4>
 8004b24:	601d      	str	r5, [r3, #0]
 8004b26:	e4d5      	b.n	80044d4 <_dtoa_r+0xa4>
 8004b28:	f8cd a01c 	str.w	sl, [sp, #28]
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	461d      	mov	r5, r3
 8004b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b34:	2a39      	cmp	r2, #57	; 0x39
 8004b36:	d108      	bne.n	8004b4a <_dtoa_r+0x71a>
 8004b38:	9a00      	ldr	r2, [sp, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d1f7      	bne.n	8004b2e <_dtoa_r+0x6fe>
 8004b3e:	9a07      	ldr	r2, [sp, #28]
 8004b40:	9900      	ldr	r1, [sp, #0]
 8004b42:	3201      	adds	r2, #1
 8004b44:	9207      	str	r2, [sp, #28]
 8004b46:	2230      	movs	r2, #48	; 0x30
 8004b48:	700a      	strb	r2, [r1, #0]
 8004b4a:	781a      	ldrb	r2, [r3, #0]
 8004b4c:	3201      	adds	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e78c      	b.n	8004a6c <_dtoa_r+0x63c>
 8004b52:	4b7f      	ldr	r3, [pc, #508]	; (8004d50 <_dtoa_r+0x920>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	f7fb fd4f 	bl	80005f8 <__aeabi_dmul>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4606      	mov	r6, r0
 8004b60:	460f      	mov	r7, r1
 8004b62:	f7fb ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d09b      	beq.n	8004aa2 <_dtoa_r+0x672>
 8004b6a:	e7cd      	b.n	8004b08 <_dtoa_r+0x6d8>
 8004b6c:	9a08      	ldr	r2, [sp, #32]
 8004b6e:	2a00      	cmp	r2, #0
 8004b70:	f000 80c4 	beq.w	8004cfc <_dtoa_r+0x8cc>
 8004b74:	9a05      	ldr	r2, [sp, #20]
 8004b76:	2a01      	cmp	r2, #1
 8004b78:	f300 80a8 	bgt.w	8004ccc <_dtoa_r+0x89c>
 8004b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	f000 80a0 	beq.w	8004cc4 <_dtoa_r+0x894>
 8004b84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b88:	9e06      	ldr	r6, [sp, #24]
 8004b8a:	4645      	mov	r5, r8
 8004b8c:	9a04      	ldr	r2, [sp, #16]
 8004b8e:	2101      	movs	r1, #1
 8004b90:	441a      	add	r2, r3
 8004b92:	4620      	mov	r0, r4
 8004b94:	4498      	add	r8, r3
 8004b96:	9204      	str	r2, [sp, #16]
 8004b98:	f000 fb5e 	bl	8005258 <__i2b>
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	dd0b      	ble.n	8004bba <_dtoa_r+0x78a>
 8004ba2:	9b04      	ldr	r3, [sp, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dd08      	ble.n	8004bba <_dtoa_r+0x78a>
 8004ba8:	42ab      	cmp	r3, r5
 8004baa:	9a04      	ldr	r2, [sp, #16]
 8004bac:	bfa8      	it	ge
 8004bae:	462b      	movge	r3, r5
 8004bb0:	eba8 0803 	sub.w	r8, r8, r3
 8004bb4:	1aed      	subs	r5, r5, r3
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	9b06      	ldr	r3, [sp, #24]
 8004bbc:	b1fb      	cbz	r3, 8004bfe <_dtoa_r+0x7ce>
 8004bbe:	9b08      	ldr	r3, [sp, #32]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 809f 	beq.w	8004d04 <_dtoa_r+0x8d4>
 8004bc6:	2e00      	cmp	r6, #0
 8004bc8:	dd11      	ble.n	8004bee <_dtoa_r+0x7be>
 8004bca:	4639      	mov	r1, r7
 8004bcc:	4632      	mov	r2, r6
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f000 fbfe 	bl	80053d0 <__pow5mult>
 8004bd4:	465a      	mov	r2, fp
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	4607      	mov	r7, r0
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fb52 	bl	8005284 <__multiply>
 8004be0:	4659      	mov	r1, fp
 8004be2:	9007      	str	r0, [sp, #28]
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 fa7b 	bl	80050e0 <_Bfree>
 8004bea:	9b07      	ldr	r3, [sp, #28]
 8004bec:	469b      	mov	fp, r3
 8004bee:	9b06      	ldr	r3, [sp, #24]
 8004bf0:	1b9a      	subs	r2, r3, r6
 8004bf2:	d004      	beq.n	8004bfe <_dtoa_r+0x7ce>
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f000 fbea 	bl	80053d0 <__pow5mult>
 8004bfc:	4683      	mov	fp, r0
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 fb29 	bl	8005258 <__i2b>
 8004c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	dd7c      	ble.n	8004d08 <_dtoa_r+0x8d8>
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4601      	mov	r1, r0
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 fbdc 	bl	80053d0 <__pow5mult>
 8004c18:	9b05      	ldr	r3, [sp, #20]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	dd76      	ble.n	8004d0e <_dtoa_r+0x8de>
 8004c20:	2300      	movs	r3, #0
 8004c22:	9306      	str	r3, [sp, #24]
 8004c24:	6933      	ldr	r3, [r6, #16]
 8004c26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004c2a:	6918      	ldr	r0, [r3, #16]
 8004c2c:	f000 fac4 	bl	80051b8 <__hi0bits>
 8004c30:	f1c0 0020 	rsb	r0, r0, #32
 8004c34:	9b04      	ldr	r3, [sp, #16]
 8004c36:	4418      	add	r0, r3
 8004c38:	f010 001f 	ands.w	r0, r0, #31
 8004c3c:	f000 8086 	beq.w	8004d4c <_dtoa_r+0x91c>
 8004c40:	f1c0 0320 	rsb	r3, r0, #32
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	dd7f      	ble.n	8004d48 <_dtoa_r+0x918>
 8004c48:	f1c0 001c 	rsb	r0, r0, #28
 8004c4c:	9b04      	ldr	r3, [sp, #16]
 8004c4e:	4403      	add	r3, r0
 8004c50:	4480      	add	r8, r0
 8004c52:	4405      	add	r5, r0
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	f1b8 0f00 	cmp.w	r8, #0
 8004c5a:	dd05      	ble.n	8004c68 <_dtoa_r+0x838>
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	4642      	mov	r2, r8
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 fc0f 	bl	8005484 <__lshift>
 8004c66:	4683      	mov	fp, r0
 8004c68:	9b04      	ldr	r3, [sp, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	dd05      	ble.n	8004c7a <_dtoa_r+0x84a>
 8004c6e:	4631      	mov	r1, r6
 8004c70:	461a      	mov	r2, r3
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 fc06 	bl	8005484 <__lshift>
 8004c78:	4606      	mov	r6, r0
 8004c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d069      	beq.n	8004d54 <_dtoa_r+0x924>
 8004c80:	4631      	mov	r1, r6
 8004c82:	4658      	mov	r0, fp
 8004c84:	f000 fc6a 	bl	800555c <__mcmp>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	da63      	bge.n	8004d54 <_dtoa_r+0x924>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4659      	mov	r1, fp
 8004c90:	220a      	movs	r2, #10
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 fa46 	bl	8005124 <__multadd>
 8004c98:	9b08      	ldr	r3, [sp, #32]
 8004c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c9e:	4683      	mov	fp, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 818f 	beq.w	8004fc4 <_dtoa_r+0xb94>
 8004ca6:	4639      	mov	r1, r7
 8004ca8:	2300      	movs	r3, #0
 8004caa:	220a      	movs	r2, #10
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 fa39 	bl	8005124 <__multadd>
 8004cb2:	f1b9 0f00 	cmp.w	r9, #0
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	f300 808e 	bgt.w	8004dd8 <_dtoa_r+0x9a8>
 8004cbc:	9b05      	ldr	r3, [sp, #20]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	dc50      	bgt.n	8004d64 <_dtoa_r+0x934>
 8004cc2:	e089      	b.n	8004dd8 <_dtoa_r+0x9a8>
 8004cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004cca:	e75d      	b.n	8004b88 <_dtoa_r+0x758>
 8004ccc:	9b01      	ldr	r3, [sp, #4]
 8004cce:	1e5e      	subs	r6, r3, #1
 8004cd0:	9b06      	ldr	r3, [sp, #24]
 8004cd2:	42b3      	cmp	r3, r6
 8004cd4:	bfbf      	itttt	lt
 8004cd6:	9b06      	ldrlt	r3, [sp, #24]
 8004cd8:	9606      	strlt	r6, [sp, #24]
 8004cda:	1af2      	sublt	r2, r6, r3
 8004cdc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004cde:	bfb6      	itet	lt
 8004ce0:	189b      	addlt	r3, r3, r2
 8004ce2:	1b9e      	subge	r6, r3, r6
 8004ce4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004ce6:	9b01      	ldr	r3, [sp, #4]
 8004ce8:	bfb8      	it	lt
 8004cea:	2600      	movlt	r6, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bfb5      	itete	lt
 8004cf0:	eba8 0503 	sublt.w	r5, r8, r3
 8004cf4:	9b01      	ldrge	r3, [sp, #4]
 8004cf6:	2300      	movlt	r3, #0
 8004cf8:	4645      	movge	r5, r8
 8004cfa:	e747      	b.n	8004b8c <_dtoa_r+0x75c>
 8004cfc:	9e06      	ldr	r6, [sp, #24]
 8004cfe:	9f08      	ldr	r7, [sp, #32]
 8004d00:	4645      	mov	r5, r8
 8004d02:	e74c      	b.n	8004b9e <_dtoa_r+0x76e>
 8004d04:	9a06      	ldr	r2, [sp, #24]
 8004d06:	e775      	b.n	8004bf4 <_dtoa_r+0x7c4>
 8004d08:	9b05      	ldr	r3, [sp, #20]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	dc18      	bgt.n	8004d40 <_dtoa_r+0x910>
 8004d0e:	9b02      	ldr	r3, [sp, #8]
 8004d10:	b9b3      	cbnz	r3, 8004d40 <_dtoa_r+0x910>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d18:	b9a3      	cbnz	r3, 8004d44 <_dtoa_r+0x914>
 8004d1a:	9b03      	ldr	r3, [sp, #12]
 8004d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d20:	0d1b      	lsrs	r3, r3, #20
 8004d22:	051b      	lsls	r3, r3, #20
 8004d24:	b12b      	cbz	r3, 8004d32 <_dtoa_r+0x902>
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	f108 0801 	add.w	r8, r8, #1
 8004d30:	2301      	movs	r3, #1
 8004d32:	9306      	str	r3, [sp, #24]
 8004d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f47f af74 	bne.w	8004c24 <_dtoa_r+0x7f4>
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	e779      	b.n	8004c34 <_dtoa_r+0x804>
 8004d40:	2300      	movs	r3, #0
 8004d42:	e7f6      	b.n	8004d32 <_dtoa_r+0x902>
 8004d44:	9b02      	ldr	r3, [sp, #8]
 8004d46:	e7f4      	b.n	8004d32 <_dtoa_r+0x902>
 8004d48:	d085      	beq.n	8004c56 <_dtoa_r+0x826>
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	301c      	adds	r0, #28
 8004d4e:	e77d      	b.n	8004c4c <_dtoa_r+0x81c>
 8004d50:	40240000 	.word	0x40240000
 8004d54:	9b01      	ldr	r3, [sp, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dc38      	bgt.n	8004dcc <_dtoa_r+0x99c>
 8004d5a:	9b05      	ldr	r3, [sp, #20]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	dd35      	ble.n	8004dcc <_dtoa_r+0x99c>
 8004d60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004d64:	f1b9 0f00 	cmp.w	r9, #0
 8004d68:	d10d      	bne.n	8004d86 <_dtoa_r+0x956>
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	2205      	movs	r2, #5
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 f9d7 	bl	8005124 <__multadd>
 8004d76:	4601      	mov	r1, r0
 8004d78:	4606      	mov	r6, r0
 8004d7a:	4658      	mov	r0, fp
 8004d7c:	f000 fbee 	bl	800555c <__mcmp>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	f73f adbd 	bgt.w	8004900 <_dtoa_r+0x4d0>
 8004d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d88:	9d00      	ldr	r5, [sp, #0]
 8004d8a:	ea6f 0a03 	mvn.w	sl, r3
 8004d8e:	f04f 0800 	mov.w	r8, #0
 8004d92:	4631      	mov	r1, r6
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 f9a3 	bl	80050e0 <_Bfree>
 8004d9a:	2f00      	cmp	r7, #0
 8004d9c:	f43f aeb4 	beq.w	8004b08 <_dtoa_r+0x6d8>
 8004da0:	f1b8 0f00 	cmp.w	r8, #0
 8004da4:	d005      	beq.n	8004db2 <_dtoa_r+0x982>
 8004da6:	45b8      	cmp	r8, r7
 8004da8:	d003      	beq.n	8004db2 <_dtoa_r+0x982>
 8004daa:	4641      	mov	r1, r8
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 f997 	bl	80050e0 <_Bfree>
 8004db2:	4639      	mov	r1, r7
 8004db4:	4620      	mov	r0, r4
 8004db6:	f000 f993 	bl	80050e0 <_Bfree>
 8004dba:	e6a5      	b.n	8004b08 <_dtoa_r+0x6d8>
 8004dbc:	2600      	movs	r6, #0
 8004dbe:	4637      	mov	r7, r6
 8004dc0:	e7e1      	b.n	8004d86 <_dtoa_r+0x956>
 8004dc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004dc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004dc8:	4637      	mov	r7, r6
 8004dca:	e599      	b.n	8004900 <_dtoa_r+0x4d0>
 8004dcc:	9b08      	ldr	r3, [sp, #32]
 8004dce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80fd 	beq.w	8004fd2 <_dtoa_r+0xba2>
 8004dd8:	2d00      	cmp	r5, #0
 8004dda:	dd05      	ble.n	8004de8 <_dtoa_r+0x9b8>
 8004ddc:	4639      	mov	r1, r7
 8004dde:	462a      	mov	r2, r5
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 fb4f 	bl	8005484 <__lshift>
 8004de6:	4607      	mov	r7, r0
 8004de8:	9b06      	ldr	r3, [sp, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d05c      	beq.n	8004ea8 <_dtoa_r+0xa78>
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 f935 	bl	8005060 <_Balloc>
 8004df6:	4605      	mov	r5, r0
 8004df8:	b928      	cbnz	r0, 8004e06 <_dtoa_r+0x9d6>
 8004dfa:	4b80      	ldr	r3, [pc, #512]	; (8004ffc <_dtoa_r+0xbcc>)
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e02:	f7ff bb2e 	b.w	8004462 <_dtoa_r+0x32>
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	3202      	adds	r2, #2
 8004e0a:	0092      	lsls	r2, r2, #2
 8004e0c:	f107 010c 	add.w	r1, r7, #12
 8004e10:	300c      	adds	r0, #12
 8004e12:	f000 f917 	bl	8005044 <memcpy>
 8004e16:	2201      	movs	r2, #1
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 fb32 	bl	8005484 <__lshift>
 8004e20:	9b00      	ldr	r3, [sp, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	9b00      	ldr	r3, [sp, #0]
 8004e28:	444b      	add	r3, r9
 8004e2a:	9307      	str	r3, [sp, #28]
 8004e2c:	9b02      	ldr	r3, [sp, #8]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	46b8      	mov	r8, r7
 8004e34:	9306      	str	r3, [sp, #24]
 8004e36:	4607      	mov	r7, r0
 8004e38:	9b01      	ldr	r3, [sp, #4]
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	4658      	mov	r0, fp
 8004e40:	9302      	str	r3, [sp, #8]
 8004e42:	f7ff fa67 	bl	8004314 <quorem>
 8004e46:	4603      	mov	r3, r0
 8004e48:	3330      	adds	r3, #48	; 0x30
 8004e4a:	9004      	str	r0, [sp, #16]
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	4658      	mov	r0, fp
 8004e50:	9308      	str	r3, [sp, #32]
 8004e52:	f000 fb83 	bl	800555c <__mcmp>
 8004e56:	463a      	mov	r2, r7
 8004e58:	4681      	mov	r9, r0
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 fb99 	bl	8005594 <__mdiff>
 8004e62:	68c2      	ldr	r2, [r0, #12]
 8004e64:	9b08      	ldr	r3, [sp, #32]
 8004e66:	4605      	mov	r5, r0
 8004e68:	bb02      	cbnz	r2, 8004eac <_dtoa_r+0xa7c>
 8004e6a:	4601      	mov	r1, r0
 8004e6c:	4658      	mov	r0, fp
 8004e6e:	f000 fb75 	bl	800555c <__mcmp>
 8004e72:	9b08      	ldr	r3, [sp, #32]
 8004e74:	4602      	mov	r2, r0
 8004e76:	4629      	mov	r1, r5
 8004e78:	4620      	mov	r0, r4
 8004e7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004e7e:	f000 f92f 	bl	80050e0 <_Bfree>
 8004e82:	9b05      	ldr	r3, [sp, #20]
 8004e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e86:	9d01      	ldr	r5, [sp, #4]
 8004e88:	ea43 0102 	orr.w	r1, r3, r2
 8004e8c:	9b06      	ldr	r3, [sp, #24]
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	9b08      	ldr	r3, [sp, #32]
 8004e92:	d10d      	bne.n	8004eb0 <_dtoa_r+0xa80>
 8004e94:	2b39      	cmp	r3, #57	; 0x39
 8004e96:	d029      	beq.n	8004eec <_dtoa_r+0xabc>
 8004e98:	f1b9 0f00 	cmp.w	r9, #0
 8004e9c:	dd01      	ble.n	8004ea2 <_dtoa_r+0xa72>
 8004e9e:	9b04      	ldr	r3, [sp, #16]
 8004ea0:	3331      	adds	r3, #49	; 0x31
 8004ea2:	9a02      	ldr	r2, [sp, #8]
 8004ea4:	7013      	strb	r3, [r2, #0]
 8004ea6:	e774      	b.n	8004d92 <_dtoa_r+0x962>
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	e7b9      	b.n	8004e20 <_dtoa_r+0x9f0>
 8004eac:	2201      	movs	r2, #1
 8004eae:	e7e2      	b.n	8004e76 <_dtoa_r+0xa46>
 8004eb0:	f1b9 0f00 	cmp.w	r9, #0
 8004eb4:	db06      	blt.n	8004ec4 <_dtoa_r+0xa94>
 8004eb6:	9905      	ldr	r1, [sp, #20]
 8004eb8:	ea41 0909 	orr.w	r9, r1, r9
 8004ebc:	9906      	ldr	r1, [sp, #24]
 8004ebe:	ea59 0101 	orrs.w	r1, r9, r1
 8004ec2:	d120      	bne.n	8004f06 <_dtoa_r+0xad6>
 8004ec4:	2a00      	cmp	r2, #0
 8004ec6:	ddec      	ble.n	8004ea2 <_dtoa_r+0xa72>
 8004ec8:	4659      	mov	r1, fp
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4620      	mov	r0, r4
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	f000 fad8 	bl	8005484 <__lshift>
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4683      	mov	fp, r0
 8004ed8:	f000 fb40 	bl	800555c <__mcmp>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	9b01      	ldr	r3, [sp, #4]
 8004ee0:	dc02      	bgt.n	8004ee8 <_dtoa_r+0xab8>
 8004ee2:	d1de      	bne.n	8004ea2 <_dtoa_r+0xa72>
 8004ee4:	07da      	lsls	r2, r3, #31
 8004ee6:	d5dc      	bpl.n	8004ea2 <_dtoa_r+0xa72>
 8004ee8:	2b39      	cmp	r3, #57	; 0x39
 8004eea:	d1d8      	bne.n	8004e9e <_dtoa_r+0xa6e>
 8004eec:	9a02      	ldr	r2, [sp, #8]
 8004eee:	2339      	movs	r3, #57	; 0x39
 8004ef0:	7013      	strb	r3, [r2, #0]
 8004ef2:	462b      	mov	r3, r5
 8004ef4:	461d      	mov	r5, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004efc:	2a39      	cmp	r2, #57	; 0x39
 8004efe:	d050      	beq.n	8004fa2 <_dtoa_r+0xb72>
 8004f00:	3201      	adds	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e745      	b.n	8004d92 <_dtoa_r+0x962>
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	dd03      	ble.n	8004f12 <_dtoa_r+0xae2>
 8004f0a:	2b39      	cmp	r3, #57	; 0x39
 8004f0c:	d0ee      	beq.n	8004eec <_dtoa_r+0xabc>
 8004f0e:	3301      	adds	r3, #1
 8004f10:	e7c7      	b.n	8004ea2 <_dtoa_r+0xa72>
 8004f12:	9a01      	ldr	r2, [sp, #4]
 8004f14:	9907      	ldr	r1, [sp, #28]
 8004f16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f1a:	428a      	cmp	r2, r1
 8004f1c:	d02a      	beq.n	8004f74 <_dtoa_r+0xb44>
 8004f1e:	4659      	mov	r1, fp
 8004f20:	2300      	movs	r3, #0
 8004f22:	220a      	movs	r2, #10
 8004f24:	4620      	mov	r0, r4
 8004f26:	f000 f8fd 	bl	8005124 <__multadd>
 8004f2a:	45b8      	cmp	r8, r7
 8004f2c:	4683      	mov	fp, r0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f04f 020a 	mov.w	r2, #10
 8004f36:	4641      	mov	r1, r8
 8004f38:	4620      	mov	r0, r4
 8004f3a:	d107      	bne.n	8004f4c <_dtoa_r+0xb1c>
 8004f3c:	f000 f8f2 	bl	8005124 <__multadd>
 8004f40:	4680      	mov	r8, r0
 8004f42:	4607      	mov	r7, r0
 8004f44:	9b01      	ldr	r3, [sp, #4]
 8004f46:	3301      	adds	r3, #1
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	e775      	b.n	8004e38 <_dtoa_r+0xa08>
 8004f4c:	f000 f8ea 	bl	8005124 <__multadd>
 8004f50:	4639      	mov	r1, r7
 8004f52:	4680      	mov	r8, r0
 8004f54:	2300      	movs	r3, #0
 8004f56:	220a      	movs	r2, #10
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 f8e3 	bl	8005124 <__multadd>
 8004f5e:	4607      	mov	r7, r0
 8004f60:	e7f0      	b.n	8004f44 <_dtoa_r+0xb14>
 8004f62:	f1b9 0f00 	cmp.w	r9, #0
 8004f66:	9a00      	ldr	r2, [sp, #0]
 8004f68:	bfcc      	ite	gt
 8004f6a:	464d      	movgt	r5, r9
 8004f6c:	2501      	movle	r5, #1
 8004f6e:	4415      	add	r5, r2
 8004f70:	f04f 0800 	mov.w	r8, #0
 8004f74:	4659      	mov	r1, fp
 8004f76:	2201      	movs	r2, #1
 8004f78:	4620      	mov	r0, r4
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	f000 fa82 	bl	8005484 <__lshift>
 8004f80:	4631      	mov	r1, r6
 8004f82:	4683      	mov	fp, r0
 8004f84:	f000 faea 	bl	800555c <__mcmp>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	dcb2      	bgt.n	8004ef2 <_dtoa_r+0xac2>
 8004f8c:	d102      	bne.n	8004f94 <_dtoa_r+0xb64>
 8004f8e:	9b01      	ldr	r3, [sp, #4]
 8004f90:	07db      	lsls	r3, r3, #31
 8004f92:	d4ae      	bmi.n	8004ef2 <_dtoa_r+0xac2>
 8004f94:	462b      	mov	r3, r5
 8004f96:	461d      	mov	r5, r3
 8004f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f9c:	2a30      	cmp	r2, #48	; 0x30
 8004f9e:	d0fa      	beq.n	8004f96 <_dtoa_r+0xb66>
 8004fa0:	e6f7      	b.n	8004d92 <_dtoa_r+0x962>
 8004fa2:	9a00      	ldr	r2, [sp, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1a5      	bne.n	8004ef4 <_dtoa_r+0xac4>
 8004fa8:	f10a 0a01 	add.w	sl, sl, #1
 8004fac:	2331      	movs	r3, #49	; 0x31
 8004fae:	e779      	b.n	8004ea4 <_dtoa_r+0xa74>
 8004fb0:	4b13      	ldr	r3, [pc, #76]	; (8005000 <_dtoa_r+0xbd0>)
 8004fb2:	f7ff baaf 	b.w	8004514 <_dtoa_r+0xe4>
 8004fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f47f aa86 	bne.w	80044ca <_dtoa_r+0x9a>
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <_dtoa_r+0xbd4>)
 8004fc0:	f7ff baa8 	b.w	8004514 <_dtoa_r+0xe4>
 8004fc4:	f1b9 0f00 	cmp.w	r9, #0
 8004fc8:	dc03      	bgt.n	8004fd2 <_dtoa_r+0xba2>
 8004fca:	9b05      	ldr	r3, [sp, #20]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	f73f aec9 	bgt.w	8004d64 <_dtoa_r+0x934>
 8004fd2:	9d00      	ldr	r5, [sp, #0]
 8004fd4:	4631      	mov	r1, r6
 8004fd6:	4658      	mov	r0, fp
 8004fd8:	f7ff f99c 	bl	8004314 <quorem>
 8004fdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8004fe4:	9a00      	ldr	r2, [sp, #0]
 8004fe6:	1aaa      	subs	r2, r5, r2
 8004fe8:	4591      	cmp	r9, r2
 8004fea:	ddba      	ble.n	8004f62 <_dtoa_r+0xb32>
 8004fec:	4659      	mov	r1, fp
 8004fee:	2300      	movs	r3, #0
 8004ff0:	220a      	movs	r2, #10
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 f896 	bl	8005124 <__multadd>
 8004ff8:	4683      	mov	fp, r0
 8004ffa:	e7eb      	b.n	8004fd4 <_dtoa_r+0xba4>
 8004ffc:	08007139 	.word	0x08007139
 8005000:	080072c1 	.word	0x080072c1
 8005004:	080070b6 	.word	0x080070b6

08005008 <_localeconv_r>:
 8005008:	4800      	ldr	r0, [pc, #0]	; (800500c <_localeconv_r+0x4>)
 800500a:	4770      	bx	lr
 800500c:	2000015c 	.word	0x2000015c

08005010 <_lseek_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4d07      	ldr	r5, [pc, #28]	; (8005030 <_lseek_r+0x20>)
 8005014:	4604      	mov	r4, r0
 8005016:	4608      	mov	r0, r1
 8005018:	4611      	mov	r1, r2
 800501a:	2200      	movs	r2, #0
 800501c:	602a      	str	r2, [r5, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f7fc fba4 	bl	800176c <_lseek>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_lseek_r+0x1e>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_lseek_r+0x1e>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	20000310 	.word	0x20000310

08005034 <malloc>:
 8005034:	4b02      	ldr	r3, [pc, #8]	; (8005040 <malloc+0xc>)
 8005036:	4601      	mov	r1, r0
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	f000 bbef 	b.w	800581c <_malloc_r>
 800503e:	bf00      	nop
 8005040:	20000008 	.word	0x20000008

08005044 <memcpy>:
 8005044:	440a      	add	r2, r1
 8005046:	4291      	cmp	r1, r2
 8005048:	f100 33ff 	add.w	r3, r0, #4294967295
 800504c:	d100      	bne.n	8005050 <memcpy+0xc>
 800504e:	4770      	bx	lr
 8005050:	b510      	push	{r4, lr}
 8005052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800505a:	4291      	cmp	r1, r2
 800505c:	d1f9      	bne.n	8005052 <memcpy+0xe>
 800505e:	bd10      	pop	{r4, pc}

08005060 <_Balloc>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005064:	4604      	mov	r4, r0
 8005066:	460d      	mov	r5, r1
 8005068:	b976      	cbnz	r6, 8005088 <_Balloc+0x28>
 800506a:	2010      	movs	r0, #16
 800506c:	f7ff ffe2 	bl	8005034 <malloc>
 8005070:	4602      	mov	r2, r0
 8005072:	6260      	str	r0, [r4, #36]	; 0x24
 8005074:	b920      	cbnz	r0, 8005080 <_Balloc+0x20>
 8005076:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <_Balloc+0x78>)
 8005078:	4818      	ldr	r0, [pc, #96]	; (80050dc <_Balloc+0x7c>)
 800507a:	2166      	movs	r1, #102	; 0x66
 800507c:	f001 fa3c 	bl	80064f8 <__assert_func>
 8005080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005084:	6006      	str	r6, [r0, #0]
 8005086:	60c6      	str	r6, [r0, #12]
 8005088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800508a:	68f3      	ldr	r3, [r6, #12]
 800508c:	b183      	cbz	r3, 80050b0 <_Balloc+0x50>
 800508e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005096:	b9b8      	cbnz	r0, 80050c8 <_Balloc+0x68>
 8005098:	2101      	movs	r1, #1
 800509a:	fa01 f605 	lsl.w	r6, r1, r5
 800509e:	1d72      	adds	r2, r6, #5
 80050a0:	0092      	lsls	r2, r2, #2
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 fb5a 	bl	800575c <_calloc_r>
 80050a8:	b160      	cbz	r0, 80050c4 <_Balloc+0x64>
 80050aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050ae:	e00e      	b.n	80050ce <_Balloc+0x6e>
 80050b0:	2221      	movs	r2, #33	; 0x21
 80050b2:	2104      	movs	r1, #4
 80050b4:	4620      	mov	r0, r4
 80050b6:	f000 fb51 	bl	800575c <_calloc_r>
 80050ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050bc:	60f0      	str	r0, [r6, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e4      	bne.n	800508e <_Balloc+0x2e>
 80050c4:	2000      	movs	r0, #0
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
 80050c8:	6802      	ldr	r2, [r0, #0]
 80050ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050ce:	2300      	movs	r3, #0
 80050d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050d4:	e7f7      	b.n	80050c6 <_Balloc+0x66>
 80050d6:	bf00      	nop
 80050d8:	080070c3 	.word	0x080070c3
 80050dc:	0800714a 	.word	0x0800714a

080050e0 <_Bfree>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050e4:	4605      	mov	r5, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	b976      	cbnz	r6, 8005108 <_Bfree+0x28>
 80050ea:	2010      	movs	r0, #16
 80050ec:	f7ff ffa2 	bl	8005034 <malloc>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6268      	str	r0, [r5, #36]	; 0x24
 80050f4:	b920      	cbnz	r0, 8005100 <_Bfree+0x20>
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <_Bfree+0x3c>)
 80050f8:	4809      	ldr	r0, [pc, #36]	; (8005120 <_Bfree+0x40>)
 80050fa:	218a      	movs	r1, #138	; 0x8a
 80050fc:	f001 f9fc 	bl	80064f8 <__assert_func>
 8005100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005104:	6006      	str	r6, [r0, #0]
 8005106:	60c6      	str	r6, [r0, #12]
 8005108:	b13c      	cbz	r4, 800511a <_Bfree+0x3a>
 800510a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800510c:	6862      	ldr	r2, [r4, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005114:	6021      	str	r1, [r4, #0]
 8005116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	080070c3 	.word	0x080070c3
 8005120:	0800714a 	.word	0x0800714a

08005124 <__multadd>:
 8005124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005128:	690e      	ldr	r6, [r1, #16]
 800512a:	4607      	mov	r7, r0
 800512c:	4698      	mov	r8, r3
 800512e:	460c      	mov	r4, r1
 8005130:	f101 0014 	add.w	r0, r1, #20
 8005134:	2300      	movs	r3, #0
 8005136:	6805      	ldr	r5, [r0, #0]
 8005138:	b2a9      	uxth	r1, r5
 800513a:	fb02 8101 	mla	r1, r2, r1, r8
 800513e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005142:	0c2d      	lsrs	r5, r5, #16
 8005144:	fb02 c505 	mla	r5, r2, r5, ip
 8005148:	b289      	uxth	r1, r1
 800514a:	3301      	adds	r3, #1
 800514c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005150:	429e      	cmp	r6, r3
 8005152:	f840 1b04 	str.w	r1, [r0], #4
 8005156:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800515a:	dcec      	bgt.n	8005136 <__multadd+0x12>
 800515c:	f1b8 0f00 	cmp.w	r8, #0
 8005160:	d022      	beq.n	80051a8 <__multadd+0x84>
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	42b3      	cmp	r3, r6
 8005166:	dc19      	bgt.n	800519c <__multadd+0x78>
 8005168:	6861      	ldr	r1, [r4, #4]
 800516a:	4638      	mov	r0, r7
 800516c:	3101      	adds	r1, #1
 800516e:	f7ff ff77 	bl	8005060 <_Balloc>
 8005172:	4605      	mov	r5, r0
 8005174:	b928      	cbnz	r0, 8005182 <__multadd+0x5e>
 8005176:	4602      	mov	r2, r0
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <__multadd+0x8c>)
 800517a:	480e      	ldr	r0, [pc, #56]	; (80051b4 <__multadd+0x90>)
 800517c:	21b5      	movs	r1, #181	; 0xb5
 800517e:	f001 f9bb 	bl	80064f8 <__assert_func>
 8005182:	6922      	ldr	r2, [r4, #16]
 8005184:	3202      	adds	r2, #2
 8005186:	f104 010c 	add.w	r1, r4, #12
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	300c      	adds	r0, #12
 800518e:	f7ff ff59 	bl	8005044 <memcpy>
 8005192:	4621      	mov	r1, r4
 8005194:	4638      	mov	r0, r7
 8005196:	f7ff ffa3 	bl	80050e0 <_Bfree>
 800519a:	462c      	mov	r4, r5
 800519c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80051a0:	3601      	adds	r6, #1
 80051a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80051a6:	6126      	str	r6, [r4, #16]
 80051a8:	4620      	mov	r0, r4
 80051aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ae:	bf00      	nop
 80051b0:	08007139 	.word	0x08007139
 80051b4:	0800714a 	.word	0x0800714a

080051b8 <__hi0bits>:
 80051b8:	0c03      	lsrs	r3, r0, #16
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	b9d3      	cbnz	r3, 80051f4 <__hi0bits+0x3c>
 80051be:	0400      	lsls	r0, r0, #16
 80051c0:	2310      	movs	r3, #16
 80051c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80051c6:	bf04      	itt	eq
 80051c8:	0200      	lsleq	r0, r0, #8
 80051ca:	3308      	addeq	r3, #8
 80051cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80051d0:	bf04      	itt	eq
 80051d2:	0100      	lsleq	r0, r0, #4
 80051d4:	3304      	addeq	r3, #4
 80051d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80051da:	bf04      	itt	eq
 80051dc:	0080      	lsleq	r0, r0, #2
 80051de:	3302      	addeq	r3, #2
 80051e0:	2800      	cmp	r0, #0
 80051e2:	db05      	blt.n	80051f0 <__hi0bits+0x38>
 80051e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80051e8:	f103 0301 	add.w	r3, r3, #1
 80051ec:	bf08      	it	eq
 80051ee:	2320      	moveq	r3, #32
 80051f0:	4618      	mov	r0, r3
 80051f2:	4770      	bx	lr
 80051f4:	2300      	movs	r3, #0
 80051f6:	e7e4      	b.n	80051c2 <__hi0bits+0xa>

080051f8 <__lo0bits>:
 80051f8:	6803      	ldr	r3, [r0, #0]
 80051fa:	f013 0207 	ands.w	r2, r3, #7
 80051fe:	4601      	mov	r1, r0
 8005200:	d00b      	beq.n	800521a <__lo0bits+0x22>
 8005202:	07da      	lsls	r2, r3, #31
 8005204:	d424      	bmi.n	8005250 <__lo0bits+0x58>
 8005206:	0798      	lsls	r0, r3, #30
 8005208:	bf49      	itett	mi
 800520a:	085b      	lsrmi	r3, r3, #1
 800520c:	089b      	lsrpl	r3, r3, #2
 800520e:	2001      	movmi	r0, #1
 8005210:	600b      	strmi	r3, [r1, #0]
 8005212:	bf5c      	itt	pl
 8005214:	600b      	strpl	r3, [r1, #0]
 8005216:	2002      	movpl	r0, #2
 8005218:	4770      	bx	lr
 800521a:	b298      	uxth	r0, r3
 800521c:	b9b0      	cbnz	r0, 800524c <__lo0bits+0x54>
 800521e:	0c1b      	lsrs	r3, r3, #16
 8005220:	2010      	movs	r0, #16
 8005222:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005226:	bf04      	itt	eq
 8005228:	0a1b      	lsreq	r3, r3, #8
 800522a:	3008      	addeq	r0, #8
 800522c:	071a      	lsls	r2, r3, #28
 800522e:	bf04      	itt	eq
 8005230:	091b      	lsreq	r3, r3, #4
 8005232:	3004      	addeq	r0, #4
 8005234:	079a      	lsls	r2, r3, #30
 8005236:	bf04      	itt	eq
 8005238:	089b      	lsreq	r3, r3, #2
 800523a:	3002      	addeq	r0, #2
 800523c:	07da      	lsls	r2, r3, #31
 800523e:	d403      	bmi.n	8005248 <__lo0bits+0x50>
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	f100 0001 	add.w	r0, r0, #1
 8005246:	d005      	beq.n	8005254 <__lo0bits+0x5c>
 8005248:	600b      	str	r3, [r1, #0]
 800524a:	4770      	bx	lr
 800524c:	4610      	mov	r0, r2
 800524e:	e7e8      	b.n	8005222 <__lo0bits+0x2a>
 8005250:	2000      	movs	r0, #0
 8005252:	4770      	bx	lr
 8005254:	2020      	movs	r0, #32
 8005256:	4770      	bx	lr

08005258 <__i2b>:
 8005258:	b510      	push	{r4, lr}
 800525a:	460c      	mov	r4, r1
 800525c:	2101      	movs	r1, #1
 800525e:	f7ff feff 	bl	8005060 <_Balloc>
 8005262:	4602      	mov	r2, r0
 8005264:	b928      	cbnz	r0, 8005272 <__i2b+0x1a>
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <__i2b+0x24>)
 8005268:	4805      	ldr	r0, [pc, #20]	; (8005280 <__i2b+0x28>)
 800526a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800526e:	f001 f943 	bl	80064f8 <__assert_func>
 8005272:	2301      	movs	r3, #1
 8005274:	6144      	str	r4, [r0, #20]
 8005276:	6103      	str	r3, [r0, #16]
 8005278:	bd10      	pop	{r4, pc}
 800527a:	bf00      	nop
 800527c:	08007139 	.word	0x08007139
 8005280:	0800714a 	.word	0x0800714a

08005284 <__multiply>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	4614      	mov	r4, r2
 800528a:	690a      	ldr	r2, [r1, #16]
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	429a      	cmp	r2, r3
 8005290:	bfb8      	it	lt
 8005292:	460b      	movlt	r3, r1
 8005294:	460d      	mov	r5, r1
 8005296:	bfbc      	itt	lt
 8005298:	4625      	movlt	r5, r4
 800529a:	461c      	movlt	r4, r3
 800529c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80052a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80052a4:	68ab      	ldr	r3, [r5, #8]
 80052a6:	6869      	ldr	r1, [r5, #4]
 80052a8:	eb0a 0709 	add.w	r7, sl, r9
 80052ac:	42bb      	cmp	r3, r7
 80052ae:	b085      	sub	sp, #20
 80052b0:	bfb8      	it	lt
 80052b2:	3101      	addlt	r1, #1
 80052b4:	f7ff fed4 	bl	8005060 <_Balloc>
 80052b8:	b930      	cbnz	r0, 80052c8 <__multiply+0x44>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4b42      	ldr	r3, [pc, #264]	; (80053c8 <__multiply+0x144>)
 80052be:	4843      	ldr	r0, [pc, #268]	; (80053cc <__multiply+0x148>)
 80052c0:	f240 115d 	movw	r1, #349	; 0x15d
 80052c4:	f001 f918 	bl	80064f8 <__assert_func>
 80052c8:	f100 0614 	add.w	r6, r0, #20
 80052cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80052d0:	4633      	mov	r3, r6
 80052d2:	2200      	movs	r2, #0
 80052d4:	4543      	cmp	r3, r8
 80052d6:	d31e      	bcc.n	8005316 <__multiply+0x92>
 80052d8:	f105 0c14 	add.w	ip, r5, #20
 80052dc:	f104 0314 	add.w	r3, r4, #20
 80052e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80052e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80052e8:	9202      	str	r2, [sp, #8]
 80052ea:	ebac 0205 	sub.w	r2, ip, r5
 80052ee:	3a15      	subs	r2, #21
 80052f0:	f022 0203 	bic.w	r2, r2, #3
 80052f4:	3204      	adds	r2, #4
 80052f6:	f105 0115 	add.w	r1, r5, #21
 80052fa:	458c      	cmp	ip, r1
 80052fc:	bf38      	it	cc
 80052fe:	2204      	movcc	r2, #4
 8005300:	9201      	str	r2, [sp, #4]
 8005302:	9a02      	ldr	r2, [sp, #8]
 8005304:	9303      	str	r3, [sp, #12]
 8005306:	429a      	cmp	r2, r3
 8005308:	d808      	bhi.n	800531c <__multiply+0x98>
 800530a:	2f00      	cmp	r7, #0
 800530c:	dc55      	bgt.n	80053ba <__multiply+0x136>
 800530e:	6107      	str	r7, [r0, #16]
 8005310:	b005      	add	sp, #20
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005316:	f843 2b04 	str.w	r2, [r3], #4
 800531a:	e7db      	b.n	80052d4 <__multiply+0x50>
 800531c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005320:	f1ba 0f00 	cmp.w	sl, #0
 8005324:	d020      	beq.n	8005368 <__multiply+0xe4>
 8005326:	f105 0e14 	add.w	lr, r5, #20
 800532a:	46b1      	mov	r9, r6
 800532c:	2200      	movs	r2, #0
 800532e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005332:	f8d9 b000 	ldr.w	fp, [r9]
 8005336:	b2a1      	uxth	r1, r4
 8005338:	fa1f fb8b 	uxth.w	fp, fp
 800533c:	fb0a b101 	mla	r1, sl, r1, fp
 8005340:	4411      	add	r1, r2
 8005342:	f8d9 2000 	ldr.w	r2, [r9]
 8005346:	0c24      	lsrs	r4, r4, #16
 8005348:	0c12      	lsrs	r2, r2, #16
 800534a:	fb0a 2404 	mla	r4, sl, r4, r2
 800534e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005352:	b289      	uxth	r1, r1
 8005354:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005358:	45f4      	cmp	ip, lr
 800535a:	f849 1b04 	str.w	r1, [r9], #4
 800535e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005362:	d8e4      	bhi.n	800532e <__multiply+0xaa>
 8005364:	9901      	ldr	r1, [sp, #4]
 8005366:	5072      	str	r2, [r6, r1]
 8005368:	9a03      	ldr	r2, [sp, #12]
 800536a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800536e:	3304      	adds	r3, #4
 8005370:	f1b9 0f00 	cmp.w	r9, #0
 8005374:	d01f      	beq.n	80053b6 <__multiply+0x132>
 8005376:	6834      	ldr	r4, [r6, #0]
 8005378:	f105 0114 	add.w	r1, r5, #20
 800537c:	46b6      	mov	lr, r6
 800537e:	f04f 0a00 	mov.w	sl, #0
 8005382:	880a      	ldrh	r2, [r1, #0]
 8005384:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005388:	fb09 b202 	mla	r2, r9, r2, fp
 800538c:	4492      	add	sl, r2
 800538e:	b2a4      	uxth	r4, r4
 8005390:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005394:	f84e 4b04 	str.w	r4, [lr], #4
 8005398:	f851 4b04 	ldr.w	r4, [r1], #4
 800539c:	f8be 2000 	ldrh.w	r2, [lr]
 80053a0:	0c24      	lsrs	r4, r4, #16
 80053a2:	fb09 2404 	mla	r4, r9, r4, r2
 80053a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80053aa:	458c      	cmp	ip, r1
 80053ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80053b0:	d8e7      	bhi.n	8005382 <__multiply+0xfe>
 80053b2:	9a01      	ldr	r2, [sp, #4]
 80053b4:	50b4      	str	r4, [r6, r2]
 80053b6:	3604      	adds	r6, #4
 80053b8:	e7a3      	b.n	8005302 <__multiply+0x7e>
 80053ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1a5      	bne.n	800530e <__multiply+0x8a>
 80053c2:	3f01      	subs	r7, #1
 80053c4:	e7a1      	b.n	800530a <__multiply+0x86>
 80053c6:	bf00      	nop
 80053c8:	08007139 	.word	0x08007139
 80053cc:	0800714a 	.word	0x0800714a

080053d0 <__pow5mult>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	4615      	mov	r5, r2
 80053d6:	f012 0203 	ands.w	r2, r2, #3
 80053da:	4606      	mov	r6, r0
 80053dc:	460f      	mov	r7, r1
 80053de:	d007      	beq.n	80053f0 <__pow5mult+0x20>
 80053e0:	4c25      	ldr	r4, [pc, #148]	; (8005478 <__pow5mult+0xa8>)
 80053e2:	3a01      	subs	r2, #1
 80053e4:	2300      	movs	r3, #0
 80053e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053ea:	f7ff fe9b 	bl	8005124 <__multadd>
 80053ee:	4607      	mov	r7, r0
 80053f0:	10ad      	asrs	r5, r5, #2
 80053f2:	d03d      	beq.n	8005470 <__pow5mult+0xa0>
 80053f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053f6:	b97c      	cbnz	r4, 8005418 <__pow5mult+0x48>
 80053f8:	2010      	movs	r0, #16
 80053fa:	f7ff fe1b 	bl	8005034 <malloc>
 80053fe:	4602      	mov	r2, r0
 8005400:	6270      	str	r0, [r6, #36]	; 0x24
 8005402:	b928      	cbnz	r0, 8005410 <__pow5mult+0x40>
 8005404:	4b1d      	ldr	r3, [pc, #116]	; (800547c <__pow5mult+0xac>)
 8005406:	481e      	ldr	r0, [pc, #120]	; (8005480 <__pow5mult+0xb0>)
 8005408:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800540c:	f001 f874 	bl	80064f8 <__assert_func>
 8005410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005414:	6004      	str	r4, [r0, #0]
 8005416:	60c4      	str	r4, [r0, #12]
 8005418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800541c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005420:	b94c      	cbnz	r4, 8005436 <__pow5mult+0x66>
 8005422:	f240 2171 	movw	r1, #625	; 0x271
 8005426:	4630      	mov	r0, r6
 8005428:	f7ff ff16 	bl	8005258 <__i2b>
 800542c:	2300      	movs	r3, #0
 800542e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005432:	4604      	mov	r4, r0
 8005434:	6003      	str	r3, [r0, #0]
 8005436:	f04f 0900 	mov.w	r9, #0
 800543a:	07eb      	lsls	r3, r5, #31
 800543c:	d50a      	bpl.n	8005454 <__pow5mult+0x84>
 800543e:	4639      	mov	r1, r7
 8005440:	4622      	mov	r2, r4
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ff1e 	bl	8005284 <__multiply>
 8005448:	4639      	mov	r1, r7
 800544a:	4680      	mov	r8, r0
 800544c:	4630      	mov	r0, r6
 800544e:	f7ff fe47 	bl	80050e0 <_Bfree>
 8005452:	4647      	mov	r7, r8
 8005454:	106d      	asrs	r5, r5, #1
 8005456:	d00b      	beq.n	8005470 <__pow5mult+0xa0>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	b938      	cbnz	r0, 800546c <__pow5mult+0x9c>
 800545c:	4622      	mov	r2, r4
 800545e:	4621      	mov	r1, r4
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff ff0f 	bl	8005284 <__multiply>
 8005466:	6020      	str	r0, [r4, #0]
 8005468:	f8c0 9000 	str.w	r9, [r0]
 800546c:	4604      	mov	r4, r0
 800546e:	e7e4      	b.n	800543a <__pow5mult+0x6a>
 8005470:	4638      	mov	r0, r7
 8005472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005476:	bf00      	nop
 8005478:	080072a0 	.word	0x080072a0
 800547c:	080070c3 	.word	0x080070c3
 8005480:	0800714a 	.word	0x0800714a

08005484 <__lshift>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	460c      	mov	r4, r1
 800548a:	6849      	ldr	r1, [r1, #4]
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	4607      	mov	r7, r0
 8005496:	4691      	mov	r9, r2
 8005498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800549c:	f108 0601 	add.w	r6, r8, #1
 80054a0:	42b3      	cmp	r3, r6
 80054a2:	db0b      	blt.n	80054bc <__lshift+0x38>
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff fddb 	bl	8005060 <_Balloc>
 80054aa:	4605      	mov	r5, r0
 80054ac:	b948      	cbnz	r0, 80054c2 <__lshift+0x3e>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <__lshift+0xd0>)
 80054b2:	4829      	ldr	r0, [pc, #164]	; (8005558 <__lshift+0xd4>)
 80054b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80054b8:	f001 f81e 	bl	80064f8 <__assert_func>
 80054bc:	3101      	adds	r1, #1
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	e7ee      	b.n	80054a0 <__lshift+0x1c>
 80054c2:	2300      	movs	r3, #0
 80054c4:	f100 0114 	add.w	r1, r0, #20
 80054c8:	f100 0210 	add.w	r2, r0, #16
 80054cc:	4618      	mov	r0, r3
 80054ce:	4553      	cmp	r3, sl
 80054d0:	db33      	blt.n	800553a <__lshift+0xb6>
 80054d2:	6920      	ldr	r0, [r4, #16]
 80054d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054d8:	f104 0314 	add.w	r3, r4, #20
 80054dc:	f019 091f 	ands.w	r9, r9, #31
 80054e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054e8:	d02b      	beq.n	8005542 <__lshift+0xbe>
 80054ea:	f1c9 0e20 	rsb	lr, r9, #32
 80054ee:	468a      	mov	sl, r1
 80054f0:	2200      	movs	r2, #0
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	fa00 f009 	lsl.w	r0, r0, r9
 80054f8:	4302      	orrs	r2, r0
 80054fa:	f84a 2b04 	str.w	r2, [sl], #4
 80054fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005502:	459c      	cmp	ip, r3
 8005504:	fa22 f20e 	lsr.w	r2, r2, lr
 8005508:	d8f3      	bhi.n	80054f2 <__lshift+0x6e>
 800550a:	ebac 0304 	sub.w	r3, ip, r4
 800550e:	3b15      	subs	r3, #21
 8005510:	f023 0303 	bic.w	r3, r3, #3
 8005514:	3304      	adds	r3, #4
 8005516:	f104 0015 	add.w	r0, r4, #21
 800551a:	4584      	cmp	ip, r0
 800551c:	bf38      	it	cc
 800551e:	2304      	movcc	r3, #4
 8005520:	50ca      	str	r2, [r1, r3]
 8005522:	b10a      	cbz	r2, 8005528 <__lshift+0xa4>
 8005524:	f108 0602 	add.w	r6, r8, #2
 8005528:	3e01      	subs	r6, #1
 800552a:	4638      	mov	r0, r7
 800552c:	612e      	str	r6, [r5, #16]
 800552e:	4621      	mov	r1, r4
 8005530:	f7ff fdd6 	bl	80050e0 <_Bfree>
 8005534:	4628      	mov	r0, r5
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	f842 0f04 	str.w	r0, [r2, #4]!
 800553e:	3301      	adds	r3, #1
 8005540:	e7c5      	b.n	80054ce <__lshift+0x4a>
 8005542:	3904      	subs	r1, #4
 8005544:	f853 2b04 	ldr.w	r2, [r3], #4
 8005548:	f841 2f04 	str.w	r2, [r1, #4]!
 800554c:	459c      	cmp	ip, r3
 800554e:	d8f9      	bhi.n	8005544 <__lshift+0xc0>
 8005550:	e7ea      	b.n	8005528 <__lshift+0xa4>
 8005552:	bf00      	nop
 8005554:	08007139 	.word	0x08007139
 8005558:	0800714a 	.word	0x0800714a

0800555c <__mcmp>:
 800555c:	b530      	push	{r4, r5, lr}
 800555e:	6902      	ldr	r2, [r0, #16]
 8005560:	690c      	ldr	r4, [r1, #16]
 8005562:	1b12      	subs	r2, r2, r4
 8005564:	d10e      	bne.n	8005584 <__mcmp+0x28>
 8005566:	f100 0314 	add.w	r3, r0, #20
 800556a:	3114      	adds	r1, #20
 800556c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005570:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005574:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005578:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800557c:	42a5      	cmp	r5, r4
 800557e:	d003      	beq.n	8005588 <__mcmp+0x2c>
 8005580:	d305      	bcc.n	800558e <__mcmp+0x32>
 8005582:	2201      	movs	r2, #1
 8005584:	4610      	mov	r0, r2
 8005586:	bd30      	pop	{r4, r5, pc}
 8005588:	4283      	cmp	r3, r0
 800558a:	d3f3      	bcc.n	8005574 <__mcmp+0x18>
 800558c:	e7fa      	b.n	8005584 <__mcmp+0x28>
 800558e:	f04f 32ff 	mov.w	r2, #4294967295
 8005592:	e7f7      	b.n	8005584 <__mcmp+0x28>

08005594 <__mdiff>:
 8005594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	460c      	mov	r4, r1
 800559a:	4606      	mov	r6, r0
 800559c:	4611      	mov	r1, r2
 800559e:	4620      	mov	r0, r4
 80055a0:	4617      	mov	r7, r2
 80055a2:	f7ff ffdb 	bl	800555c <__mcmp>
 80055a6:	1e05      	subs	r5, r0, #0
 80055a8:	d110      	bne.n	80055cc <__mdiff+0x38>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff fd57 	bl	8005060 <_Balloc>
 80055b2:	b930      	cbnz	r0, 80055c2 <__mdiff+0x2e>
 80055b4:	4b39      	ldr	r3, [pc, #228]	; (800569c <__mdiff+0x108>)
 80055b6:	4602      	mov	r2, r0
 80055b8:	f240 2132 	movw	r1, #562	; 0x232
 80055bc:	4838      	ldr	r0, [pc, #224]	; (80056a0 <__mdiff+0x10c>)
 80055be:	f000 ff9b 	bl	80064f8 <__assert_func>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055cc:	bfa4      	itt	ge
 80055ce:	463b      	movge	r3, r7
 80055d0:	4627      	movge	r7, r4
 80055d2:	4630      	mov	r0, r6
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	bfa6      	itte	ge
 80055d8:	461c      	movge	r4, r3
 80055da:	2500      	movge	r5, #0
 80055dc:	2501      	movlt	r5, #1
 80055de:	f7ff fd3f 	bl	8005060 <_Balloc>
 80055e2:	b920      	cbnz	r0, 80055ee <__mdiff+0x5a>
 80055e4:	4b2d      	ldr	r3, [pc, #180]	; (800569c <__mdiff+0x108>)
 80055e6:	4602      	mov	r2, r0
 80055e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80055ec:	e7e6      	b.n	80055bc <__mdiff+0x28>
 80055ee:	693e      	ldr	r6, [r7, #16]
 80055f0:	60c5      	str	r5, [r0, #12]
 80055f2:	6925      	ldr	r5, [r4, #16]
 80055f4:	f107 0114 	add.w	r1, r7, #20
 80055f8:	f104 0914 	add.w	r9, r4, #20
 80055fc:	f100 0e14 	add.w	lr, r0, #20
 8005600:	f107 0210 	add.w	r2, r7, #16
 8005604:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005608:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800560c:	46f2      	mov	sl, lr
 800560e:	2700      	movs	r7, #0
 8005610:	f859 3b04 	ldr.w	r3, [r9], #4
 8005614:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005618:	fa1f f883 	uxth.w	r8, r3
 800561c:	fa17 f78b 	uxtah	r7, r7, fp
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	eba7 0808 	sub.w	r8, r7, r8
 8005626:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800562a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800562e:	fa1f f888 	uxth.w	r8, r8
 8005632:	141f      	asrs	r7, r3, #16
 8005634:	454d      	cmp	r5, r9
 8005636:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800563a:	f84a 3b04 	str.w	r3, [sl], #4
 800563e:	d8e7      	bhi.n	8005610 <__mdiff+0x7c>
 8005640:	1b2b      	subs	r3, r5, r4
 8005642:	3b15      	subs	r3, #21
 8005644:	f023 0303 	bic.w	r3, r3, #3
 8005648:	3304      	adds	r3, #4
 800564a:	3415      	adds	r4, #21
 800564c:	42a5      	cmp	r5, r4
 800564e:	bf38      	it	cc
 8005650:	2304      	movcc	r3, #4
 8005652:	4419      	add	r1, r3
 8005654:	4473      	add	r3, lr
 8005656:	469e      	mov	lr, r3
 8005658:	460d      	mov	r5, r1
 800565a:	4565      	cmp	r5, ip
 800565c:	d30e      	bcc.n	800567c <__mdiff+0xe8>
 800565e:	f10c 0203 	add.w	r2, ip, #3
 8005662:	1a52      	subs	r2, r2, r1
 8005664:	f022 0203 	bic.w	r2, r2, #3
 8005668:	3903      	subs	r1, #3
 800566a:	458c      	cmp	ip, r1
 800566c:	bf38      	it	cc
 800566e:	2200      	movcc	r2, #0
 8005670:	441a      	add	r2, r3
 8005672:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005676:	b17b      	cbz	r3, 8005698 <__mdiff+0x104>
 8005678:	6106      	str	r6, [r0, #16]
 800567a:	e7a5      	b.n	80055c8 <__mdiff+0x34>
 800567c:	f855 8b04 	ldr.w	r8, [r5], #4
 8005680:	fa17 f488 	uxtah	r4, r7, r8
 8005684:	1422      	asrs	r2, r4, #16
 8005686:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800568a:	b2a4      	uxth	r4, r4
 800568c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005690:	f84e 4b04 	str.w	r4, [lr], #4
 8005694:	1417      	asrs	r7, r2, #16
 8005696:	e7e0      	b.n	800565a <__mdiff+0xc6>
 8005698:	3e01      	subs	r6, #1
 800569a:	e7ea      	b.n	8005672 <__mdiff+0xde>
 800569c:	08007139 	.word	0x08007139
 80056a0:	0800714a 	.word	0x0800714a

080056a4 <__d2b>:
 80056a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056a8:	4689      	mov	r9, r1
 80056aa:	2101      	movs	r1, #1
 80056ac:	ec57 6b10 	vmov	r6, r7, d0
 80056b0:	4690      	mov	r8, r2
 80056b2:	f7ff fcd5 	bl	8005060 <_Balloc>
 80056b6:	4604      	mov	r4, r0
 80056b8:	b930      	cbnz	r0, 80056c8 <__d2b+0x24>
 80056ba:	4602      	mov	r2, r0
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <__d2b+0xb0>)
 80056be:	4826      	ldr	r0, [pc, #152]	; (8005758 <__d2b+0xb4>)
 80056c0:	f240 310a 	movw	r1, #778	; 0x30a
 80056c4:	f000 ff18 	bl	80064f8 <__assert_func>
 80056c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80056cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056d0:	bb35      	cbnz	r5, 8005720 <__d2b+0x7c>
 80056d2:	2e00      	cmp	r6, #0
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	d028      	beq.n	800572a <__d2b+0x86>
 80056d8:	4668      	mov	r0, sp
 80056da:	9600      	str	r6, [sp, #0]
 80056dc:	f7ff fd8c 	bl	80051f8 <__lo0bits>
 80056e0:	9900      	ldr	r1, [sp, #0]
 80056e2:	b300      	cbz	r0, 8005726 <__d2b+0x82>
 80056e4:	9a01      	ldr	r2, [sp, #4]
 80056e6:	f1c0 0320 	rsb	r3, r0, #32
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	430b      	orrs	r3, r1
 80056f0:	40c2      	lsrs	r2, r0
 80056f2:	6163      	str	r3, [r4, #20]
 80056f4:	9201      	str	r2, [sp, #4]
 80056f6:	9b01      	ldr	r3, [sp, #4]
 80056f8:	61a3      	str	r3, [r4, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bf14      	ite	ne
 80056fe:	2202      	movne	r2, #2
 8005700:	2201      	moveq	r2, #1
 8005702:	6122      	str	r2, [r4, #16]
 8005704:	b1d5      	cbz	r5, 800573c <__d2b+0x98>
 8005706:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800570a:	4405      	add	r5, r0
 800570c:	f8c9 5000 	str.w	r5, [r9]
 8005710:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005714:	f8c8 0000 	str.w	r0, [r8]
 8005718:	4620      	mov	r0, r4
 800571a:	b003      	add	sp, #12
 800571c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005724:	e7d5      	b.n	80056d2 <__d2b+0x2e>
 8005726:	6161      	str	r1, [r4, #20]
 8005728:	e7e5      	b.n	80056f6 <__d2b+0x52>
 800572a:	a801      	add	r0, sp, #4
 800572c:	f7ff fd64 	bl	80051f8 <__lo0bits>
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	6163      	str	r3, [r4, #20]
 8005734:	2201      	movs	r2, #1
 8005736:	6122      	str	r2, [r4, #16]
 8005738:	3020      	adds	r0, #32
 800573a:	e7e3      	b.n	8005704 <__d2b+0x60>
 800573c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005740:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005744:	f8c9 0000 	str.w	r0, [r9]
 8005748:	6918      	ldr	r0, [r3, #16]
 800574a:	f7ff fd35 	bl	80051b8 <__hi0bits>
 800574e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005752:	e7df      	b.n	8005714 <__d2b+0x70>
 8005754:	08007139 	.word	0x08007139
 8005758:	0800714a 	.word	0x0800714a

0800575c <_calloc_r>:
 800575c:	b513      	push	{r0, r1, r4, lr}
 800575e:	434a      	muls	r2, r1
 8005760:	4611      	mov	r1, r2
 8005762:	9201      	str	r2, [sp, #4]
 8005764:	f000 f85a 	bl	800581c <_malloc_r>
 8005768:	4604      	mov	r4, r0
 800576a:	b118      	cbz	r0, 8005774 <_calloc_r+0x18>
 800576c:	9a01      	ldr	r2, [sp, #4]
 800576e:	2100      	movs	r1, #0
 8005770:	f7fe f894 	bl	800389c <memset>
 8005774:	4620      	mov	r0, r4
 8005776:	b002      	add	sp, #8
 8005778:	bd10      	pop	{r4, pc}
	...

0800577c <_free_r>:
 800577c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800577e:	2900      	cmp	r1, #0
 8005780:	d048      	beq.n	8005814 <_free_r+0x98>
 8005782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005786:	9001      	str	r0, [sp, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f1a1 0404 	sub.w	r4, r1, #4
 800578e:	bfb8      	it	lt
 8005790:	18e4      	addlt	r4, r4, r3
 8005792:	f001 f8c7 	bl	8006924 <__malloc_lock>
 8005796:	4a20      	ldr	r2, [pc, #128]	; (8005818 <_free_r+0x9c>)
 8005798:	9801      	ldr	r0, [sp, #4]
 800579a:	6813      	ldr	r3, [r2, #0]
 800579c:	4615      	mov	r5, r2
 800579e:	b933      	cbnz	r3, 80057ae <_free_r+0x32>
 80057a0:	6063      	str	r3, [r4, #4]
 80057a2:	6014      	str	r4, [r2, #0]
 80057a4:	b003      	add	sp, #12
 80057a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057aa:	f001 b8c1 	b.w	8006930 <__malloc_unlock>
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	d90b      	bls.n	80057ca <_free_r+0x4e>
 80057b2:	6821      	ldr	r1, [r4, #0]
 80057b4:	1862      	adds	r2, r4, r1
 80057b6:	4293      	cmp	r3, r2
 80057b8:	bf04      	itt	eq
 80057ba:	681a      	ldreq	r2, [r3, #0]
 80057bc:	685b      	ldreq	r3, [r3, #4]
 80057be:	6063      	str	r3, [r4, #4]
 80057c0:	bf04      	itt	eq
 80057c2:	1852      	addeq	r2, r2, r1
 80057c4:	6022      	streq	r2, [r4, #0]
 80057c6:	602c      	str	r4, [r5, #0]
 80057c8:	e7ec      	b.n	80057a4 <_free_r+0x28>
 80057ca:	461a      	mov	r2, r3
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	b10b      	cbz	r3, 80057d4 <_free_r+0x58>
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d9fa      	bls.n	80057ca <_free_r+0x4e>
 80057d4:	6811      	ldr	r1, [r2, #0]
 80057d6:	1855      	adds	r5, r2, r1
 80057d8:	42a5      	cmp	r5, r4
 80057da:	d10b      	bne.n	80057f4 <_free_r+0x78>
 80057dc:	6824      	ldr	r4, [r4, #0]
 80057de:	4421      	add	r1, r4
 80057e0:	1854      	adds	r4, r2, r1
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	6011      	str	r1, [r2, #0]
 80057e6:	d1dd      	bne.n	80057a4 <_free_r+0x28>
 80057e8:	681c      	ldr	r4, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	6053      	str	r3, [r2, #4]
 80057ee:	4421      	add	r1, r4
 80057f0:	6011      	str	r1, [r2, #0]
 80057f2:	e7d7      	b.n	80057a4 <_free_r+0x28>
 80057f4:	d902      	bls.n	80057fc <_free_r+0x80>
 80057f6:	230c      	movs	r3, #12
 80057f8:	6003      	str	r3, [r0, #0]
 80057fa:	e7d3      	b.n	80057a4 <_free_r+0x28>
 80057fc:	6825      	ldr	r5, [r4, #0]
 80057fe:	1961      	adds	r1, r4, r5
 8005800:	428b      	cmp	r3, r1
 8005802:	bf04      	itt	eq
 8005804:	6819      	ldreq	r1, [r3, #0]
 8005806:	685b      	ldreq	r3, [r3, #4]
 8005808:	6063      	str	r3, [r4, #4]
 800580a:	bf04      	itt	eq
 800580c:	1949      	addeq	r1, r1, r5
 800580e:	6021      	streq	r1, [r4, #0]
 8005810:	6054      	str	r4, [r2, #4]
 8005812:	e7c7      	b.n	80057a4 <_free_r+0x28>
 8005814:	b003      	add	sp, #12
 8005816:	bd30      	pop	{r4, r5, pc}
 8005818:	20000204 	.word	0x20000204

0800581c <_malloc_r>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	1ccd      	adds	r5, r1, #3
 8005820:	f025 0503 	bic.w	r5, r5, #3
 8005824:	3508      	adds	r5, #8
 8005826:	2d0c      	cmp	r5, #12
 8005828:	bf38      	it	cc
 800582a:	250c      	movcc	r5, #12
 800582c:	2d00      	cmp	r5, #0
 800582e:	4606      	mov	r6, r0
 8005830:	db01      	blt.n	8005836 <_malloc_r+0x1a>
 8005832:	42a9      	cmp	r1, r5
 8005834:	d903      	bls.n	800583e <_malloc_r+0x22>
 8005836:	230c      	movs	r3, #12
 8005838:	6033      	str	r3, [r6, #0]
 800583a:	2000      	movs	r0, #0
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583e:	f001 f871 	bl	8006924 <__malloc_lock>
 8005842:	4921      	ldr	r1, [pc, #132]	; (80058c8 <_malloc_r+0xac>)
 8005844:	680a      	ldr	r2, [r1, #0]
 8005846:	4614      	mov	r4, r2
 8005848:	b99c      	cbnz	r4, 8005872 <_malloc_r+0x56>
 800584a:	4f20      	ldr	r7, [pc, #128]	; (80058cc <_malloc_r+0xb0>)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	b923      	cbnz	r3, 800585a <_malloc_r+0x3e>
 8005850:	4621      	mov	r1, r4
 8005852:	4630      	mov	r0, r6
 8005854:	f000 fcc8 	bl	80061e8 <_sbrk_r>
 8005858:	6038      	str	r0, [r7, #0]
 800585a:	4629      	mov	r1, r5
 800585c:	4630      	mov	r0, r6
 800585e:	f000 fcc3 	bl	80061e8 <_sbrk_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d123      	bne.n	80058ae <_malloc_r+0x92>
 8005866:	230c      	movs	r3, #12
 8005868:	6033      	str	r3, [r6, #0]
 800586a:	4630      	mov	r0, r6
 800586c:	f001 f860 	bl	8006930 <__malloc_unlock>
 8005870:	e7e3      	b.n	800583a <_malloc_r+0x1e>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	1b5b      	subs	r3, r3, r5
 8005876:	d417      	bmi.n	80058a8 <_malloc_r+0x8c>
 8005878:	2b0b      	cmp	r3, #11
 800587a:	d903      	bls.n	8005884 <_malloc_r+0x68>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	441c      	add	r4, r3
 8005880:	6025      	str	r5, [r4, #0]
 8005882:	e004      	b.n	800588e <_malloc_r+0x72>
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	42a2      	cmp	r2, r4
 8005888:	bf0c      	ite	eq
 800588a:	600b      	streq	r3, [r1, #0]
 800588c:	6053      	strne	r3, [r2, #4]
 800588e:	4630      	mov	r0, r6
 8005890:	f001 f84e 	bl	8006930 <__malloc_unlock>
 8005894:	f104 000b 	add.w	r0, r4, #11
 8005898:	1d23      	adds	r3, r4, #4
 800589a:	f020 0007 	bic.w	r0, r0, #7
 800589e:	1ac2      	subs	r2, r0, r3
 80058a0:	d0cc      	beq.n	800583c <_malloc_r+0x20>
 80058a2:	1a1b      	subs	r3, r3, r0
 80058a4:	50a3      	str	r3, [r4, r2]
 80058a6:	e7c9      	b.n	800583c <_malloc_r+0x20>
 80058a8:	4622      	mov	r2, r4
 80058aa:	6864      	ldr	r4, [r4, #4]
 80058ac:	e7cc      	b.n	8005848 <_malloc_r+0x2c>
 80058ae:	1cc4      	adds	r4, r0, #3
 80058b0:	f024 0403 	bic.w	r4, r4, #3
 80058b4:	42a0      	cmp	r0, r4
 80058b6:	d0e3      	beq.n	8005880 <_malloc_r+0x64>
 80058b8:	1a21      	subs	r1, r4, r0
 80058ba:	4630      	mov	r0, r6
 80058bc:	f000 fc94 	bl	80061e8 <_sbrk_r>
 80058c0:	3001      	adds	r0, #1
 80058c2:	d1dd      	bne.n	8005880 <_malloc_r+0x64>
 80058c4:	e7cf      	b.n	8005866 <_malloc_r+0x4a>
 80058c6:	bf00      	nop
 80058c8:	20000204 	.word	0x20000204
 80058cc:	20000208 	.word	0x20000208

080058d0 <__ssputs_r>:
 80058d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	688e      	ldr	r6, [r1, #8]
 80058d6:	429e      	cmp	r6, r3
 80058d8:	4682      	mov	sl, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4690      	mov	r8, r2
 80058de:	461f      	mov	r7, r3
 80058e0:	d838      	bhi.n	8005954 <__ssputs_r+0x84>
 80058e2:	898a      	ldrh	r2, [r1, #12]
 80058e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058e8:	d032      	beq.n	8005950 <__ssputs_r+0x80>
 80058ea:	6825      	ldr	r5, [r4, #0]
 80058ec:	6909      	ldr	r1, [r1, #16]
 80058ee:	eba5 0901 	sub.w	r9, r5, r1
 80058f2:	6965      	ldr	r5, [r4, #20]
 80058f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058fc:	3301      	adds	r3, #1
 80058fe:	444b      	add	r3, r9
 8005900:	106d      	asrs	r5, r5, #1
 8005902:	429d      	cmp	r5, r3
 8005904:	bf38      	it	cc
 8005906:	461d      	movcc	r5, r3
 8005908:	0553      	lsls	r3, r2, #21
 800590a:	d531      	bpl.n	8005970 <__ssputs_r+0xa0>
 800590c:	4629      	mov	r1, r5
 800590e:	f7ff ff85 	bl	800581c <_malloc_r>
 8005912:	4606      	mov	r6, r0
 8005914:	b950      	cbnz	r0, 800592c <__ssputs_r+0x5c>
 8005916:	230c      	movs	r3, #12
 8005918:	f8ca 3000 	str.w	r3, [sl]
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005922:	81a3      	strh	r3, [r4, #12]
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592c:	6921      	ldr	r1, [r4, #16]
 800592e:	464a      	mov	r2, r9
 8005930:	f7ff fb88 	bl	8005044 <memcpy>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	6126      	str	r6, [r4, #16]
 8005942:	6165      	str	r5, [r4, #20]
 8005944:	444e      	add	r6, r9
 8005946:	eba5 0509 	sub.w	r5, r5, r9
 800594a:	6026      	str	r6, [r4, #0]
 800594c:	60a5      	str	r5, [r4, #8]
 800594e:	463e      	mov	r6, r7
 8005950:	42be      	cmp	r6, r7
 8005952:	d900      	bls.n	8005956 <__ssputs_r+0x86>
 8005954:	463e      	mov	r6, r7
 8005956:	4632      	mov	r2, r6
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	4641      	mov	r1, r8
 800595c:	f000 ffc8 	bl	80068f0 <memmove>
 8005960:	68a3      	ldr	r3, [r4, #8]
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	1b9b      	subs	r3, r3, r6
 8005966:	4432      	add	r2, r6
 8005968:	60a3      	str	r3, [r4, #8]
 800596a:	6022      	str	r2, [r4, #0]
 800596c:	2000      	movs	r0, #0
 800596e:	e7db      	b.n	8005928 <__ssputs_r+0x58>
 8005970:	462a      	mov	r2, r5
 8005972:	f000 ffe3 	bl	800693c <_realloc_r>
 8005976:	4606      	mov	r6, r0
 8005978:	2800      	cmp	r0, #0
 800597a:	d1e1      	bne.n	8005940 <__ssputs_r+0x70>
 800597c:	6921      	ldr	r1, [r4, #16]
 800597e:	4650      	mov	r0, sl
 8005980:	f7ff fefc 	bl	800577c <_free_r>
 8005984:	e7c7      	b.n	8005916 <__ssputs_r+0x46>
	...

08005988 <_svfiprintf_r>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	4698      	mov	r8, r3
 800598e:	898b      	ldrh	r3, [r1, #12]
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	b09d      	sub	sp, #116	; 0x74
 8005994:	4607      	mov	r7, r0
 8005996:	460d      	mov	r5, r1
 8005998:	4614      	mov	r4, r2
 800599a:	d50e      	bpl.n	80059ba <_svfiprintf_r+0x32>
 800599c:	690b      	ldr	r3, [r1, #16]
 800599e:	b963      	cbnz	r3, 80059ba <_svfiprintf_r+0x32>
 80059a0:	2140      	movs	r1, #64	; 0x40
 80059a2:	f7ff ff3b 	bl	800581c <_malloc_r>
 80059a6:	6028      	str	r0, [r5, #0]
 80059a8:	6128      	str	r0, [r5, #16]
 80059aa:	b920      	cbnz	r0, 80059b6 <_svfiprintf_r+0x2e>
 80059ac:	230c      	movs	r3, #12
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	e0d1      	b.n	8005b5a <_svfiprintf_r+0x1d2>
 80059b6:	2340      	movs	r3, #64	; 0x40
 80059b8:	616b      	str	r3, [r5, #20]
 80059ba:	2300      	movs	r3, #0
 80059bc:	9309      	str	r3, [sp, #36]	; 0x24
 80059be:	2320      	movs	r3, #32
 80059c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c8:	2330      	movs	r3, #48	; 0x30
 80059ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b74 <_svfiprintf_r+0x1ec>
 80059ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059d2:	f04f 0901 	mov.w	r9, #1
 80059d6:	4623      	mov	r3, r4
 80059d8:	469a      	mov	sl, r3
 80059da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059de:	b10a      	cbz	r2, 80059e4 <_svfiprintf_r+0x5c>
 80059e0:	2a25      	cmp	r2, #37	; 0x25
 80059e2:	d1f9      	bne.n	80059d8 <_svfiprintf_r+0x50>
 80059e4:	ebba 0b04 	subs.w	fp, sl, r4
 80059e8:	d00b      	beq.n	8005a02 <_svfiprintf_r+0x7a>
 80059ea:	465b      	mov	r3, fp
 80059ec:	4622      	mov	r2, r4
 80059ee:	4629      	mov	r1, r5
 80059f0:	4638      	mov	r0, r7
 80059f2:	f7ff ff6d 	bl	80058d0 <__ssputs_r>
 80059f6:	3001      	adds	r0, #1
 80059f8:	f000 80aa 	beq.w	8005b50 <_svfiprintf_r+0x1c8>
 80059fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059fe:	445a      	add	r2, fp
 8005a00:	9209      	str	r2, [sp, #36]	; 0x24
 8005a02:	f89a 3000 	ldrb.w	r3, [sl]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 80a2 	beq.w	8005b50 <_svfiprintf_r+0x1c8>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a16:	f10a 0a01 	add.w	sl, sl, #1
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	9307      	str	r3, [sp, #28]
 8005a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a22:	931a      	str	r3, [sp, #104]	; 0x68
 8005a24:	4654      	mov	r4, sl
 8005a26:	2205      	movs	r2, #5
 8005a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2c:	4851      	ldr	r0, [pc, #324]	; (8005b74 <_svfiprintf_r+0x1ec>)
 8005a2e:	f7fa fbd7 	bl	80001e0 <memchr>
 8005a32:	9a04      	ldr	r2, [sp, #16]
 8005a34:	b9d8      	cbnz	r0, 8005a6e <_svfiprintf_r+0xe6>
 8005a36:	06d0      	lsls	r0, r2, #27
 8005a38:	bf44      	itt	mi
 8005a3a:	2320      	movmi	r3, #32
 8005a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a40:	0711      	lsls	r1, r2, #28
 8005a42:	bf44      	itt	mi
 8005a44:	232b      	movmi	r3, #43	; 0x2b
 8005a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a50:	d015      	beq.n	8005a7e <_svfiprintf_r+0xf6>
 8005a52:	9a07      	ldr	r2, [sp, #28]
 8005a54:	4654      	mov	r4, sl
 8005a56:	2000      	movs	r0, #0
 8005a58:	f04f 0c0a 	mov.w	ip, #10
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a62:	3b30      	subs	r3, #48	; 0x30
 8005a64:	2b09      	cmp	r3, #9
 8005a66:	d94e      	bls.n	8005b06 <_svfiprintf_r+0x17e>
 8005a68:	b1b0      	cbz	r0, 8005a98 <_svfiprintf_r+0x110>
 8005a6a:	9207      	str	r2, [sp, #28]
 8005a6c:	e014      	b.n	8005a98 <_svfiprintf_r+0x110>
 8005a6e:	eba0 0308 	sub.w	r3, r0, r8
 8005a72:	fa09 f303 	lsl.w	r3, r9, r3
 8005a76:	4313      	orrs	r3, r2
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	46a2      	mov	sl, r4
 8005a7c:	e7d2      	b.n	8005a24 <_svfiprintf_r+0x9c>
 8005a7e:	9b03      	ldr	r3, [sp, #12]
 8005a80:	1d19      	adds	r1, r3, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	9103      	str	r1, [sp, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfbb      	ittet	lt
 8005a8a:	425b      	neglt	r3, r3
 8005a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a90:	9307      	strge	r3, [sp, #28]
 8005a92:	9307      	strlt	r3, [sp, #28]
 8005a94:	bfb8      	it	lt
 8005a96:	9204      	strlt	r2, [sp, #16]
 8005a98:	7823      	ldrb	r3, [r4, #0]
 8005a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a9c:	d10c      	bne.n	8005ab8 <_svfiprintf_r+0x130>
 8005a9e:	7863      	ldrb	r3, [r4, #1]
 8005aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa2:	d135      	bne.n	8005b10 <_svfiprintf_r+0x188>
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	1d1a      	adds	r2, r3, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	9203      	str	r2, [sp, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bfb8      	it	lt
 8005ab0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ab4:	3402      	adds	r4, #2
 8005ab6:	9305      	str	r3, [sp, #20]
 8005ab8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b84 <_svfiprintf_r+0x1fc>
 8005abc:	7821      	ldrb	r1, [r4, #0]
 8005abe:	2203      	movs	r2, #3
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	f7fa fb8d 	bl	80001e0 <memchr>
 8005ac6:	b140      	cbz	r0, 8005ada <_svfiprintf_r+0x152>
 8005ac8:	2340      	movs	r3, #64	; 0x40
 8005aca:	eba0 000a 	sub.w	r0, r0, sl
 8005ace:	fa03 f000 	lsl.w	r0, r3, r0
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	4303      	orrs	r3, r0
 8005ad6:	3401      	adds	r4, #1
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ade:	4826      	ldr	r0, [pc, #152]	; (8005b78 <_svfiprintf_r+0x1f0>)
 8005ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ae4:	2206      	movs	r2, #6
 8005ae6:	f7fa fb7b 	bl	80001e0 <memchr>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d038      	beq.n	8005b60 <_svfiprintf_r+0x1d8>
 8005aee:	4b23      	ldr	r3, [pc, #140]	; (8005b7c <_svfiprintf_r+0x1f4>)
 8005af0:	bb1b      	cbnz	r3, 8005b3a <_svfiprintf_r+0x1b2>
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	3307      	adds	r3, #7
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	3308      	adds	r3, #8
 8005afc:	9303      	str	r3, [sp, #12]
 8005afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b00:	4433      	add	r3, r6
 8005b02:	9309      	str	r3, [sp, #36]	; 0x24
 8005b04:	e767      	b.n	80059d6 <_svfiprintf_r+0x4e>
 8005b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	e7a5      	b.n	8005a5c <_svfiprintf_r+0xd4>
 8005b10:	2300      	movs	r3, #0
 8005b12:	3401      	adds	r4, #1
 8005b14:	9305      	str	r3, [sp, #20]
 8005b16:	4619      	mov	r1, r3
 8005b18:	f04f 0c0a 	mov.w	ip, #10
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b22:	3a30      	subs	r2, #48	; 0x30
 8005b24:	2a09      	cmp	r2, #9
 8005b26:	d903      	bls.n	8005b30 <_svfiprintf_r+0x1a8>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0c5      	beq.n	8005ab8 <_svfiprintf_r+0x130>
 8005b2c:	9105      	str	r1, [sp, #20]
 8005b2e:	e7c3      	b.n	8005ab8 <_svfiprintf_r+0x130>
 8005b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b34:	4604      	mov	r4, r0
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7f0      	b.n	8005b1c <_svfiprintf_r+0x194>
 8005b3a:	ab03      	add	r3, sp, #12
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	462a      	mov	r2, r5
 8005b40:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <_svfiprintf_r+0x1f8>)
 8005b42:	a904      	add	r1, sp, #16
 8005b44:	4638      	mov	r0, r7
 8005b46:	f7fd ff51 	bl	80039ec <_printf_float>
 8005b4a:	1c42      	adds	r2, r0, #1
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	d1d6      	bne.n	8005afe <_svfiprintf_r+0x176>
 8005b50:	89ab      	ldrh	r3, [r5, #12]
 8005b52:	065b      	lsls	r3, r3, #25
 8005b54:	f53f af2c 	bmi.w	80059b0 <_svfiprintf_r+0x28>
 8005b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b5a:	b01d      	add	sp, #116	; 0x74
 8005b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b60:	ab03      	add	r3, sp, #12
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	462a      	mov	r2, r5
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <_svfiprintf_r+0x1f8>)
 8005b68:	a904      	add	r1, sp, #16
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f7fe f9e2 	bl	8003f34 <_printf_i>
 8005b70:	e7eb      	b.n	8005b4a <_svfiprintf_r+0x1c2>
 8005b72:	bf00      	nop
 8005b74:	080072ac 	.word	0x080072ac
 8005b78:	080072b6 	.word	0x080072b6
 8005b7c:	080039ed 	.word	0x080039ed
 8005b80:	080058d1 	.word	0x080058d1
 8005b84:	080072b2 	.word	0x080072b2

08005b88 <_sungetc_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	1c4b      	adds	r3, r1, #1
 8005b8c:	4614      	mov	r4, r2
 8005b8e:	d103      	bne.n	8005b98 <_sungetc_r+0x10>
 8005b90:	f04f 35ff 	mov.w	r5, #4294967295
 8005b94:	4628      	mov	r0, r5
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	8993      	ldrh	r3, [r2, #12]
 8005b9a:	f023 0320 	bic.w	r3, r3, #32
 8005b9e:	8193      	strh	r3, [r2, #12]
 8005ba0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ba2:	6852      	ldr	r2, [r2, #4]
 8005ba4:	b2cd      	uxtb	r5, r1
 8005ba6:	b18b      	cbz	r3, 8005bcc <_sungetc_r+0x44>
 8005ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005baa:	4293      	cmp	r3, r2
 8005bac:	dd08      	ble.n	8005bc0 <_sungetc_r+0x38>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	1e5a      	subs	r2, r3, #1
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	6063      	str	r3, [r4, #4]
 8005bbe:	e7e9      	b.n	8005b94 <_sungetc_r+0xc>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	f000 fc5f 	bl	8006484 <__submore>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d0f1      	beq.n	8005bae <_sungetc_r+0x26>
 8005bca:	e7e1      	b.n	8005b90 <_sungetc_r+0x8>
 8005bcc:	6921      	ldr	r1, [r4, #16]
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	b151      	cbz	r1, 8005be8 <_sungetc_r+0x60>
 8005bd2:	4299      	cmp	r1, r3
 8005bd4:	d208      	bcs.n	8005be8 <_sungetc_r+0x60>
 8005bd6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005bda:	42a9      	cmp	r1, r5
 8005bdc:	d104      	bne.n	8005be8 <_sungetc_r+0x60>
 8005bde:	3b01      	subs	r3, #1
 8005be0:	3201      	adds	r2, #1
 8005be2:	6023      	str	r3, [r4, #0]
 8005be4:	6062      	str	r2, [r4, #4]
 8005be6:	e7d5      	b.n	8005b94 <_sungetc_r+0xc>
 8005be8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	63a3      	str	r3, [r4, #56]	; 0x38
 8005bf6:	4623      	mov	r3, r4
 8005bf8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7dc      	b.n	8005bbc <_sungetc_r+0x34>

08005c02 <__ssrefill_r>:
 8005c02:	b510      	push	{r4, lr}
 8005c04:	460c      	mov	r4, r1
 8005c06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005c08:	b169      	cbz	r1, 8005c26 <__ssrefill_r+0x24>
 8005c0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	d001      	beq.n	8005c16 <__ssrefill_r+0x14>
 8005c12:	f7ff fdb3 	bl	800577c <_free_r>
 8005c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c18:	6063      	str	r3, [r4, #4]
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8005c1e:	b113      	cbz	r3, 8005c26 <__ssrefill_r+0x24>
 8005c20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	f043 0320 	orr.w	r3, r3, #32
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3a:	e7f3      	b.n	8005c24 <__ssrefill_r+0x22>

08005c3c <__ssvfiscanf_r>:
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	460c      	mov	r4, r1
 8005c42:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005c46:	2100      	movs	r1, #0
 8005c48:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005c4c:	49b2      	ldr	r1, [pc, #712]	; (8005f18 <__ssvfiscanf_r+0x2dc>)
 8005c4e:	91a0      	str	r1, [sp, #640]	; 0x280
 8005c50:	f10d 0804 	add.w	r8, sp, #4
 8005c54:	49b1      	ldr	r1, [pc, #708]	; (8005f1c <__ssvfiscanf_r+0x2e0>)
 8005c56:	4fb2      	ldr	r7, [pc, #712]	; (8005f20 <__ssvfiscanf_r+0x2e4>)
 8005c58:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8005f24 <__ssvfiscanf_r+0x2e8>
 8005c5c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005c60:	4606      	mov	r6, r0
 8005c62:	91a1      	str	r1, [sp, #644]	; 0x284
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	f892 a000 	ldrb.w	sl, [r2]
 8005c6a:	f1ba 0f00 	cmp.w	sl, #0
 8005c6e:	f000 8151 	beq.w	8005f14 <__ssvfiscanf_r+0x2d8>
 8005c72:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8005c76:	f013 0308 	ands.w	r3, r3, #8
 8005c7a:	f102 0501 	add.w	r5, r2, #1
 8005c7e:	d019      	beq.n	8005cb4 <__ssvfiscanf_r+0x78>
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dd0f      	ble.n	8005ca6 <__ssvfiscanf_r+0x6a>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	781a      	ldrb	r2, [r3, #0]
 8005c8a:	5cba      	ldrb	r2, [r7, r2]
 8005c8c:	0712      	lsls	r2, r2, #28
 8005c8e:	d401      	bmi.n	8005c94 <__ssvfiscanf_r+0x58>
 8005c90:	462a      	mov	r2, r5
 8005c92:	e7e8      	b.n	8005c66 <__ssvfiscanf_r+0x2a>
 8005c94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005c96:	3201      	adds	r2, #1
 8005c98:	9245      	str	r2, [sp, #276]	; 0x114
 8005c9a:	6862      	ldr	r2, [r4, #4]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	3a01      	subs	r2, #1
 8005ca0:	6062      	str	r2, [r4, #4]
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	e7ec      	b.n	8005c80 <__ssvfiscanf_r+0x44>
 8005ca6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4630      	mov	r0, r6
 8005cac:	4798      	blx	r3
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d0e9      	beq.n	8005c86 <__ssvfiscanf_r+0x4a>
 8005cb2:	e7ed      	b.n	8005c90 <__ssvfiscanf_r+0x54>
 8005cb4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8005cb8:	f040 8083 	bne.w	8005dc2 <__ssvfiscanf_r+0x186>
 8005cbc:	9341      	str	r3, [sp, #260]	; 0x104
 8005cbe:	9343      	str	r3, [sp, #268]	; 0x10c
 8005cc0:	7853      	ldrb	r3, [r2, #1]
 8005cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc4:	bf02      	ittt	eq
 8005cc6:	2310      	moveq	r3, #16
 8005cc8:	1c95      	addeq	r5, r2, #2
 8005cca:	9341      	streq	r3, [sp, #260]	; 0x104
 8005ccc:	220a      	movs	r2, #10
 8005cce:	46ab      	mov	fp, r5
 8005cd0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8005cd4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005cd8:	2b09      	cmp	r3, #9
 8005cda:	d91d      	bls.n	8005d18 <__ssvfiscanf_r+0xdc>
 8005cdc:	4891      	ldr	r0, [pc, #580]	; (8005f24 <__ssvfiscanf_r+0x2e8>)
 8005cde:	2203      	movs	r2, #3
 8005ce0:	f7fa fa7e 	bl	80001e0 <memchr>
 8005ce4:	b140      	cbz	r0, 8005cf8 <__ssvfiscanf_r+0xbc>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	eba0 0009 	sub.w	r0, r0, r9
 8005cec:	fa03 f000 	lsl.w	r0, r3, r0
 8005cf0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005cf2:	4318      	orrs	r0, r3
 8005cf4:	9041      	str	r0, [sp, #260]	; 0x104
 8005cf6:	465d      	mov	r5, fp
 8005cf8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cfc:	2b78      	cmp	r3, #120	; 0x78
 8005cfe:	d806      	bhi.n	8005d0e <__ssvfiscanf_r+0xd2>
 8005d00:	2b57      	cmp	r3, #87	; 0x57
 8005d02:	d810      	bhi.n	8005d26 <__ssvfiscanf_r+0xea>
 8005d04:	2b25      	cmp	r3, #37	; 0x25
 8005d06:	d05c      	beq.n	8005dc2 <__ssvfiscanf_r+0x186>
 8005d08:	d856      	bhi.n	8005db8 <__ssvfiscanf_r+0x17c>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d074      	beq.n	8005df8 <__ssvfiscanf_r+0x1bc>
 8005d0e:	2303      	movs	r3, #3
 8005d10:	9347      	str	r3, [sp, #284]	; 0x11c
 8005d12:	230a      	movs	r3, #10
 8005d14:	9342      	str	r3, [sp, #264]	; 0x108
 8005d16:	e081      	b.n	8005e1c <__ssvfiscanf_r+0x1e0>
 8005d18:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005d1a:	fb02 1303 	mla	r3, r2, r3, r1
 8005d1e:	3b30      	subs	r3, #48	; 0x30
 8005d20:	9343      	str	r3, [sp, #268]	; 0x10c
 8005d22:	465d      	mov	r5, fp
 8005d24:	e7d3      	b.n	8005cce <__ssvfiscanf_r+0x92>
 8005d26:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005d2a:	2a20      	cmp	r2, #32
 8005d2c:	d8ef      	bhi.n	8005d0e <__ssvfiscanf_r+0xd2>
 8005d2e:	a101      	add	r1, pc, #4	; (adr r1, 8005d34 <__ssvfiscanf_r+0xf8>)
 8005d30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d34:	08005e07 	.word	0x08005e07
 8005d38:	08005d0f 	.word	0x08005d0f
 8005d3c:	08005d0f 	.word	0x08005d0f
 8005d40:	08005e65 	.word	0x08005e65
 8005d44:	08005d0f 	.word	0x08005d0f
 8005d48:	08005d0f 	.word	0x08005d0f
 8005d4c:	08005d0f 	.word	0x08005d0f
 8005d50:	08005d0f 	.word	0x08005d0f
 8005d54:	08005d0f 	.word	0x08005d0f
 8005d58:	08005d0f 	.word	0x08005d0f
 8005d5c:	08005d0f 	.word	0x08005d0f
 8005d60:	08005e7b 	.word	0x08005e7b
 8005d64:	08005e51 	.word	0x08005e51
 8005d68:	08005dbf 	.word	0x08005dbf
 8005d6c:	08005dbf 	.word	0x08005dbf
 8005d70:	08005dbf 	.word	0x08005dbf
 8005d74:	08005d0f 	.word	0x08005d0f
 8005d78:	08005e55 	.word	0x08005e55
 8005d7c:	08005d0f 	.word	0x08005d0f
 8005d80:	08005d0f 	.word	0x08005d0f
 8005d84:	08005d0f 	.word	0x08005d0f
 8005d88:	08005d0f 	.word	0x08005d0f
 8005d8c:	08005e8b 	.word	0x08005e8b
 8005d90:	08005e5d 	.word	0x08005e5d
 8005d94:	08005dff 	.word	0x08005dff
 8005d98:	08005d0f 	.word	0x08005d0f
 8005d9c:	08005d0f 	.word	0x08005d0f
 8005da0:	08005e87 	.word	0x08005e87
 8005da4:	08005d0f 	.word	0x08005d0f
 8005da8:	08005e51 	.word	0x08005e51
 8005dac:	08005d0f 	.word	0x08005d0f
 8005db0:	08005d0f 	.word	0x08005d0f
 8005db4:	08005e07 	.word	0x08005e07
 8005db8:	3b45      	subs	r3, #69	; 0x45
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d8a7      	bhi.n	8005d0e <__ssvfiscanf_r+0xd2>
 8005dbe:	2305      	movs	r3, #5
 8005dc0:	e02b      	b.n	8005e1a <__ssvfiscanf_r+0x1de>
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	dd0d      	ble.n	8005de4 <__ssvfiscanf_r+0x1a8>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	4552      	cmp	r2, sl
 8005dce:	f040 80a1 	bne.w	8005f14 <__ssvfiscanf_r+0x2d8>
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	6862      	ldr	r2, [r4, #4]
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005dda:	3a01      	subs	r2, #1
 8005ddc:	3301      	adds	r3, #1
 8005dde:	6062      	str	r2, [r4, #4]
 8005de0:	9345      	str	r3, [sp, #276]	; 0x114
 8005de2:	e755      	b.n	8005c90 <__ssvfiscanf_r+0x54>
 8005de4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005de6:	4621      	mov	r1, r4
 8005de8:	4630      	mov	r0, r6
 8005dea:	4798      	blx	r3
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d0eb      	beq.n	8005dc8 <__ssvfiscanf_r+0x18c>
 8005df0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005df2:	2800      	cmp	r0, #0
 8005df4:	f040 8084 	bne.w	8005f00 <__ssvfiscanf_r+0x2c4>
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfc:	e086      	b.n	8005f0c <__ssvfiscanf_r+0x2d0>
 8005dfe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005e00:	f042 0220 	orr.w	r2, r2, #32
 8005e04:	9241      	str	r2, [sp, #260]	; 0x104
 8005e06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e0c:	9241      	str	r2, [sp, #260]	; 0x104
 8005e0e:	2210      	movs	r2, #16
 8005e10:	2b6f      	cmp	r3, #111	; 0x6f
 8005e12:	9242      	str	r2, [sp, #264]	; 0x108
 8005e14:	bf34      	ite	cc
 8005e16:	2303      	movcc	r3, #3
 8005e18:	2304      	movcs	r3, #4
 8005e1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dd41      	ble.n	8005ea6 <__ssvfiscanf_r+0x26a>
 8005e22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005e24:	0659      	lsls	r1, r3, #25
 8005e26:	d404      	bmi.n	8005e32 <__ssvfiscanf_r+0x1f6>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	5cba      	ldrb	r2, [r7, r2]
 8005e2e:	0712      	lsls	r2, r2, #28
 8005e30:	d440      	bmi.n	8005eb4 <__ssvfiscanf_r+0x278>
 8005e32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	dc4f      	bgt.n	8005ed8 <__ssvfiscanf_r+0x29c>
 8005e38:	466b      	mov	r3, sp
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	a941      	add	r1, sp, #260	; 0x104
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f000 f874 	bl	8005f2c <_scanf_chars>
 8005e44:	2801      	cmp	r0, #1
 8005e46:	d065      	beq.n	8005f14 <__ssvfiscanf_r+0x2d8>
 8005e48:	2802      	cmp	r0, #2
 8005e4a:	f47f af21 	bne.w	8005c90 <__ssvfiscanf_r+0x54>
 8005e4e:	e7cf      	b.n	8005df0 <__ssvfiscanf_r+0x1b4>
 8005e50:	220a      	movs	r2, #10
 8005e52:	e7dd      	b.n	8005e10 <__ssvfiscanf_r+0x1d4>
 8005e54:	2300      	movs	r3, #0
 8005e56:	9342      	str	r3, [sp, #264]	; 0x108
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e7de      	b.n	8005e1a <__ssvfiscanf_r+0x1de>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	9342      	str	r3, [sp, #264]	; 0x108
 8005e60:	2304      	movs	r3, #4
 8005e62:	e7da      	b.n	8005e1a <__ssvfiscanf_r+0x1de>
 8005e64:	4629      	mov	r1, r5
 8005e66:	4640      	mov	r0, r8
 8005e68:	f000 f9ce 	bl	8006208 <__sccl>
 8005e6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e72:	9341      	str	r3, [sp, #260]	; 0x104
 8005e74:	4605      	mov	r5, r0
 8005e76:	2301      	movs	r3, #1
 8005e78:	e7cf      	b.n	8005e1a <__ssvfiscanf_r+0x1de>
 8005e7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e80:	9341      	str	r3, [sp, #260]	; 0x104
 8005e82:	2300      	movs	r3, #0
 8005e84:	e7c9      	b.n	8005e1a <__ssvfiscanf_r+0x1de>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e7c7      	b.n	8005e1a <__ssvfiscanf_r+0x1de>
 8005e8a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005e8c:	06c3      	lsls	r3, r0, #27
 8005e8e:	f53f aeff 	bmi.w	8005c90 <__ssvfiscanf_r+0x54>
 8005e92:	9b00      	ldr	r3, [sp, #0]
 8005e94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005e96:	1d19      	adds	r1, r3, #4
 8005e98:	9100      	str	r1, [sp, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	07c0      	lsls	r0, r0, #31
 8005e9e:	bf4c      	ite	mi
 8005ea0:	801a      	strhmi	r2, [r3, #0]
 8005ea2:	601a      	strpl	r2, [r3, #0]
 8005ea4:	e6f4      	b.n	8005c90 <__ssvfiscanf_r+0x54>
 8005ea6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4630      	mov	r0, r6
 8005eac:	4798      	blx	r3
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d0b7      	beq.n	8005e22 <__ssvfiscanf_r+0x1e6>
 8005eb2:	e79d      	b.n	8005df0 <__ssvfiscanf_r+0x1b4>
 8005eb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005eb6:	3201      	adds	r2, #1
 8005eb8:	9245      	str	r2, [sp, #276]	; 0x114
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	3a01      	subs	r2, #1
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	6062      	str	r2, [r4, #4]
 8005ec2:	dd02      	ble.n	8005eca <__ssvfiscanf_r+0x28e>
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	6023      	str	r3, [r4, #0]
 8005ec8:	e7ae      	b.n	8005e28 <__ssvfiscanf_r+0x1ec>
 8005eca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4630      	mov	r0, r6
 8005ed0:	4798      	blx	r3
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d0a8      	beq.n	8005e28 <__ssvfiscanf_r+0x1ec>
 8005ed6:	e78b      	b.n	8005df0 <__ssvfiscanf_r+0x1b4>
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	dc06      	bgt.n	8005eea <__ssvfiscanf_r+0x2ae>
 8005edc:	466b      	mov	r3, sp
 8005ede:	4622      	mov	r2, r4
 8005ee0:	a941      	add	r1, sp, #260	; 0x104
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 f87a 	bl	8005fdc <_scanf_i>
 8005ee8:	e7ac      	b.n	8005e44 <__ssvfiscanf_r+0x208>
 8005eea:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <__ssvfiscanf_r+0x2ec>)
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f43f aecf 	beq.w	8005c90 <__ssvfiscanf_r+0x54>
 8005ef2:	466b      	mov	r3, sp
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	a941      	add	r1, sp, #260	; 0x104
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f3af 8000 	nop.w
 8005efe:	e7a1      	b.n	8005e44 <__ssvfiscanf_r+0x208>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f06:	bf18      	it	ne
 8005f08:	f04f 30ff 	movne.w	r0, #4294967295
 8005f0c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005f16:	e7f9      	b.n	8005f0c <__ssvfiscanf_r+0x2d0>
 8005f18:	08005b89 	.word	0x08005b89
 8005f1c:	08005c03 	.word	0x08005c03
 8005f20:	08007315 	.word	0x08007315
 8005f24:	080072b2 	.word	0x080072b2
 8005f28:	00000000 	.word	0x00000000

08005f2c <_scanf_chars>:
 8005f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f30:	4615      	mov	r5, r2
 8005f32:	688a      	ldr	r2, [r1, #8]
 8005f34:	4680      	mov	r8, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b932      	cbnz	r2, 8005f48 <_scanf_chars+0x1c>
 8005f3a:	698a      	ldr	r2, [r1, #24]
 8005f3c:	2a00      	cmp	r2, #0
 8005f3e:	bf0c      	ite	eq
 8005f40:	2201      	moveq	r2, #1
 8005f42:	f04f 32ff 	movne.w	r2, #4294967295
 8005f46:	608a      	str	r2, [r1, #8]
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005fd8 <_scanf_chars+0xac>
 8005f4e:	06d1      	lsls	r1, r2, #27
 8005f50:	bf5f      	itttt	pl
 8005f52:	681a      	ldrpl	r2, [r3, #0]
 8005f54:	1d11      	addpl	r1, r2, #4
 8005f56:	6019      	strpl	r1, [r3, #0]
 8005f58:	6816      	ldrpl	r6, [r2, #0]
 8005f5a:	2700      	movs	r7, #0
 8005f5c:	69a0      	ldr	r0, [r4, #24]
 8005f5e:	b188      	cbz	r0, 8005f84 <_scanf_chars+0x58>
 8005f60:	2801      	cmp	r0, #1
 8005f62:	d107      	bne.n	8005f74 <_scanf_chars+0x48>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	6963      	ldr	r3, [r4, #20]
 8005f6a:	5c9b      	ldrb	r3, [r3, r2]
 8005f6c:	b953      	cbnz	r3, 8005f84 <_scanf_chars+0x58>
 8005f6e:	bb27      	cbnz	r7, 8005fba <_scanf_chars+0x8e>
 8005f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f74:	2802      	cmp	r0, #2
 8005f76:	d120      	bne.n	8005fba <_scanf_chars+0x8e>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005f80:	071b      	lsls	r3, r3, #28
 8005f82:	d41a      	bmi.n	8005fba <_scanf_chars+0x8e>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	06da      	lsls	r2, r3, #27
 8005f88:	bf5e      	ittt	pl
 8005f8a:	682b      	ldrpl	r3, [r5, #0]
 8005f8c:	781b      	ldrbpl	r3, [r3, #0]
 8005f8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005f92:	682a      	ldr	r2, [r5, #0]
 8005f94:	686b      	ldr	r3, [r5, #4]
 8005f96:	3201      	adds	r2, #1
 8005f98:	602a      	str	r2, [r5, #0]
 8005f9a:	68a2      	ldr	r2, [r4, #8]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	3a01      	subs	r2, #1
 8005fa0:	606b      	str	r3, [r5, #4]
 8005fa2:	3701      	adds	r7, #1
 8005fa4:	60a2      	str	r2, [r4, #8]
 8005fa6:	b142      	cbz	r2, 8005fba <_scanf_chars+0x8e>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dcd7      	bgt.n	8005f5c <_scanf_chars+0x30>
 8005fac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4798      	blx	r3
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d0d0      	beq.n	8005f5c <_scanf_chars+0x30>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	f013 0310 	ands.w	r3, r3, #16
 8005fc0:	d105      	bne.n	8005fce <_scanf_chars+0xa2>
 8005fc2:	68e2      	ldr	r2, [r4, #12]
 8005fc4:	3201      	adds	r2, #1
 8005fc6:	60e2      	str	r2, [r4, #12]
 8005fc8:	69a2      	ldr	r2, [r4, #24]
 8005fca:	b102      	cbz	r2, 8005fce <_scanf_chars+0xa2>
 8005fcc:	7033      	strb	r3, [r6, #0]
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	441f      	add	r7, r3
 8005fd2:	6127      	str	r7, [r4, #16]
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	e7cb      	b.n	8005f70 <_scanf_chars+0x44>
 8005fd8:	08007315 	.word	0x08007315

08005fdc <_scanf_i>:
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	4698      	mov	r8, r3
 8005fe2:	4b74      	ldr	r3, [pc, #464]	; (80061b4 <_scanf_i+0x1d8>)
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	4682      	mov	sl, r0
 8005fe8:	4616      	mov	r6, r2
 8005fea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005ff6:	4b70      	ldr	r3, [pc, #448]	; (80061b8 <_scanf_i+0x1dc>)
 8005ff8:	69a1      	ldr	r1, [r4, #24]
 8005ffa:	4a70      	ldr	r2, [pc, #448]	; (80061bc <_scanf_i+0x1e0>)
 8005ffc:	2903      	cmp	r1, #3
 8005ffe:	bf18      	it	ne
 8006000:	461a      	movne	r2, r3
 8006002:	68a3      	ldr	r3, [r4, #8]
 8006004:	9201      	str	r2, [sp, #4]
 8006006:	1e5a      	subs	r2, r3, #1
 8006008:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800600c:	bf88      	it	hi
 800600e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006012:	4627      	mov	r7, r4
 8006014:	bf82      	ittt	hi
 8006016:	eb03 0905 	addhi.w	r9, r3, r5
 800601a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800601e:	60a3      	strhi	r3, [r4, #8]
 8006020:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006024:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006028:	bf98      	it	ls
 800602a:	f04f 0900 	movls.w	r9, #0
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	463d      	mov	r5, r7
 8006032:	f04f 0b00 	mov.w	fp, #0
 8006036:	6831      	ldr	r1, [r6, #0]
 8006038:	ab03      	add	r3, sp, #12
 800603a:	7809      	ldrb	r1, [r1, #0]
 800603c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006040:	2202      	movs	r2, #2
 8006042:	f7fa f8cd 	bl	80001e0 <memchr>
 8006046:	b328      	cbz	r0, 8006094 <_scanf_i+0xb8>
 8006048:	f1bb 0f01 	cmp.w	fp, #1
 800604c:	d159      	bne.n	8006102 <_scanf_i+0x126>
 800604e:	6862      	ldr	r2, [r4, #4]
 8006050:	b92a      	cbnz	r2, 800605e <_scanf_i+0x82>
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	2308      	movs	r3, #8
 8006056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605a:	6063      	str	r3, [r4, #4]
 800605c:	6022      	str	r2, [r4, #0]
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006064:	6022      	str	r2, [r4, #0]
 8006066:	68a2      	ldr	r2, [r4, #8]
 8006068:	1e51      	subs	r1, r2, #1
 800606a:	60a1      	str	r1, [r4, #8]
 800606c:	b192      	cbz	r2, 8006094 <_scanf_i+0xb8>
 800606e:	6832      	ldr	r2, [r6, #0]
 8006070:	1c51      	adds	r1, r2, #1
 8006072:	6031      	str	r1, [r6, #0]
 8006074:	7812      	ldrb	r2, [r2, #0]
 8006076:	f805 2b01 	strb.w	r2, [r5], #1
 800607a:	6872      	ldr	r2, [r6, #4]
 800607c:	3a01      	subs	r2, #1
 800607e:	2a00      	cmp	r2, #0
 8006080:	6072      	str	r2, [r6, #4]
 8006082:	dc07      	bgt.n	8006094 <_scanf_i+0xb8>
 8006084:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006088:	4631      	mov	r1, r6
 800608a:	4650      	mov	r0, sl
 800608c:	4790      	blx	r2
 800608e:	2800      	cmp	r0, #0
 8006090:	f040 8085 	bne.w	800619e <_scanf_i+0x1c2>
 8006094:	f10b 0b01 	add.w	fp, fp, #1
 8006098:	f1bb 0f03 	cmp.w	fp, #3
 800609c:	d1cb      	bne.n	8006036 <_scanf_i+0x5a>
 800609e:	6863      	ldr	r3, [r4, #4]
 80060a0:	b90b      	cbnz	r3, 80060a6 <_scanf_i+0xca>
 80060a2:	230a      	movs	r3, #10
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	4945      	ldr	r1, [pc, #276]	; (80061c0 <_scanf_i+0x1e4>)
 80060aa:	6960      	ldr	r0, [r4, #20]
 80060ac:	1ac9      	subs	r1, r1, r3
 80060ae:	f000 f8ab 	bl	8006208 <__sccl>
 80060b2:	f04f 0b00 	mov.w	fp, #0
 80060b6:	68a3      	ldr	r3, [r4, #8]
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d03d      	beq.n	800613a <_scanf_i+0x15e>
 80060be:	6831      	ldr	r1, [r6, #0]
 80060c0:	6960      	ldr	r0, [r4, #20]
 80060c2:	f891 c000 	ldrb.w	ip, [r1]
 80060c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d035      	beq.n	800613a <_scanf_i+0x15e>
 80060ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80060d2:	d124      	bne.n	800611e <_scanf_i+0x142>
 80060d4:	0510      	lsls	r0, r2, #20
 80060d6:	d522      	bpl.n	800611e <_scanf_i+0x142>
 80060d8:	f10b 0b01 	add.w	fp, fp, #1
 80060dc:	f1b9 0f00 	cmp.w	r9, #0
 80060e0:	d003      	beq.n	80060ea <_scanf_i+0x10e>
 80060e2:	3301      	adds	r3, #1
 80060e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80060e8:	60a3      	str	r3, [r4, #8]
 80060ea:	6873      	ldr	r3, [r6, #4]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	6073      	str	r3, [r6, #4]
 80060f2:	dd1b      	ble.n	800612c <_scanf_i+0x150>
 80060f4:	6833      	ldr	r3, [r6, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	68a3      	ldr	r3, [r4, #8]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	e7d9      	b.n	80060b6 <_scanf_i+0xda>
 8006102:	f1bb 0f02 	cmp.w	fp, #2
 8006106:	d1ae      	bne.n	8006066 <_scanf_i+0x8a>
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800610e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006112:	d1bf      	bne.n	8006094 <_scanf_i+0xb8>
 8006114:	2310      	movs	r3, #16
 8006116:	6063      	str	r3, [r4, #4]
 8006118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611c:	e7a2      	b.n	8006064 <_scanf_i+0x88>
 800611e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006122:	6022      	str	r2, [r4, #0]
 8006124:	780b      	ldrb	r3, [r1, #0]
 8006126:	f805 3b01 	strb.w	r3, [r5], #1
 800612a:	e7de      	b.n	80060ea <_scanf_i+0x10e>
 800612c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006130:	4631      	mov	r1, r6
 8006132:	4650      	mov	r0, sl
 8006134:	4798      	blx	r3
 8006136:	2800      	cmp	r0, #0
 8006138:	d0df      	beq.n	80060fa <_scanf_i+0x11e>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	05d9      	lsls	r1, r3, #23
 800613e:	d50d      	bpl.n	800615c <_scanf_i+0x180>
 8006140:	42bd      	cmp	r5, r7
 8006142:	d909      	bls.n	8006158 <_scanf_i+0x17c>
 8006144:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006148:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800614c:	4632      	mov	r2, r6
 800614e:	4650      	mov	r0, sl
 8006150:	4798      	blx	r3
 8006152:	f105 39ff 	add.w	r9, r5, #4294967295
 8006156:	464d      	mov	r5, r9
 8006158:	42bd      	cmp	r5, r7
 800615a:	d028      	beq.n	80061ae <_scanf_i+0x1d2>
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	f012 0210 	ands.w	r2, r2, #16
 8006162:	d113      	bne.n	800618c <_scanf_i+0x1b0>
 8006164:	702a      	strb	r2, [r5, #0]
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	9e01      	ldr	r6, [sp, #4]
 800616a:	4639      	mov	r1, r7
 800616c:	4650      	mov	r0, sl
 800616e:	47b0      	blx	r6
 8006170:	f8d8 3000 	ldr.w	r3, [r8]
 8006174:	6821      	ldr	r1, [r4, #0]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	f8c8 2000 	str.w	r2, [r8]
 800617c:	f011 0f20 	tst.w	r1, #32
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	d00f      	beq.n	80061a4 <_scanf_i+0x1c8>
 8006184:	6018      	str	r0, [r3, #0]
 8006186:	68e3      	ldr	r3, [r4, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60e3      	str	r3, [r4, #12]
 800618c:	1bed      	subs	r5, r5, r7
 800618e:	44ab      	add	fp, r5
 8006190:	6925      	ldr	r5, [r4, #16]
 8006192:	445d      	add	r5, fp
 8006194:	6125      	str	r5, [r4, #16]
 8006196:	2000      	movs	r0, #0
 8006198:	b007      	add	sp, #28
 800619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619e:	f04f 0b00 	mov.w	fp, #0
 80061a2:	e7ca      	b.n	800613a <_scanf_i+0x15e>
 80061a4:	07ca      	lsls	r2, r1, #31
 80061a6:	bf4c      	ite	mi
 80061a8:	8018      	strhmi	r0, [r3, #0]
 80061aa:	6018      	strpl	r0, [r3, #0]
 80061ac:	e7eb      	b.n	8006186 <_scanf_i+0x1aa>
 80061ae:	2001      	movs	r0, #1
 80061b0:	e7f2      	b.n	8006198 <_scanf_i+0x1bc>
 80061b2:	bf00      	nop
 80061b4:	0800702c 	.word	0x0800702c
 80061b8:	08006481 	.word	0x08006481
 80061bc:	08006385 	.word	0x08006385
 80061c0:	080072d6 	.word	0x080072d6

080061c4 <_read_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d07      	ldr	r5, [pc, #28]	; (80061e4 <_read_r+0x20>)
 80061c8:	4604      	mov	r4, r0
 80061ca:	4608      	mov	r0, r1
 80061cc:	4611      	mov	r1, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fb fa6a 	bl	80016ac <_read>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_read_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_read_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	20000310 	.word	0x20000310

080061e8 <_sbrk_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d06      	ldr	r5, [pc, #24]	; (8006204 <_sbrk_r+0x1c>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	f7fb fac8 	bl	8001788 <_sbrk>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_sbrk_r+0x1a>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_sbrk_r+0x1a>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000310 	.word	0x20000310

08006208 <__sccl>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	780b      	ldrb	r3, [r1, #0]
 800620c:	4604      	mov	r4, r0
 800620e:	2b5e      	cmp	r3, #94	; 0x5e
 8006210:	bf0b      	itete	eq
 8006212:	784b      	ldrbeq	r3, [r1, #1]
 8006214:	1c48      	addne	r0, r1, #1
 8006216:	1c88      	addeq	r0, r1, #2
 8006218:	2200      	movne	r2, #0
 800621a:	bf08      	it	eq
 800621c:	2201      	moveq	r2, #1
 800621e:	1e61      	subs	r1, r4, #1
 8006220:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006224:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006228:	42a9      	cmp	r1, r5
 800622a:	d1fb      	bne.n	8006224 <__sccl+0x1c>
 800622c:	b90b      	cbnz	r3, 8006232 <__sccl+0x2a>
 800622e:	3801      	subs	r0, #1
 8006230:	bd70      	pop	{r4, r5, r6, pc}
 8006232:	f082 0101 	eor.w	r1, r2, #1
 8006236:	54e1      	strb	r1, [r4, r3]
 8006238:	1c42      	adds	r2, r0, #1
 800623a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800623e:	2d2d      	cmp	r5, #45	; 0x2d
 8006240:	f102 36ff 	add.w	r6, r2, #4294967295
 8006244:	4610      	mov	r0, r2
 8006246:	d006      	beq.n	8006256 <__sccl+0x4e>
 8006248:	2d5d      	cmp	r5, #93	; 0x5d
 800624a:	d0f1      	beq.n	8006230 <__sccl+0x28>
 800624c:	b90d      	cbnz	r5, 8006252 <__sccl+0x4a>
 800624e:	4630      	mov	r0, r6
 8006250:	e7ee      	b.n	8006230 <__sccl+0x28>
 8006252:	462b      	mov	r3, r5
 8006254:	e7ef      	b.n	8006236 <__sccl+0x2e>
 8006256:	7816      	ldrb	r6, [r2, #0]
 8006258:	2e5d      	cmp	r6, #93	; 0x5d
 800625a:	d0fa      	beq.n	8006252 <__sccl+0x4a>
 800625c:	42b3      	cmp	r3, r6
 800625e:	dcf8      	bgt.n	8006252 <__sccl+0x4a>
 8006260:	4618      	mov	r0, r3
 8006262:	3001      	adds	r0, #1
 8006264:	4286      	cmp	r6, r0
 8006266:	5421      	strb	r1, [r4, r0]
 8006268:	dcfb      	bgt.n	8006262 <__sccl+0x5a>
 800626a:	43d8      	mvns	r0, r3
 800626c:	4430      	add	r0, r6
 800626e:	1c5d      	adds	r5, r3, #1
 8006270:	42b3      	cmp	r3, r6
 8006272:	bfa8      	it	ge
 8006274:	2000      	movge	r0, #0
 8006276:	182b      	adds	r3, r5, r0
 8006278:	3202      	adds	r2, #2
 800627a:	e7de      	b.n	800623a <__sccl+0x32>

0800627c <_strtol_l.isra.0>:
 800627c:	2b01      	cmp	r3, #1
 800627e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006282:	d001      	beq.n	8006288 <_strtol_l.isra.0+0xc>
 8006284:	2b24      	cmp	r3, #36	; 0x24
 8006286:	d906      	bls.n	8006296 <_strtol_l.isra.0+0x1a>
 8006288:	f7fd fade 	bl	8003848 <__errno>
 800628c:	2316      	movs	r3, #22
 800628e:	6003      	str	r3, [r0, #0]
 8006290:	2000      	movs	r0, #0
 8006292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006296:	4f3a      	ldr	r7, [pc, #232]	; (8006380 <_strtol_l.isra.0+0x104>)
 8006298:	468e      	mov	lr, r1
 800629a:	4676      	mov	r6, lr
 800629c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80062a0:	5de5      	ldrb	r5, [r4, r7]
 80062a2:	f015 0508 	ands.w	r5, r5, #8
 80062a6:	d1f8      	bne.n	800629a <_strtol_l.isra.0+0x1e>
 80062a8:	2c2d      	cmp	r4, #45	; 0x2d
 80062aa:	d134      	bne.n	8006316 <_strtol_l.isra.0+0x9a>
 80062ac:	f89e 4000 	ldrb.w	r4, [lr]
 80062b0:	f04f 0801 	mov.w	r8, #1
 80062b4:	f106 0e02 	add.w	lr, r6, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d05c      	beq.n	8006376 <_strtol_l.isra.0+0xfa>
 80062bc:	2b10      	cmp	r3, #16
 80062be:	d10c      	bne.n	80062da <_strtol_l.isra.0+0x5e>
 80062c0:	2c30      	cmp	r4, #48	; 0x30
 80062c2:	d10a      	bne.n	80062da <_strtol_l.isra.0+0x5e>
 80062c4:	f89e 4000 	ldrb.w	r4, [lr]
 80062c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062cc:	2c58      	cmp	r4, #88	; 0x58
 80062ce:	d14d      	bne.n	800636c <_strtol_l.isra.0+0xf0>
 80062d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80062d4:	2310      	movs	r3, #16
 80062d6:	f10e 0e02 	add.w	lr, lr, #2
 80062da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80062de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80062e2:	2600      	movs	r6, #0
 80062e4:	fbbc f9f3 	udiv	r9, ip, r3
 80062e8:	4635      	mov	r5, r6
 80062ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80062ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80062f2:	2f09      	cmp	r7, #9
 80062f4:	d818      	bhi.n	8006328 <_strtol_l.isra.0+0xac>
 80062f6:	463c      	mov	r4, r7
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	dd24      	ble.n	8006346 <_strtol_l.isra.0+0xca>
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	db1f      	blt.n	8006340 <_strtol_l.isra.0+0xc4>
 8006300:	45a9      	cmp	r9, r5
 8006302:	d31d      	bcc.n	8006340 <_strtol_l.isra.0+0xc4>
 8006304:	d101      	bne.n	800630a <_strtol_l.isra.0+0x8e>
 8006306:	45a2      	cmp	sl, r4
 8006308:	db1a      	blt.n	8006340 <_strtol_l.isra.0+0xc4>
 800630a:	fb05 4503 	mla	r5, r5, r3, r4
 800630e:	2601      	movs	r6, #1
 8006310:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006314:	e7eb      	b.n	80062ee <_strtol_l.isra.0+0x72>
 8006316:	2c2b      	cmp	r4, #43	; 0x2b
 8006318:	bf08      	it	eq
 800631a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800631e:	46a8      	mov	r8, r5
 8006320:	bf08      	it	eq
 8006322:	f106 0e02 	addeq.w	lr, r6, #2
 8006326:	e7c7      	b.n	80062b8 <_strtol_l.isra.0+0x3c>
 8006328:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800632c:	2f19      	cmp	r7, #25
 800632e:	d801      	bhi.n	8006334 <_strtol_l.isra.0+0xb8>
 8006330:	3c37      	subs	r4, #55	; 0x37
 8006332:	e7e1      	b.n	80062f8 <_strtol_l.isra.0+0x7c>
 8006334:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006338:	2f19      	cmp	r7, #25
 800633a:	d804      	bhi.n	8006346 <_strtol_l.isra.0+0xca>
 800633c:	3c57      	subs	r4, #87	; 0x57
 800633e:	e7db      	b.n	80062f8 <_strtol_l.isra.0+0x7c>
 8006340:	f04f 36ff 	mov.w	r6, #4294967295
 8006344:	e7e4      	b.n	8006310 <_strtol_l.isra.0+0x94>
 8006346:	2e00      	cmp	r6, #0
 8006348:	da05      	bge.n	8006356 <_strtol_l.isra.0+0xda>
 800634a:	2322      	movs	r3, #34	; 0x22
 800634c:	6003      	str	r3, [r0, #0]
 800634e:	4665      	mov	r5, ip
 8006350:	b942      	cbnz	r2, 8006364 <_strtol_l.isra.0+0xe8>
 8006352:	4628      	mov	r0, r5
 8006354:	e79d      	b.n	8006292 <_strtol_l.isra.0+0x16>
 8006356:	f1b8 0f00 	cmp.w	r8, #0
 800635a:	d000      	beq.n	800635e <_strtol_l.isra.0+0xe2>
 800635c:	426d      	negs	r5, r5
 800635e:	2a00      	cmp	r2, #0
 8006360:	d0f7      	beq.n	8006352 <_strtol_l.isra.0+0xd6>
 8006362:	b10e      	cbz	r6, 8006368 <_strtol_l.isra.0+0xec>
 8006364:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006368:	6011      	str	r1, [r2, #0]
 800636a:	e7f2      	b.n	8006352 <_strtol_l.isra.0+0xd6>
 800636c:	2430      	movs	r4, #48	; 0x30
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1b3      	bne.n	80062da <_strtol_l.isra.0+0x5e>
 8006372:	2308      	movs	r3, #8
 8006374:	e7b1      	b.n	80062da <_strtol_l.isra.0+0x5e>
 8006376:	2c30      	cmp	r4, #48	; 0x30
 8006378:	d0a4      	beq.n	80062c4 <_strtol_l.isra.0+0x48>
 800637a:	230a      	movs	r3, #10
 800637c:	e7ad      	b.n	80062da <_strtol_l.isra.0+0x5e>
 800637e:	bf00      	nop
 8006380:	08007315 	.word	0x08007315

08006384 <_strtol_r>:
 8006384:	f7ff bf7a 	b.w	800627c <_strtol_l.isra.0>

08006388 <_strtoul_l.isra.0>:
 8006388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800638c:	4e3b      	ldr	r6, [pc, #236]	; (800647c <_strtoul_l.isra.0+0xf4>)
 800638e:	4686      	mov	lr, r0
 8006390:	468c      	mov	ip, r1
 8006392:	4660      	mov	r0, ip
 8006394:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006398:	5da5      	ldrb	r5, [r4, r6]
 800639a:	f015 0508 	ands.w	r5, r5, #8
 800639e:	d1f8      	bne.n	8006392 <_strtoul_l.isra.0+0xa>
 80063a0:	2c2d      	cmp	r4, #45	; 0x2d
 80063a2:	d134      	bne.n	800640e <_strtoul_l.isra.0+0x86>
 80063a4:	f89c 4000 	ldrb.w	r4, [ip]
 80063a8:	f04f 0801 	mov.w	r8, #1
 80063ac:	f100 0c02 	add.w	ip, r0, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d05e      	beq.n	8006472 <_strtoul_l.isra.0+0xea>
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d10c      	bne.n	80063d2 <_strtoul_l.isra.0+0x4a>
 80063b8:	2c30      	cmp	r4, #48	; 0x30
 80063ba:	d10a      	bne.n	80063d2 <_strtoul_l.isra.0+0x4a>
 80063bc:	f89c 0000 	ldrb.w	r0, [ip]
 80063c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80063c4:	2858      	cmp	r0, #88	; 0x58
 80063c6:	d14f      	bne.n	8006468 <_strtoul_l.isra.0+0xe0>
 80063c8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80063cc:	2310      	movs	r3, #16
 80063ce:	f10c 0c02 	add.w	ip, ip, #2
 80063d2:	f04f 37ff 	mov.w	r7, #4294967295
 80063d6:	2500      	movs	r5, #0
 80063d8:	fbb7 f7f3 	udiv	r7, r7, r3
 80063dc:	fb03 f907 	mul.w	r9, r3, r7
 80063e0:	ea6f 0909 	mvn.w	r9, r9
 80063e4:	4628      	mov	r0, r5
 80063e6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80063ea:	2e09      	cmp	r6, #9
 80063ec:	d818      	bhi.n	8006420 <_strtoul_l.isra.0+0x98>
 80063ee:	4634      	mov	r4, r6
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	dd24      	ble.n	800643e <_strtoul_l.isra.0+0xb6>
 80063f4:	2d00      	cmp	r5, #0
 80063f6:	db1f      	blt.n	8006438 <_strtoul_l.isra.0+0xb0>
 80063f8:	4287      	cmp	r7, r0
 80063fa:	d31d      	bcc.n	8006438 <_strtoul_l.isra.0+0xb0>
 80063fc:	d101      	bne.n	8006402 <_strtoul_l.isra.0+0x7a>
 80063fe:	45a1      	cmp	r9, r4
 8006400:	db1a      	blt.n	8006438 <_strtoul_l.isra.0+0xb0>
 8006402:	fb00 4003 	mla	r0, r0, r3, r4
 8006406:	2501      	movs	r5, #1
 8006408:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800640c:	e7eb      	b.n	80063e6 <_strtoul_l.isra.0+0x5e>
 800640e:	2c2b      	cmp	r4, #43	; 0x2b
 8006410:	bf08      	it	eq
 8006412:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006416:	46a8      	mov	r8, r5
 8006418:	bf08      	it	eq
 800641a:	f100 0c02 	addeq.w	ip, r0, #2
 800641e:	e7c7      	b.n	80063b0 <_strtoul_l.isra.0+0x28>
 8006420:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006424:	2e19      	cmp	r6, #25
 8006426:	d801      	bhi.n	800642c <_strtoul_l.isra.0+0xa4>
 8006428:	3c37      	subs	r4, #55	; 0x37
 800642a:	e7e1      	b.n	80063f0 <_strtoul_l.isra.0+0x68>
 800642c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006430:	2e19      	cmp	r6, #25
 8006432:	d804      	bhi.n	800643e <_strtoul_l.isra.0+0xb6>
 8006434:	3c57      	subs	r4, #87	; 0x57
 8006436:	e7db      	b.n	80063f0 <_strtoul_l.isra.0+0x68>
 8006438:	f04f 35ff 	mov.w	r5, #4294967295
 800643c:	e7e4      	b.n	8006408 <_strtoul_l.isra.0+0x80>
 800643e:	2d00      	cmp	r5, #0
 8006440:	da07      	bge.n	8006452 <_strtoul_l.isra.0+0xca>
 8006442:	2322      	movs	r3, #34	; 0x22
 8006444:	f8ce 3000 	str.w	r3, [lr]
 8006448:	f04f 30ff 	mov.w	r0, #4294967295
 800644c:	b942      	cbnz	r2, 8006460 <_strtoul_l.isra.0+0xd8>
 800644e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006452:	f1b8 0f00 	cmp.w	r8, #0
 8006456:	d000      	beq.n	800645a <_strtoul_l.isra.0+0xd2>
 8006458:	4240      	negs	r0, r0
 800645a:	2a00      	cmp	r2, #0
 800645c:	d0f7      	beq.n	800644e <_strtoul_l.isra.0+0xc6>
 800645e:	b10d      	cbz	r5, 8006464 <_strtoul_l.isra.0+0xdc>
 8006460:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006464:	6011      	str	r1, [r2, #0]
 8006466:	e7f2      	b.n	800644e <_strtoul_l.isra.0+0xc6>
 8006468:	2430      	movs	r4, #48	; 0x30
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1b1      	bne.n	80063d2 <_strtoul_l.isra.0+0x4a>
 800646e:	2308      	movs	r3, #8
 8006470:	e7af      	b.n	80063d2 <_strtoul_l.isra.0+0x4a>
 8006472:	2c30      	cmp	r4, #48	; 0x30
 8006474:	d0a2      	beq.n	80063bc <_strtoul_l.isra.0+0x34>
 8006476:	230a      	movs	r3, #10
 8006478:	e7ab      	b.n	80063d2 <_strtoul_l.isra.0+0x4a>
 800647a:	bf00      	nop
 800647c:	08007315 	.word	0x08007315

08006480 <_strtoul_r>:
 8006480:	f7ff bf82 	b.w	8006388 <_strtoul_l.isra.0>

08006484 <__submore>:
 8006484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006488:	460c      	mov	r4, r1
 800648a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800648c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006490:	4299      	cmp	r1, r3
 8006492:	d11d      	bne.n	80064d0 <__submore+0x4c>
 8006494:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006498:	f7ff f9c0 	bl	800581c <_malloc_r>
 800649c:	b918      	cbnz	r0, 80064a6 <__submore+0x22>
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80064ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80064b0:	6360      	str	r0, [r4, #52]	; 0x34
 80064b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80064b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80064ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80064be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80064c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80064ca:	6020      	str	r0, [r4, #0]
 80064cc:	2000      	movs	r0, #0
 80064ce:	e7e8      	b.n	80064a2 <__submore+0x1e>
 80064d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80064d2:	0077      	lsls	r7, r6, #1
 80064d4:	463a      	mov	r2, r7
 80064d6:	f000 fa31 	bl	800693c <_realloc_r>
 80064da:	4605      	mov	r5, r0
 80064dc:	2800      	cmp	r0, #0
 80064de:	d0de      	beq.n	800649e <__submore+0x1a>
 80064e0:	eb00 0806 	add.w	r8, r0, r6
 80064e4:	4601      	mov	r1, r0
 80064e6:	4632      	mov	r2, r6
 80064e8:	4640      	mov	r0, r8
 80064ea:	f7fe fdab 	bl	8005044 <memcpy>
 80064ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80064f2:	f8c4 8000 	str.w	r8, [r4]
 80064f6:	e7e9      	b.n	80064cc <__submore+0x48>

080064f8 <__assert_func>:
 80064f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064fa:	4614      	mov	r4, r2
 80064fc:	461a      	mov	r2, r3
 80064fe:	4b09      	ldr	r3, [pc, #36]	; (8006524 <__assert_func+0x2c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4605      	mov	r5, r0
 8006504:	68d8      	ldr	r0, [r3, #12]
 8006506:	b14c      	cbz	r4, 800651c <__assert_func+0x24>
 8006508:	4b07      	ldr	r3, [pc, #28]	; (8006528 <__assert_func+0x30>)
 800650a:	9100      	str	r1, [sp, #0]
 800650c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006510:	4906      	ldr	r1, [pc, #24]	; (800652c <__assert_func+0x34>)
 8006512:	462b      	mov	r3, r5
 8006514:	f000 f9a6 	bl	8006864 <fiprintf>
 8006518:	f000 fc5e 	bl	8006dd8 <abort>
 800651c:	4b04      	ldr	r3, [pc, #16]	; (8006530 <__assert_func+0x38>)
 800651e:	461c      	mov	r4, r3
 8006520:	e7f3      	b.n	800650a <__assert_func+0x12>
 8006522:	bf00      	nop
 8006524:	20000008 	.word	0x20000008
 8006528:	080072d8 	.word	0x080072d8
 800652c:	080072e5 	.word	0x080072e5
 8006530:	08007313 	.word	0x08007313

08006534 <__sflush_r>:
 8006534:	898a      	ldrh	r2, [r1, #12]
 8006536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653a:	4605      	mov	r5, r0
 800653c:	0710      	lsls	r0, r2, #28
 800653e:	460c      	mov	r4, r1
 8006540:	d458      	bmi.n	80065f4 <__sflush_r+0xc0>
 8006542:	684b      	ldr	r3, [r1, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	dc05      	bgt.n	8006554 <__sflush_r+0x20>
 8006548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	dc02      	bgt.n	8006554 <__sflush_r+0x20>
 800654e:	2000      	movs	r0, #0
 8006550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006556:	2e00      	cmp	r6, #0
 8006558:	d0f9      	beq.n	800654e <__sflush_r+0x1a>
 800655a:	2300      	movs	r3, #0
 800655c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006560:	682f      	ldr	r7, [r5, #0]
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	d032      	beq.n	80065cc <__sflush_r+0x98>
 8006566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	075a      	lsls	r2, r3, #29
 800656c:	d505      	bpl.n	800657a <__sflush_r+0x46>
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	1ac0      	subs	r0, r0, r3
 8006572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006574:	b10b      	cbz	r3, 800657a <__sflush_r+0x46>
 8006576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006578:	1ac0      	subs	r0, r0, r3
 800657a:	2300      	movs	r3, #0
 800657c:	4602      	mov	r2, r0
 800657e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006580:	6a21      	ldr	r1, [r4, #32]
 8006582:	4628      	mov	r0, r5
 8006584:	47b0      	blx	r6
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	d106      	bne.n	800659a <__sflush_r+0x66>
 800658c:	6829      	ldr	r1, [r5, #0]
 800658e:	291d      	cmp	r1, #29
 8006590:	d82c      	bhi.n	80065ec <__sflush_r+0xb8>
 8006592:	4a2a      	ldr	r2, [pc, #168]	; (800663c <__sflush_r+0x108>)
 8006594:	40ca      	lsrs	r2, r1
 8006596:	07d6      	lsls	r6, r2, #31
 8006598:	d528      	bpl.n	80065ec <__sflush_r+0xb8>
 800659a:	2200      	movs	r2, #0
 800659c:	6062      	str	r2, [r4, #4]
 800659e:	04d9      	lsls	r1, r3, #19
 80065a0:	6922      	ldr	r2, [r4, #16]
 80065a2:	6022      	str	r2, [r4, #0]
 80065a4:	d504      	bpl.n	80065b0 <__sflush_r+0x7c>
 80065a6:	1c42      	adds	r2, r0, #1
 80065a8:	d101      	bne.n	80065ae <__sflush_r+0x7a>
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	b903      	cbnz	r3, 80065b0 <__sflush_r+0x7c>
 80065ae:	6560      	str	r0, [r4, #84]	; 0x54
 80065b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065b2:	602f      	str	r7, [r5, #0]
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d0ca      	beq.n	800654e <__sflush_r+0x1a>
 80065b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065bc:	4299      	cmp	r1, r3
 80065be:	d002      	beq.n	80065c6 <__sflush_r+0x92>
 80065c0:	4628      	mov	r0, r5
 80065c2:	f7ff f8db 	bl	800577c <_free_r>
 80065c6:	2000      	movs	r0, #0
 80065c8:	6360      	str	r0, [r4, #52]	; 0x34
 80065ca:	e7c1      	b.n	8006550 <__sflush_r+0x1c>
 80065cc:	6a21      	ldr	r1, [r4, #32]
 80065ce:	2301      	movs	r3, #1
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b0      	blx	r6
 80065d4:	1c41      	adds	r1, r0, #1
 80065d6:	d1c7      	bne.n	8006568 <__sflush_r+0x34>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0c4      	beq.n	8006568 <__sflush_r+0x34>
 80065de:	2b1d      	cmp	r3, #29
 80065e0:	d001      	beq.n	80065e6 <__sflush_r+0xb2>
 80065e2:	2b16      	cmp	r3, #22
 80065e4:	d101      	bne.n	80065ea <__sflush_r+0xb6>
 80065e6:	602f      	str	r7, [r5, #0]
 80065e8:	e7b1      	b.n	800654e <__sflush_r+0x1a>
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	e7ad      	b.n	8006550 <__sflush_r+0x1c>
 80065f4:	690f      	ldr	r7, [r1, #16]
 80065f6:	2f00      	cmp	r7, #0
 80065f8:	d0a9      	beq.n	800654e <__sflush_r+0x1a>
 80065fa:	0793      	lsls	r3, r2, #30
 80065fc:	680e      	ldr	r6, [r1, #0]
 80065fe:	bf08      	it	eq
 8006600:	694b      	ldreq	r3, [r1, #20]
 8006602:	600f      	str	r7, [r1, #0]
 8006604:	bf18      	it	ne
 8006606:	2300      	movne	r3, #0
 8006608:	eba6 0807 	sub.w	r8, r6, r7
 800660c:	608b      	str	r3, [r1, #8]
 800660e:	f1b8 0f00 	cmp.w	r8, #0
 8006612:	dd9c      	ble.n	800654e <__sflush_r+0x1a>
 8006614:	6a21      	ldr	r1, [r4, #32]
 8006616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006618:	4643      	mov	r3, r8
 800661a:	463a      	mov	r2, r7
 800661c:	4628      	mov	r0, r5
 800661e:	47b0      	blx	r6
 8006620:	2800      	cmp	r0, #0
 8006622:	dc06      	bgt.n	8006632 <__sflush_r+0xfe>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	e78e      	b.n	8006550 <__sflush_r+0x1c>
 8006632:	4407      	add	r7, r0
 8006634:	eba8 0800 	sub.w	r8, r8, r0
 8006638:	e7e9      	b.n	800660e <__sflush_r+0xda>
 800663a:	bf00      	nop
 800663c:	20400001 	.word	0x20400001

08006640 <_fflush_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	690b      	ldr	r3, [r1, #16]
 8006644:	4605      	mov	r5, r0
 8006646:	460c      	mov	r4, r1
 8006648:	b913      	cbnz	r3, 8006650 <_fflush_r+0x10>
 800664a:	2500      	movs	r5, #0
 800664c:	4628      	mov	r0, r5
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	b118      	cbz	r0, 800665a <_fflush_r+0x1a>
 8006652:	6983      	ldr	r3, [r0, #24]
 8006654:	b90b      	cbnz	r3, 800665a <_fflush_r+0x1a>
 8006656:	f000 f887 	bl	8006768 <__sinit>
 800665a:	4b14      	ldr	r3, [pc, #80]	; (80066ac <_fflush_r+0x6c>)
 800665c:	429c      	cmp	r4, r3
 800665e:	d11b      	bne.n	8006698 <_fflush_r+0x58>
 8006660:	686c      	ldr	r4, [r5, #4]
 8006662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0ef      	beq.n	800664a <_fflush_r+0xa>
 800666a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800666c:	07d0      	lsls	r0, r2, #31
 800666e:	d404      	bmi.n	800667a <_fflush_r+0x3a>
 8006670:	0599      	lsls	r1, r3, #22
 8006672:	d402      	bmi.n	800667a <_fflush_r+0x3a>
 8006674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006676:	f000 f927 	bl	80068c8 <__retarget_lock_acquire_recursive>
 800667a:	4628      	mov	r0, r5
 800667c:	4621      	mov	r1, r4
 800667e:	f7ff ff59 	bl	8006534 <__sflush_r>
 8006682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006684:	07da      	lsls	r2, r3, #31
 8006686:	4605      	mov	r5, r0
 8006688:	d4e0      	bmi.n	800664c <_fflush_r+0xc>
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	059b      	lsls	r3, r3, #22
 800668e:	d4dd      	bmi.n	800664c <_fflush_r+0xc>
 8006690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006692:	f000 f91a 	bl	80068ca <__retarget_lock_release_recursive>
 8006696:	e7d9      	b.n	800664c <_fflush_r+0xc>
 8006698:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <_fflush_r+0x70>)
 800669a:	429c      	cmp	r4, r3
 800669c:	d101      	bne.n	80066a2 <_fflush_r+0x62>
 800669e:	68ac      	ldr	r4, [r5, #8]
 80066a0:	e7df      	b.n	8006662 <_fflush_r+0x22>
 80066a2:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <_fflush_r+0x74>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	bf08      	it	eq
 80066a8:	68ec      	ldreq	r4, [r5, #12]
 80066aa:	e7da      	b.n	8006662 <_fflush_r+0x22>
 80066ac:	08007438 	.word	0x08007438
 80066b0:	08007458 	.word	0x08007458
 80066b4:	08007418 	.word	0x08007418

080066b8 <std>:
 80066b8:	2300      	movs	r3, #0
 80066ba:	b510      	push	{r4, lr}
 80066bc:	4604      	mov	r4, r0
 80066be:	e9c0 3300 	strd	r3, r3, [r0]
 80066c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066c6:	6083      	str	r3, [r0, #8]
 80066c8:	8181      	strh	r1, [r0, #12]
 80066ca:	6643      	str	r3, [r0, #100]	; 0x64
 80066cc:	81c2      	strh	r2, [r0, #14]
 80066ce:	6183      	str	r3, [r0, #24]
 80066d0:	4619      	mov	r1, r3
 80066d2:	2208      	movs	r2, #8
 80066d4:	305c      	adds	r0, #92	; 0x5c
 80066d6:	f7fd f8e1 	bl	800389c <memset>
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <std+0x38>)
 80066dc:	6263      	str	r3, [r4, #36]	; 0x24
 80066de:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <std+0x3c>)
 80066e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <std+0x40>)
 80066e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <std+0x44>)
 80066e8:	6224      	str	r4, [r4, #32]
 80066ea:	6323      	str	r3, [r4, #48]	; 0x30
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	bf00      	nop
 80066f0:	08004219 	.word	0x08004219
 80066f4:	0800423f 	.word	0x0800423f
 80066f8:	08004277 	.word	0x08004277
 80066fc:	0800429b 	.word	0x0800429b

08006700 <_cleanup_r>:
 8006700:	4901      	ldr	r1, [pc, #4]	; (8006708 <_cleanup_r+0x8>)
 8006702:	f000 b8c1 	b.w	8006888 <_fwalk_reent>
 8006706:	bf00      	nop
 8006708:	08006641 	.word	0x08006641

0800670c <__sfmoreglue>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	1e4a      	subs	r2, r1, #1
 8006710:	2568      	movs	r5, #104	; 0x68
 8006712:	4355      	muls	r5, r2
 8006714:	460e      	mov	r6, r1
 8006716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800671a:	f7ff f87f 	bl	800581c <_malloc_r>
 800671e:	4604      	mov	r4, r0
 8006720:	b140      	cbz	r0, 8006734 <__sfmoreglue+0x28>
 8006722:	2100      	movs	r1, #0
 8006724:	e9c0 1600 	strd	r1, r6, [r0]
 8006728:	300c      	adds	r0, #12
 800672a:	60a0      	str	r0, [r4, #8]
 800672c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006730:	f7fd f8b4 	bl	800389c <memset>
 8006734:	4620      	mov	r0, r4
 8006736:	bd70      	pop	{r4, r5, r6, pc}

08006738 <__sfp_lock_acquire>:
 8006738:	4801      	ldr	r0, [pc, #4]	; (8006740 <__sfp_lock_acquire+0x8>)
 800673a:	f000 b8c5 	b.w	80068c8 <__retarget_lock_acquire_recursive>
 800673e:	bf00      	nop
 8006740:	2000031c 	.word	0x2000031c

08006744 <__sfp_lock_release>:
 8006744:	4801      	ldr	r0, [pc, #4]	; (800674c <__sfp_lock_release+0x8>)
 8006746:	f000 b8c0 	b.w	80068ca <__retarget_lock_release_recursive>
 800674a:	bf00      	nop
 800674c:	2000031c 	.word	0x2000031c

08006750 <__sinit_lock_acquire>:
 8006750:	4801      	ldr	r0, [pc, #4]	; (8006758 <__sinit_lock_acquire+0x8>)
 8006752:	f000 b8b9 	b.w	80068c8 <__retarget_lock_acquire_recursive>
 8006756:	bf00      	nop
 8006758:	20000317 	.word	0x20000317

0800675c <__sinit_lock_release>:
 800675c:	4801      	ldr	r0, [pc, #4]	; (8006764 <__sinit_lock_release+0x8>)
 800675e:	f000 b8b4 	b.w	80068ca <__retarget_lock_release_recursive>
 8006762:	bf00      	nop
 8006764:	20000317 	.word	0x20000317

08006768 <__sinit>:
 8006768:	b510      	push	{r4, lr}
 800676a:	4604      	mov	r4, r0
 800676c:	f7ff fff0 	bl	8006750 <__sinit_lock_acquire>
 8006770:	69a3      	ldr	r3, [r4, #24]
 8006772:	b11b      	cbz	r3, 800677c <__sinit+0x14>
 8006774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006778:	f7ff bff0 	b.w	800675c <__sinit_lock_release>
 800677c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006780:	6523      	str	r3, [r4, #80]	; 0x50
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <__sinit+0x68>)
 8006784:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <__sinit+0x6c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	62a2      	str	r2, [r4, #40]	; 0x28
 800678a:	42a3      	cmp	r3, r4
 800678c:	bf04      	itt	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	61a3      	streq	r3, [r4, #24]
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f820 	bl	80067d8 <__sfp>
 8006798:	6060      	str	r0, [r4, #4]
 800679a:	4620      	mov	r0, r4
 800679c:	f000 f81c 	bl	80067d8 <__sfp>
 80067a0:	60a0      	str	r0, [r4, #8]
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 f818 	bl	80067d8 <__sfp>
 80067a8:	2200      	movs	r2, #0
 80067aa:	60e0      	str	r0, [r4, #12]
 80067ac:	2104      	movs	r1, #4
 80067ae:	6860      	ldr	r0, [r4, #4]
 80067b0:	f7ff ff82 	bl	80066b8 <std>
 80067b4:	68a0      	ldr	r0, [r4, #8]
 80067b6:	2201      	movs	r2, #1
 80067b8:	2109      	movs	r1, #9
 80067ba:	f7ff ff7d 	bl	80066b8 <std>
 80067be:	68e0      	ldr	r0, [r4, #12]
 80067c0:	2202      	movs	r2, #2
 80067c2:	2112      	movs	r1, #18
 80067c4:	f7ff ff78 	bl	80066b8 <std>
 80067c8:	2301      	movs	r3, #1
 80067ca:	61a3      	str	r3, [r4, #24]
 80067cc:	e7d2      	b.n	8006774 <__sinit+0xc>
 80067ce:	bf00      	nop
 80067d0:	08007080 	.word	0x08007080
 80067d4:	08006701 	.word	0x08006701

080067d8 <__sfp>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	4607      	mov	r7, r0
 80067dc:	f7ff ffac 	bl	8006738 <__sfp_lock_acquire>
 80067e0:	4b1e      	ldr	r3, [pc, #120]	; (800685c <__sfp+0x84>)
 80067e2:	681e      	ldr	r6, [r3, #0]
 80067e4:	69b3      	ldr	r3, [r6, #24]
 80067e6:	b913      	cbnz	r3, 80067ee <__sfp+0x16>
 80067e8:	4630      	mov	r0, r6
 80067ea:	f7ff ffbd 	bl	8006768 <__sinit>
 80067ee:	3648      	adds	r6, #72	; 0x48
 80067f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	d503      	bpl.n	8006800 <__sfp+0x28>
 80067f8:	6833      	ldr	r3, [r6, #0]
 80067fa:	b30b      	cbz	r3, 8006840 <__sfp+0x68>
 80067fc:	6836      	ldr	r6, [r6, #0]
 80067fe:	e7f7      	b.n	80067f0 <__sfp+0x18>
 8006800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006804:	b9d5      	cbnz	r5, 800683c <__sfp+0x64>
 8006806:	4b16      	ldr	r3, [pc, #88]	; (8006860 <__sfp+0x88>)
 8006808:	60e3      	str	r3, [r4, #12]
 800680a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800680e:	6665      	str	r5, [r4, #100]	; 0x64
 8006810:	f000 f859 	bl	80068c6 <__retarget_lock_init_recursive>
 8006814:	f7ff ff96 	bl	8006744 <__sfp_lock_release>
 8006818:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800681c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006820:	6025      	str	r5, [r4, #0]
 8006822:	61a5      	str	r5, [r4, #24]
 8006824:	2208      	movs	r2, #8
 8006826:	4629      	mov	r1, r5
 8006828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800682c:	f7fd f836 	bl	800389c <memset>
 8006830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006838:	4620      	mov	r0, r4
 800683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683c:	3468      	adds	r4, #104	; 0x68
 800683e:	e7d9      	b.n	80067f4 <__sfp+0x1c>
 8006840:	2104      	movs	r1, #4
 8006842:	4638      	mov	r0, r7
 8006844:	f7ff ff62 	bl	800670c <__sfmoreglue>
 8006848:	4604      	mov	r4, r0
 800684a:	6030      	str	r0, [r6, #0]
 800684c:	2800      	cmp	r0, #0
 800684e:	d1d5      	bne.n	80067fc <__sfp+0x24>
 8006850:	f7ff ff78 	bl	8006744 <__sfp_lock_release>
 8006854:	230c      	movs	r3, #12
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	e7ee      	b.n	8006838 <__sfp+0x60>
 800685a:	bf00      	nop
 800685c:	08007080 	.word	0x08007080
 8006860:	ffff0001 	.word	0xffff0001

08006864 <fiprintf>:
 8006864:	b40e      	push	{r1, r2, r3}
 8006866:	b503      	push	{r0, r1, lr}
 8006868:	4601      	mov	r1, r0
 800686a:	ab03      	add	r3, sp, #12
 800686c:	4805      	ldr	r0, [pc, #20]	; (8006884 <fiprintf+0x20>)
 800686e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006872:	6800      	ldr	r0, [r0, #0]
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	f000 f8b1 	bl	80069dc <_vfiprintf_r>
 800687a:	b002      	add	sp, #8
 800687c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006880:	b003      	add	sp, #12
 8006882:	4770      	bx	lr
 8006884:	20000008 	.word	0x20000008

08006888 <_fwalk_reent>:
 8006888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800688c:	4606      	mov	r6, r0
 800688e:	4688      	mov	r8, r1
 8006890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006894:	2700      	movs	r7, #0
 8006896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800689a:	f1b9 0901 	subs.w	r9, r9, #1
 800689e:	d505      	bpl.n	80068ac <_fwalk_reent+0x24>
 80068a0:	6824      	ldr	r4, [r4, #0]
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d1f7      	bne.n	8006896 <_fwalk_reent+0xe>
 80068a6:	4638      	mov	r0, r7
 80068a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ac:	89ab      	ldrh	r3, [r5, #12]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d907      	bls.n	80068c2 <_fwalk_reent+0x3a>
 80068b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068b6:	3301      	adds	r3, #1
 80068b8:	d003      	beq.n	80068c2 <_fwalk_reent+0x3a>
 80068ba:	4629      	mov	r1, r5
 80068bc:	4630      	mov	r0, r6
 80068be:	47c0      	blx	r8
 80068c0:	4307      	orrs	r7, r0
 80068c2:	3568      	adds	r5, #104	; 0x68
 80068c4:	e7e9      	b.n	800689a <_fwalk_reent+0x12>

080068c6 <__retarget_lock_init_recursive>:
 80068c6:	4770      	bx	lr

080068c8 <__retarget_lock_acquire_recursive>:
 80068c8:	4770      	bx	lr

080068ca <__retarget_lock_release_recursive>:
 80068ca:	4770      	bx	lr

080068cc <__ascii_mbtowc>:
 80068cc:	b082      	sub	sp, #8
 80068ce:	b901      	cbnz	r1, 80068d2 <__ascii_mbtowc+0x6>
 80068d0:	a901      	add	r1, sp, #4
 80068d2:	b142      	cbz	r2, 80068e6 <__ascii_mbtowc+0x1a>
 80068d4:	b14b      	cbz	r3, 80068ea <__ascii_mbtowc+0x1e>
 80068d6:	7813      	ldrb	r3, [r2, #0]
 80068d8:	600b      	str	r3, [r1, #0]
 80068da:	7812      	ldrb	r2, [r2, #0]
 80068dc:	1e10      	subs	r0, r2, #0
 80068de:	bf18      	it	ne
 80068e0:	2001      	movne	r0, #1
 80068e2:	b002      	add	sp, #8
 80068e4:	4770      	bx	lr
 80068e6:	4610      	mov	r0, r2
 80068e8:	e7fb      	b.n	80068e2 <__ascii_mbtowc+0x16>
 80068ea:	f06f 0001 	mvn.w	r0, #1
 80068ee:	e7f8      	b.n	80068e2 <__ascii_mbtowc+0x16>

080068f0 <memmove>:
 80068f0:	4288      	cmp	r0, r1
 80068f2:	b510      	push	{r4, lr}
 80068f4:	eb01 0402 	add.w	r4, r1, r2
 80068f8:	d902      	bls.n	8006900 <memmove+0x10>
 80068fa:	4284      	cmp	r4, r0
 80068fc:	4623      	mov	r3, r4
 80068fe:	d807      	bhi.n	8006910 <memmove+0x20>
 8006900:	1e43      	subs	r3, r0, #1
 8006902:	42a1      	cmp	r1, r4
 8006904:	d008      	beq.n	8006918 <memmove+0x28>
 8006906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800690a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800690e:	e7f8      	b.n	8006902 <memmove+0x12>
 8006910:	4402      	add	r2, r0
 8006912:	4601      	mov	r1, r0
 8006914:	428a      	cmp	r2, r1
 8006916:	d100      	bne.n	800691a <memmove+0x2a>
 8006918:	bd10      	pop	{r4, pc}
 800691a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800691e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006922:	e7f7      	b.n	8006914 <memmove+0x24>

08006924 <__malloc_lock>:
 8006924:	4801      	ldr	r0, [pc, #4]	; (800692c <__malloc_lock+0x8>)
 8006926:	f7ff bfcf 	b.w	80068c8 <__retarget_lock_acquire_recursive>
 800692a:	bf00      	nop
 800692c:	20000318 	.word	0x20000318

08006930 <__malloc_unlock>:
 8006930:	4801      	ldr	r0, [pc, #4]	; (8006938 <__malloc_unlock+0x8>)
 8006932:	f7ff bfca 	b.w	80068ca <__retarget_lock_release_recursive>
 8006936:	bf00      	nop
 8006938:	20000318 	.word	0x20000318

0800693c <_realloc_r>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	4607      	mov	r7, r0
 8006940:	4614      	mov	r4, r2
 8006942:	460e      	mov	r6, r1
 8006944:	b921      	cbnz	r1, 8006950 <_realloc_r+0x14>
 8006946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800694a:	4611      	mov	r1, r2
 800694c:	f7fe bf66 	b.w	800581c <_malloc_r>
 8006950:	b922      	cbnz	r2, 800695c <_realloc_r+0x20>
 8006952:	f7fe ff13 	bl	800577c <_free_r>
 8006956:	4625      	mov	r5, r4
 8006958:	4628      	mov	r0, r5
 800695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695c:	f000 faa8 	bl	8006eb0 <_malloc_usable_size_r>
 8006960:	42a0      	cmp	r0, r4
 8006962:	d20f      	bcs.n	8006984 <_realloc_r+0x48>
 8006964:	4621      	mov	r1, r4
 8006966:	4638      	mov	r0, r7
 8006968:	f7fe ff58 	bl	800581c <_malloc_r>
 800696c:	4605      	mov	r5, r0
 800696e:	2800      	cmp	r0, #0
 8006970:	d0f2      	beq.n	8006958 <_realloc_r+0x1c>
 8006972:	4631      	mov	r1, r6
 8006974:	4622      	mov	r2, r4
 8006976:	f7fe fb65 	bl	8005044 <memcpy>
 800697a:	4631      	mov	r1, r6
 800697c:	4638      	mov	r0, r7
 800697e:	f7fe fefd 	bl	800577c <_free_r>
 8006982:	e7e9      	b.n	8006958 <_realloc_r+0x1c>
 8006984:	4635      	mov	r5, r6
 8006986:	e7e7      	b.n	8006958 <_realloc_r+0x1c>

08006988 <__sfputc_r>:
 8006988:	6893      	ldr	r3, [r2, #8]
 800698a:	3b01      	subs	r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	b410      	push	{r4}
 8006990:	6093      	str	r3, [r2, #8]
 8006992:	da08      	bge.n	80069a6 <__sfputc_r+0x1e>
 8006994:	6994      	ldr	r4, [r2, #24]
 8006996:	42a3      	cmp	r3, r4
 8006998:	db01      	blt.n	800699e <__sfputc_r+0x16>
 800699a:	290a      	cmp	r1, #10
 800699c:	d103      	bne.n	80069a6 <__sfputc_r+0x1e>
 800699e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069a2:	f000 b94b 	b.w	8006c3c <__swbuf_r>
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	1c58      	adds	r0, r3, #1
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	7019      	strb	r1, [r3, #0]
 80069ae:	4608      	mov	r0, r1
 80069b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <__sfputs_r>:
 80069b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b8:	4606      	mov	r6, r0
 80069ba:	460f      	mov	r7, r1
 80069bc:	4614      	mov	r4, r2
 80069be:	18d5      	adds	r5, r2, r3
 80069c0:	42ac      	cmp	r4, r5
 80069c2:	d101      	bne.n	80069c8 <__sfputs_r+0x12>
 80069c4:	2000      	movs	r0, #0
 80069c6:	e007      	b.n	80069d8 <__sfputs_r+0x22>
 80069c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069cc:	463a      	mov	r2, r7
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7ff ffda 	bl	8006988 <__sfputc_r>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d1f3      	bne.n	80069c0 <__sfputs_r+0xa>
 80069d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069dc <_vfiprintf_r>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	460d      	mov	r5, r1
 80069e2:	b09d      	sub	sp, #116	; 0x74
 80069e4:	4614      	mov	r4, r2
 80069e6:	4698      	mov	r8, r3
 80069e8:	4606      	mov	r6, r0
 80069ea:	b118      	cbz	r0, 80069f4 <_vfiprintf_r+0x18>
 80069ec:	6983      	ldr	r3, [r0, #24]
 80069ee:	b90b      	cbnz	r3, 80069f4 <_vfiprintf_r+0x18>
 80069f0:	f7ff feba 	bl	8006768 <__sinit>
 80069f4:	4b89      	ldr	r3, [pc, #548]	; (8006c1c <_vfiprintf_r+0x240>)
 80069f6:	429d      	cmp	r5, r3
 80069f8:	d11b      	bne.n	8006a32 <_vfiprintf_r+0x56>
 80069fa:	6875      	ldr	r5, [r6, #4]
 80069fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069fe:	07d9      	lsls	r1, r3, #31
 8006a00:	d405      	bmi.n	8006a0e <_vfiprintf_r+0x32>
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	059a      	lsls	r2, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_vfiprintf_r+0x32>
 8006a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a0a:	f7ff ff5d 	bl	80068c8 <__retarget_lock_acquire_recursive>
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	071b      	lsls	r3, r3, #28
 8006a12:	d501      	bpl.n	8006a18 <_vfiprintf_r+0x3c>
 8006a14:	692b      	ldr	r3, [r5, #16]
 8006a16:	b9eb      	cbnz	r3, 8006a54 <_vfiprintf_r+0x78>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f000 f96e 	bl	8006cfc <__swsetup_r>
 8006a20:	b1c0      	cbz	r0, 8006a54 <_vfiprintf_r+0x78>
 8006a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a24:	07dc      	lsls	r4, r3, #31
 8006a26:	d50e      	bpl.n	8006a46 <_vfiprintf_r+0x6a>
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2c:	b01d      	add	sp, #116	; 0x74
 8006a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a32:	4b7b      	ldr	r3, [pc, #492]	; (8006c20 <_vfiprintf_r+0x244>)
 8006a34:	429d      	cmp	r5, r3
 8006a36:	d101      	bne.n	8006a3c <_vfiprintf_r+0x60>
 8006a38:	68b5      	ldr	r5, [r6, #8]
 8006a3a:	e7df      	b.n	80069fc <_vfiprintf_r+0x20>
 8006a3c:	4b79      	ldr	r3, [pc, #484]	; (8006c24 <_vfiprintf_r+0x248>)
 8006a3e:	429d      	cmp	r5, r3
 8006a40:	bf08      	it	eq
 8006a42:	68f5      	ldreq	r5, [r6, #12]
 8006a44:	e7da      	b.n	80069fc <_vfiprintf_r+0x20>
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	0598      	lsls	r0, r3, #22
 8006a4a:	d4ed      	bmi.n	8006a28 <_vfiprintf_r+0x4c>
 8006a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a4e:	f7ff ff3c 	bl	80068ca <__retarget_lock_release_recursive>
 8006a52:	e7e9      	b.n	8006a28 <_vfiprintf_r+0x4c>
 8006a54:	2300      	movs	r3, #0
 8006a56:	9309      	str	r3, [sp, #36]	; 0x24
 8006a58:	2320      	movs	r3, #32
 8006a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a62:	2330      	movs	r3, #48	; 0x30
 8006a64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c28 <_vfiprintf_r+0x24c>
 8006a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a6c:	f04f 0901 	mov.w	r9, #1
 8006a70:	4623      	mov	r3, r4
 8006a72:	469a      	mov	sl, r3
 8006a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a78:	b10a      	cbz	r2, 8006a7e <_vfiprintf_r+0xa2>
 8006a7a:	2a25      	cmp	r2, #37	; 0x25
 8006a7c:	d1f9      	bne.n	8006a72 <_vfiprintf_r+0x96>
 8006a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a82:	d00b      	beq.n	8006a9c <_vfiprintf_r+0xc0>
 8006a84:	465b      	mov	r3, fp
 8006a86:	4622      	mov	r2, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7ff ff93 	bl	80069b6 <__sfputs_r>
 8006a90:	3001      	adds	r0, #1
 8006a92:	f000 80aa 	beq.w	8006bea <_vfiprintf_r+0x20e>
 8006a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a98:	445a      	add	r2, fp
 8006a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80a2 	beq.w	8006bea <_vfiprintf_r+0x20e>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8006aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab0:	f10a 0a01 	add.w	sl, sl, #1
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006abc:	931a      	str	r3, [sp, #104]	; 0x68
 8006abe:	4654      	mov	r4, sl
 8006ac0:	2205      	movs	r2, #5
 8006ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac6:	4858      	ldr	r0, [pc, #352]	; (8006c28 <_vfiprintf_r+0x24c>)
 8006ac8:	f7f9 fb8a 	bl	80001e0 <memchr>
 8006acc:	9a04      	ldr	r2, [sp, #16]
 8006ace:	b9d8      	cbnz	r0, 8006b08 <_vfiprintf_r+0x12c>
 8006ad0:	06d1      	lsls	r1, r2, #27
 8006ad2:	bf44      	itt	mi
 8006ad4:	2320      	movmi	r3, #32
 8006ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ada:	0713      	lsls	r3, r2, #28
 8006adc:	bf44      	itt	mi
 8006ade:	232b      	movmi	r3, #43	; 0x2b
 8006ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aea:	d015      	beq.n	8006b18 <_vfiprintf_r+0x13c>
 8006aec:	9a07      	ldr	r2, [sp, #28]
 8006aee:	4654      	mov	r4, sl
 8006af0:	2000      	movs	r0, #0
 8006af2:	f04f 0c0a 	mov.w	ip, #10
 8006af6:	4621      	mov	r1, r4
 8006af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006afc:	3b30      	subs	r3, #48	; 0x30
 8006afe:	2b09      	cmp	r3, #9
 8006b00:	d94e      	bls.n	8006ba0 <_vfiprintf_r+0x1c4>
 8006b02:	b1b0      	cbz	r0, 8006b32 <_vfiprintf_r+0x156>
 8006b04:	9207      	str	r2, [sp, #28]
 8006b06:	e014      	b.n	8006b32 <_vfiprintf_r+0x156>
 8006b08:	eba0 0308 	sub.w	r3, r0, r8
 8006b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b10:	4313      	orrs	r3, r2
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	46a2      	mov	sl, r4
 8006b16:	e7d2      	b.n	8006abe <_vfiprintf_r+0xe2>
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	1d19      	adds	r1, r3, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	9103      	str	r1, [sp, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bfbb      	ittet	lt
 8006b24:	425b      	neglt	r3, r3
 8006b26:	f042 0202 	orrlt.w	r2, r2, #2
 8006b2a:	9307      	strge	r3, [sp, #28]
 8006b2c:	9307      	strlt	r3, [sp, #28]
 8006b2e:	bfb8      	it	lt
 8006b30:	9204      	strlt	r2, [sp, #16]
 8006b32:	7823      	ldrb	r3, [r4, #0]
 8006b34:	2b2e      	cmp	r3, #46	; 0x2e
 8006b36:	d10c      	bne.n	8006b52 <_vfiprintf_r+0x176>
 8006b38:	7863      	ldrb	r3, [r4, #1]
 8006b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b3c:	d135      	bne.n	8006baa <_vfiprintf_r+0x1ce>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	1d1a      	adds	r2, r3, #4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	9203      	str	r2, [sp, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bfb8      	it	lt
 8006b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b4e:	3402      	adds	r4, #2
 8006b50:	9305      	str	r3, [sp, #20]
 8006b52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c38 <_vfiprintf_r+0x25c>
 8006b56:	7821      	ldrb	r1, [r4, #0]
 8006b58:	2203      	movs	r2, #3
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	f7f9 fb40 	bl	80001e0 <memchr>
 8006b60:	b140      	cbz	r0, 8006b74 <_vfiprintf_r+0x198>
 8006b62:	2340      	movs	r3, #64	; 0x40
 8006b64:	eba0 000a 	sub.w	r0, r0, sl
 8006b68:	fa03 f000 	lsl.w	r0, r3, r0
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	4303      	orrs	r3, r0
 8006b70:	3401      	adds	r4, #1
 8006b72:	9304      	str	r3, [sp, #16]
 8006b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b78:	482c      	ldr	r0, [pc, #176]	; (8006c2c <_vfiprintf_r+0x250>)
 8006b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b7e:	2206      	movs	r2, #6
 8006b80:	f7f9 fb2e 	bl	80001e0 <memchr>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d03f      	beq.n	8006c08 <_vfiprintf_r+0x22c>
 8006b88:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <_vfiprintf_r+0x254>)
 8006b8a:	bb1b      	cbnz	r3, 8006bd4 <_vfiprintf_r+0x1f8>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	3307      	adds	r3, #7
 8006b90:	f023 0307 	bic.w	r3, r3, #7
 8006b94:	3308      	adds	r3, #8
 8006b96:	9303      	str	r3, [sp, #12]
 8006b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b9a:	443b      	add	r3, r7
 8006b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b9e:	e767      	b.n	8006a70 <_vfiprintf_r+0x94>
 8006ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	e7a5      	b.n	8006af6 <_vfiprintf_r+0x11a>
 8006baa:	2300      	movs	r3, #0
 8006bac:	3401      	adds	r4, #1
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f04f 0c0a 	mov.w	ip, #10
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bbc:	3a30      	subs	r2, #48	; 0x30
 8006bbe:	2a09      	cmp	r2, #9
 8006bc0:	d903      	bls.n	8006bca <_vfiprintf_r+0x1ee>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0c5      	beq.n	8006b52 <_vfiprintf_r+0x176>
 8006bc6:	9105      	str	r1, [sp, #20]
 8006bc8:	e7c3      	b.n	8006b52 <_vfiprintf_r+0x176>
 8006bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bce:	4604      	mov	r4, r0
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e7f0      	b.n	8006bb6 <_vfiprintf_r+0x1da>
 8006bd4:	ab03      	add	r3, sp, #12
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	462a      	mov	r2, r5
 8006bda:	4b16      	ldr	r3, [pc, #88]	; (8006c34 <_vfiprintf_r+0x258>)
 8006bdc:	a904      	add	r1, sp, #16
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7fc ff04 	bl	80039ec <_printf_float>
 8006be4:	4607      	mov	r7, r0
 8006be6:	1c78      	adds	r0, r7, #1
 8006be8:	d1d6      	bne.n	8006b98 <_vfiprintf_r+0x1bc>
 8006bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bec:	07d9      	lsls	r1, r3, #31
 8006bee:	d405      	bmi.n	8006bfc <_vfiprintf_r+0x220>
 8006bf0:	89ab      	ldrh	r3, [r5, #12]
 8006bf2:	059a      	lsls	r2, r3, #22
 8006bf4:	d402      	bmi.n	8006bfc <_vfiprintf_r+0x220>
 8006bf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bf8:	f7ff fe67 	bl	80068ca <__retarget_lock_release_recursive>
 8006bfc:	89ab      	ldrh	r3, [r5, #12]
 8006bfe:	065b      	lsls	r3, r3, #25
 8006c00:	f53f af12 	bmi.w	8006a28 <_vfiprintf_r+0x4c>
 8006c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c06:	e711      	b.n	8006a2c <_vfiprintf_r+0x50>
 8006c08:	ab03      	add	r3, sp, #12
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	462a      	mov	r2, r5
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <_vfiprintf_r+0x258>)
 8006c10:	a904      	add	r1, sp, #16
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7fd f98e 	bl	8003f34 <_printf_i>
 8006c18:	e7e4      	b.n	8006be4 <_vfiprintf_r+0x208>
 8006c1a:	bf00      	nop
 8006c1c:	08007438 	.word	0x08007438
 8006c20:	08007458 	.word	0x08007458
 8006c24:	08007418 	.word	0x08007418
 8006c28:	080072ac 	.word	0x080072ac
 8006c2c:	080072b6 	.word	0x080072b6
 8006c30:	080039ed 	.word	0x080039ed
 8006c34:	080069b7 	.word	0x080069b7
 8006c38:	080072b2 	.word	0x080072b2

08006c3c <__swbuf_r>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	460e      	mov	r6, r1
 8006c40:	4614      	mov	r4, r2
 8006c42:	4605      	mov	r5, r0
 8006c44:	b118      	cbz	r0, 8006c4e <__swbuf_r+0x12>
 8006c46:	6983      	ldr	r3, [r0, #24]
 8006c48:	b90b      	cbnz	r3, 8006c4e <__swbuf_r+0x12>
 8006c4a:	f7ff fd8d 	bl	8006768 <__sinit>
 8006c4e:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <__swbuf_r+0x98>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	d12b      	bne.n	8006cac <__swbuf_r+0x70>
 8006c54:	686c      	ldr	r4, [r5, #4]
 8006c56:	69a3      	ldr	r3, [r4, #24]
 8006c58:	60a3      	str	r3, [r4, #8]
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	071a      	lsls	r2, r3, #28
 8006c5e:	d52f      	bpl.n	8006cc0 <__swbuf_r+0x84>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	b36b      	cbz	r3, 8006cc0 <__swbuf_r+0x84>
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	6820      	ldr	r0, [r4, #0]
 8006c68:	1ac0      	subs	r0, r0, r3
 8006c6a:	6963      	ldr	r3, [r4, #20]
 8006c6c:	b2f6      	uxtb	r6, r6
 8006c6e:	4283      	cmp	r3, r0
 8006c70:	4637      	mov	r7, r6
 8006c72:	dc04      	bgt.n	8006c7e <__swbuf_r+0x42>
 8006c74:	4621      	mov	r1, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	f7ff fce2 	bl	8006640 <_fflush_r>
 8006c7c:	bb30      	cbnz	r0, 8006ccc <__swbuf_r+0x90>
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	60a3      	str	r3, [r4, #8]
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	6022      	str	r2, [r4, #0]
 8006c8a:	701e      	strb	r6, [r3, #0]
 8006c8c:	6963      	ldr	r3, [r4, #20]
 8006c8e:	3001      	adds	r0, #1
 8006c90:	4283      	cmp	r3, r0
 8006c92:	d004      	beq.n	8006c9e <__swbuf_r+0x62>
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	07db      	lsls	r3, r3, #31
 8006c98:	d506      	bpl.n	8006ca8 <__swbuf_r+0x6c>
 8006c9a:	2e0a      	cmp	r6, #10
 8006c9c:	d104      	bne.n	8006ca8 <__swbuf_r+0x6c>
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f7ff fccd 	bl	8006640 <_fflush_r>
 8006ca6:	b988      	cbnz	r0, 8006ccc <__swbuf_r+0x90>
 8006ca8:	4638      	mov	r0, r7
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <__swbuf_r+0x9c>)
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	d101      	bne.n	8006cb6 <__swbuf_r+0x7a>
 8006cb2:	68ac      	ldr	r4, [r5, #8]
 8006cb4:	e7cf      	b.n	8006c56 <__swbuf_r+0x1a>
 8006cb6:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <__swbuf_r+0xa0>)
 8006cb8:	429c      	cmp	r4, r3
 8006cba:	bf08      	it	eq
 8006cbc:	68ec      	ldreq	r4, [r5, #12]
 8006cbe:	e7ca      	b.n	8006c56 <__swbuf_r+0x1a>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f81a 	bl	8006cfc <__swsetup_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d0cb      	beq.n	8006c64 <__swbuf_r+0x28>
 8006ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8006cd0:	e7ea      	b.n	8006ca8 <__swbuf_r+0x6c>
 8006cd2:	bf00      	nop
 8006cd4:	08007438 	.word	0x08007438
 8006cd8:	08007458 	.word	0x08007458
 8006cdc:	08007418 	.word	0x08007418

08006ce0 <__ascii_wctomb>:
 8006ce0:	b149      	cbz	r1, 8006cf6 <__ascii_wctomb+0x16>
 8006ce2:	2aff      	cmp	r2, #255	; 0xff
 8006ce4:	bf85      	ittet	hi
 8006ce6:	238a      	movhi	r3, #138	; 0x8a
 8006ce8:	6003      	strhi	r3, [r0, #0]
 8006cea:	700a      	strbls	r2, [r1, #0]
 8006cec:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cf0:	bf98      	it	ls
 8006cf2:	2001      	movls	r0, #1
 8006cf4:	4770      	bx	lr
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	4770      	bx	lr
	...

08006cfc <__swsetup_r>:
 8006cfc:	4b32      	ldr	r3, [pc, #200]	; (8006dc8 <__swsetup_r+0xcc>)
 8006cfe:	b570      	push	{r4, r5, r6, lr}
 8006d00:	681d      	ldr	r5, [r3, #0]
 8006d02:	4606      	mov	r6, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	b125      	cbz	r5, 8006d12 <__swsetup_r+0x16>
 8006d08:	69ab      	ldr	r3, [r5, #24]
 8006d0a:	b913      	cbnz	r3, 8006d12 <__swsetup_r+0x16>
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f7ff fd2b 	bl	8006768 <__sinit>
 8006d12:	4b2e      	ldr	r3, [pc, #184]	; (8006dcc <__swsetup_r+0xd0>)
 8006d14:	429c      	cmp	r4, r3
 8006d16:	d10f      	bne.n	8006d38 <__swsetup_r+0x3c>
 8006d18:	686c      	ldr	r4, [r5, #4]
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d20:	0719      	lsls	r1, r3, #28
 8006d22:	d42c      	bmi.n	8006d7e <__swsetup_r+0x82>
 8006d24:	06dd      	lsls	r5, r3, #27
 8006d26:	d411      	bmi.n	8006d4c <__swsetup_r+0x50>
 8006d28:	2309      	movs	r3, #9
 8006d2a:	6033      	str	r3, [r6, #0]
 8006d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	f04f 30ff 	mov.w	r0, #4294967295
 8006d36:	e03e      	b.n	8006db6 <__swsetup_r+0xba>
 8006d38:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <__swsetup_r+0xd4>)
 8006d3a:	429c      	cmp	r4, r3
 8006d3c:	d101      	bne.n	8006d42 <__swsetup_r+0x46>
 8006d3e:	68ac      	ldr	r4, [r5, #8]
 8006d40:	e7eb      	b.n	8006d1a <__swsetup_r+0x1e>
 8006d42:	4b24      	ldr	r3, [pc, #144]	; (8006dd4 <__swsetup_r+0xd8>)
 8006d44:	429c      	cmp	r4, r3
 8006d46:	bf08      	it	eq
 8006d48:	68ec      	ldreq	r4, [r5, #12]
 8006d4a:	e7e6      	b.n	8006d1a <__swsetup_r+0x1e>
 8006d4c:	0758      	lsls	r0, r3, #29
 8006d4e:	d512      	bpl.n	8006d76 <__swsetup_r+0x7a>
 8006d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d52:	b141      	cbz	r1, 8006d66 <__swsetup_r+0x6a>
 8006d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	d002      	beq.n	8006d62 <__swsetup_r+0x66>
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7fe fd0d 	bl	800577c <_free_r>
 8006d62:	2300      	movs	r3, #0
 8006d64:	6363      	str	r3, [r4, #52]	; 0x34
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6063      	str	r3, [r4, #4]
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f043 0308 	orr.w	r3, r3, #8
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	b94b      	cbnz	r3, 8006d96 <__swsetup_r+0x9a>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8c:	d003      	beq.n	8006d96 <__swsetup_r+0x9a>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 f84d 	bl	8006e30 <__smakebuf_r>
 8006d96:	89a0      	ldrh	r0, [r4, #12]
 8006d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d9c:	f010 0301 	ands.w	r3, r0, #1
 8006da0:	d00a      	beq.n	8006db8 <__swsetup_r+0xbc>
 8006da2:	2300      	movs	r3, #0
 8006da4:	60a3      	str	r3, [r4, #8]
 8006da6:	6963      	ldr	r3, [r4, #20]
 8006da8:	425b      	negs	r3, r3
 8006daa:	61a3      	str	r3, [r4, #24]
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	b943      	cbnz	r3, 8006dc2 <__swsetup_r+0xc6>
 8006db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006db4:	d1ba      	bne.n	8006d2c <__swsetup_r+0x30>
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	0781      	lsls	r1, r0, #30
 8006dba:	bf58      	it	pl
 8006dbc:	6963      	ldrpl	r3, [r4, #20]
 8006dbe:	60a3      	str	r3, [r4, #8]
 8006dc0:	e7f4      	b.n	8006dac <__swsetup_r+0xb0>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e7f7      	b.n	8006db6 <__swsetup_r+0xba>
 8006dc6:	bf00      	nop
 8006dc8:	20000008 	.word	0x20000008
 8006dcc:	08007438 	.word	0x08007438
 8006dd0:	08007458 	.word	0x08007458
 8006dd4:	08007418 	.word	0x08007418

08006dd8 <abort>:
 8006dd8:	b508      	push	{r3, lr}
 8006dda:	2006      	movs	r0, #6
 8006ddc:	f000 f898 	bl	8006f10 <raise>
 8006de0:	2001      	movs	r0, #1
 8006de2:	f7fa fc59 	bl	8001698 <_exit>

08006de6 <__swhatbuf_r>:
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	460e      	mov	r6, r1
 8006dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dee:	2900      	cmp	r1, #0
 8006df0:	b096      	sub	sp, #88	; 0x58
 8006df2:	4614      	mov	r4, r2
 8006df4:	461d      	mov	r5, r3
 8006df6:	da07      	bge.n	8006e08 <__swhatbuf_r+0x22>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	602b      	str	r3, [r5, #0]
 8006dfc:	89b3      	ldrh	r3, [r6, #12]
 8006dfe:	061a      	lsls	r2, r3, #24
 8006e00:	d410      	bmi.n	8006e24 <__swhatbuf_r+0x3e>
 8006e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e06:	e00e      	b.n	8006e26 <__swhatbuf_r+0x40>
 8006e08:	466a      	mov	r2, sp
 8006e0a:	f000 f89d 	bl	8006f48 <_fstat_r>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	dbf2      	blt.n	8006df8 <__swhatbuf_r+0x12>
 8006e12:	9a01      	ldr	r2, [sp, #4]
 8006e14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e1c:	425a      	negs	r2, r3
 8006e1e:	415a      	adcs	r2, r3
 8006e20:	602a      	str	r2, [r5, #0]
 8006e22:	e7ee      	b.n	8006e02 <__swhatbuf_r+0x1c>
 8006e24:	2340      	movs	r3, #64	; 0x40
 8006e26:	2000      	movs	r0, #0
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	b016      	add	sp, #88	; 0x58
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e30 <__smakebuf_r>:
 8006e30:	898b      	ldrh	r3, [r1, #12]
 8006e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e34:	079d      	lsls	r5, r3, #30
 8006e36:	4606      	mov	r6, r0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	d507      	bpl.n	8006e4c <__smakebuf_r+0x1c>
 8006e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	6123      	str	r3, [r4, #16]
 8006e44:	2301      	movs	r3, #1
 8006e46:	6163      	str	r3, [r4, #20]
 8006e48:	b002      	add	sp, #8
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	ab01      	add	r3, sp, #4
 8006e4e:	466a      	mov	r2, sp
 8006e50:	f7ff ffc9 	bl	8006de6 <__swhatbuf_r>
 8006e54:	9900      	ldr	r1, [sp, #0]
 8006e56:	4605      	mov	r5, r0
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7fe fcdf 	bl	800581c <_malloc_r>
 8006e5e:	b948      	cbnz	r0, 8006e74 <__smakebuf_r+0x44>
 8006e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e64:	059a      	lsls	r2, r3, #22
 8006e66:	d4ef      	bmi.n	8006e48 <__smakebuf_r+0x18>
 8006e68:	f023 0303 	bic.w	r3, r3, #3
 8006e6c:	f043 0302 	orr.w	r3, r3, #2
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	e7e3      	b.n	8006e3c <__smakebuf_r+0xc>
 8006e74:	4b0d      	ldr	r3, [pc, #52]	; (8006eac <__smakebuf_r+0x7c>)
 8006e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	6020      	str	r0, [r4, #0]
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	9b00      	ldr	r3, [sp, #0]
 8006e84:	6163      	str	r3, [r4, #20]
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	6120      	str	r0, [r4, #16]
 8006e8a:	b15b      	cbz	r3, 8006ea4 <__smakebuf_r+0x74>
 8006e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e90:	4630      	mov	r0, r6
 8006e92:	f000 f86b 	bl	8006f6c <_isatty_r>
 8006e96:	b128      	cbz	r0, 8006ea4 <__smakebuf_r+0x74>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	f043 0301 	orr.w	r3, r3, #1
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	89a0      	ldrh	r0, [r4, #12]
 8006ea6:	4305      	orrs	r5, r0
 8006ea8:	81a5      	strh	r5, [r4, #12]
 8006eaa:	e7cd      	b.n	8006e48 <__smakebuf_r+0x18>
 8006eac:	08006701 	.word	0x08006701

08006eb0 <_malloc_usable_size_r>:
 8006eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb4:	1f18      	subs	r0, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfbc      	itt	lt
 8006eba:	580b      	ldrlt	r3, [r1, r0]
 8006ebc:	18c0      	addlt	r0, r0, r3
 8006ebe:	4770      	bx	lr

08006ec0 <_raise_r>:
 8006ec0:	291f      	cmp	r1, #31
 8006ec2:	b538      	push	{r3, r4, r5, lr}
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	d904      	bls.n	8006ed4 <_raise_r+0x14>
 8006eca:	2316      	movs	r3, #22
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ed6:	b112      	cbz	r2, 8006ede <_raise_r+0x1e>
 8006ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006edc:	b94b      	cbnz	r3, 8006ef2 <_raise_r+0x32>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 f830 	bl	8006f44 <_getpid_r>
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	4620      	mov	r0, r4
 8006eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eee:	f000 b817 	b.w	8006f20 <_kill_r>
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d00a      	beq.n	8006f0c <_raise_r+0x4c>
 8006ef6:	1c59      	adds	r1, r3, #1
 8006ef8:	d103      	bne.n	8006f02 <_raise_r+0x42>
 8006efa:	2316      	movs	r3, #22
 8006efc:	6003      	str	r3, [r0, #0]
 8006efe:	2001      	movs	r0, #1
 8006f00:	e7e7      	b.n	8006ed2 <_raise_r+0x12>
 8006f02:	2400      	movs	r4, #0
 8006f04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f08:	4628      	mov	r0, r5
 8006f0a:	4798      	blx	r3
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	e7e0      	b.n	8006ed2 <_raise_r+0x12>

08006f10 <raise>:
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <raise+0xc>)
 8006f12:	4601      	mov	r1, r0
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	f7ff bfd3 	b.w	8006ec0 <_raise_r>
 8006f1a:	bf00      	nop
 8006f1c:	20000008 	.word	0x20000008

08006f20 <_kill_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d07      	ldr	r5, [pc, #28]	; (8006f40 <_kill_r+0x20>)
 8006f24:	2300      	movs	r3, #0
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	f7fa fba3 	bl	8001678 <_kill>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	d102      	bne.n	8006f3c <_kill_r+0x1c>
 8006f36:	682b      	ldr	r3, [r5, #0]
 8006f38:	b103      	cbz	r3, 8006f3c <_kill_r+0x1c>
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	bd38      	pop	{r3, r4, r5, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000310 	.word	0x20000310

08006f44 <_getpid_r>:
 8006f44:	f7fa bb90 	b.w	8001668 <_getpid>

08006f48 <_fstat_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d07      	ldr	r5, [pc, #28]	; (8006f68 <_fstat_r+0x20>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	602b      	str	r3, [r5, #0]
 8006f56:	f7fa fbee 	bl	8001736 <_fstat>
 8006f5a:	1c43      	adds	r3, r0, #1
 8006f5c:	d102      	bne.n	8006f64 <_fstat_r+0x1c>
 8006f5e:	682b      	ldr	r3, [r5, #0]
 8006f60:	b103      	cbz	r3, 8006f64 <_fstat_r+0x1c>
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	bd38      	pop	{r3, r4, r5, pc}
 8006f66:	bf00      	nop
 8006f68:	20000310 	.word	0x20000310

08006f6c <_isatty_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4d06      	ldr	r5, [pc, #24]	; (8006f88 <_isatty_r+0x1c>)
 8006f70:	2300      	movs	r3, #0
 8006f72:	4604      	mov	r4, r0
 8006f74:	4608      	mov	r0, r1
 8006f76:	602b      	str	r3, [r5, #0]
 8006f78:	f7fa fbed 	bl	8001756 <_isatty>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_isatty_r+0x1a>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_isatty_r+0x1a>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	20000310 	.word	0x20000310

08006f8c <_init>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr

08006f98 <_fini>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr
